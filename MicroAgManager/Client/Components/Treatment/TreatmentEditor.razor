@using Domain.Constants;
@using Domain.Models;
@using FrontEnd.Components.Unit;
@inherits DataComponent<TreatmentModel>
@if (editContext is not null)
{
    <ValidatedForm editContext="editContext"
        FreshenData="FreshenData"
        OnValidSubmit="OnSubmit"
        Cancel="Cancel"
        showUpdateCancelButtons="true"
        createOnly="@(working.Id<1)"
        Modal="Modal"
        Show="Show"
        @ref=_validatedForm>
        <DataContent>
            <ValidatedField Legend="Treatment" ValidationMessageFor="@(() => working.Name)">
                <InputText placeholder="Treatment" @bind-Value="@working.Name" />
            </ValidatedField>
            <ValidatedField Legend="Brand Name" ValidationMessageFor="@(() => working.BrandName)">
                <InputText placeholder="Brand Name" @bind-Value="@working.BrandName" />
            </ValidatedField>
            <ValidatedField Legend="Reason" ValidationMessageFor="@(() => working.Reason)">
                <InputTextArea placeholder="Reason" @bind-Value="@working.Reason" />
            </ValidatedField>
            <ValidatedField Legend="Label Method" ValidationMessageFor="@(() => working.LabelMethod)">
                <InputSelect @bind-Value="@working.LabelMethod">
                    <option value="">Select Method ...</option>
                    <option value="@TreatmentConstants.Grooming">@TreatmentConstants.Grooming</option>
                    <option value="@TreatmentConstants.Intramuscular">@TreatmentConstants.Intramuscular</option>
                    <option value="@TreatmentConstants.Intravenous">@TreatmentConstants.Intravenous</option>
                    <option value="@TreatmentConstants.Oral">@TreatmentConstants.Oral</option>
                    <option value="@TreatmentConstants.Subcutaneous">@TreatmentConstants.Subcutaneous</option>
                    <option value="@TreatmentConstants.Surgical">@TreatmentConstants.Surgical</option>
                    <option value="@TreatmentConstants.Topical">@TreatmentConstants.Topical</option>
                </InputSelect>
            </ValidatedField>
            @if (!string.IsNullOrEmpty(working.LabelMethod) && !TreatmentConstants.NonWithdrawalTreatments.Contains(working.LabelMethod))
            {
               <ValidatedField Legend="Dosage Amount" ValidationMessageFor="@(() => working.DosageAmount)">
                    <InputNumber placeholder="Dosage Amount" @bind-Value="@working.DosageAmount" />
                </ValidatedField>
                <ValidatedField ValidationMessageFor="@(() => working.DosageUnitId)">
                    <LegendContent>
                        <div style="display:inline-flex">
                            <span>Dosage Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                            <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="DosageUnitCreated" Cancelled="DosageUnitCanceled"></UnitEditor>
                        </div>
                    </LegendContent>
                    <ChildContent>
                        <InputSelect @bind-Value="@working.DosageUnitId">
                            <option value="">Select Dosage Unit ...</option>
                            @foreach (var unit in app.dbContext.Units.Where(u=> UnitCategoryConstants.DosageUnits.Keys.Contains(u.Category)).OrderBy(u=>u.Category).ThenBy(u=>u.Name))
                            {
                                <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                            }
                        </InputSelect>
                    </ChildContent>
                </ValidatedField>
                <ValidatedField Legend="Recipient Mass" ValidationMessageFor="@(() => working.RecipientMass)">
                    <InputNumber @bind-Value="@working.RecipientMass" />
                </ValidatedField>
                <ValidatedField ValidationMessageFor="@(() => working.RecipientMassUnitId)">
                    <LegendContent>
                        <div style="display:inline-flex">
                            <span>Mass Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                            <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="MassUnitCreated" Cancelled="MassUnitCanceled"></UnitEditor>
                        </div>
                    </LegendContent>
                    <ChildContent>
                        <InputSelect @bind-Value="@working.RecipientMassUnitId">
                            <option value="">Select Mass Unit ...</option>
                            @foreach (var unit in app.dbContext.Units.Where(u => u.Category == UnitCategoryConstants.Mass.Key).OrderBy(u => u.Name))
                            {
                                <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                            }
                        </InputSelect>
                    </ChildContent>
                </ValidatedField>
                <ValidatedField Legend="Meat Withdrawal (Days)" ValidationMessageFor="@(() => working.MeatWithdrawal)">
                    <InputNumber @bind-Value="@working.MeatWithdrawal" />
                </ValidatedField>
                <ValidatedField Legend="Milk Withdrawal (Days)" ValidationMessageFor="@(() => working.MilkWithdrawal)">
                    <InputNumber @bind-Value="@working.MilkWithdrawal" />
                </ValidatedField>
            }
            <ValidatedField Legend="Frequency" ValidationMessageFor="@(() => working.Frequency)">
                <InputNumber @bind-Value="@working.Frequency" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => working.FrequencyUnitId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Frequency Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="FrequencyUnitCreated" Cancelled="FrequencyUnitCanceled"></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@working.FrequencyUnitId">
                        <option value="">Select Frequency Unit ...</option>
                        @foreach (var unit in app.dbContext.Units.Where(u => u.Category == UnitCategoryConstants.Time.Key).OrderBy(u => u.Name))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
            <ValidatedField Legend="Duration" ValidationMessageFor="@(() => working.Duration)">
                <InputNumber @bind-Value="@working.Duration" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => working.DurationUnitId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Duration Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="DurationUnitCreated" Cancelled="DurationUnitCanceled"></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@working.DurationUnitId">
                        <option value="">Select Duration Unit ...</option>
                        @foreach (var unit in app.dbContext.Units.Where(u => u.Category == UnitCategoryConstants.Time.Key).OrderBy(u => u.Name))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        </DataContent>
    </ValidatedForm>
}
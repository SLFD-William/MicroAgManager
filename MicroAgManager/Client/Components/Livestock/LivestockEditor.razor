@using Domain.Constants;
@using Domain.Models;
@using FrontEnd.Components.LivestockStatus;
@inherits DataComponent<LivestockModel>
@if (editContext is not null && working is not null)
{
    <ValidatedForm editContext="editContext"
                   FreshenData="FreshenData"
                   OnValidSubmit="OnSubmit"
                   Cancel="Cancel"
                   showUpdateCancelButtons="true"
                   Modal="Modal"
                   Show="Show"
                   @ref=_validatedForm>
        <DataContent>
            <ValidatedField Legend="Breed" ValidationMessageFor="@(() => working.LivestockBreedId)">
                @LivestockBreed.Name
            </ValidatedField>
            <ValidatedField Legend="Variety" ValidationMessageFor="@(() => working.Variety)">
                <InputText placeholder="Variety" @bind-Value="@working.Variety" list="varietyList" />
                <datalist id="varietyList">
                    @foreach (var g in app.dbContext.Livestocks.Where(s => s.LivestockBreedId == LivestockBreed.Id).Select(a => a.Variety).Distinct().OrderBy(a => a))
                    {
                        <option value="@g" />
                    }
                </datalist>
            </ValidatedField>
            <ValidatedField Legend="BatchNumber" ValidationMessageFor="@(() => working.BatchNumber)">
                <InputText placeholder="BatchNumber" @bind-Value="@working.BatchNumber" />
            </ValidatedField>
            <ValidatedField Legend="Name" ValidationMessageFor="@(() => working.Name)">
                <InputText placeholder="Name" @bind-Value="@working.Name" />
            </ValidatedField>
            <ValidatedField Legend="Description" ValidationMessageFor="@(() => working.Description)">
                <InputText placeholder="Description" @bind-Value="@working.Description" />
            </ValidatedField>
            <ValidatedField Legend="Birth Date" ValidationMessageFor="@(() => working.Birthdate)">
                <InputDate @bind-Value="@working.Birthdate"/>
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => working.StatusId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Status</span><button type="button" @onclick=ShowStatusEditor>+</button>
                        <LivestockStatusEditor Show=showStatusModal livestockAnimalId="LivestockBreed.LivestockAnimalId" @ref=_livestockStatusEditor Modal="true" Submitted="StatusCreated" Cancelled="StatusCanceled"></LivestockStatusEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@StatusId">
                        <option value="0">Select Status ...</option>
                        @foreach (var g in app.dbContext.LivestockStatuses.Where(s => s.LivestockAnimalId == LivestockBreed.LivestockAnimalId).OrderBy(a => a.Status))
                        {
                            <option value="@g.Id" >@g.Status</option>
                        }
                    </InputSelect>
                </ChildContent>
                
            </ValidatedField>
            <ValidatedField Legend="Location" ValidationMessageFor="@(() => working.LocationId)">
                <InputSelect @bind-Value="@working.LocationId">
                    <option value="0">Select Location ...</option>
                    @foreach (var g in app.dbContext.LandPlots.Where(p => p.Usage == LandPlotUseConstants.Livestock).OrderBy(a=>a.Name).ToList())
                    {
                        <option value="@g.Id">@g.Name</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Gender" ValidationMessageFor="@(() => working.Gender)">
                <InputSelect @bind-Value="@working.Gender">
                    <option value="0">Select Gender ...</option>
                    <option value="@GenderConstants.Female">@nameof(GenderConstants.Female)</option>
                    <option value="@GenderConstants.Male">@nameof(GenderConstants.Male)</option>
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Birth Defect" ValidationMessageFor="@(() => working.BornDefective)">
                <InputCheckbox @bind-Value="@working.BornDefective" />
            </ValidatedField>
            @if (working.BornDefective)
            {
                <ValidatedField Legend="Defect Description" ValidationMessageFor="@(() => working.BirthDefect)">
                    <InputText placeholder="Defect Description" @bind-Value="@working.BirthDefect" />
                </ValidatedField>
            }

            <ValidatedField Legend="Being Managed" ValidationMessageFor="@(() => working.BeingManaged)">
                <InputCheckbox @bind-Value="@working.BeingManaged" />
            </ValidatedField>
            <ValidatedField Legend="Bottle Fed" ValidationMessageFor="@(() => working.BottleFed)">
                <InputCheckbox @bind-Value="@working.BottleFed" />
            </ValidatedField>
            <ValidatedField Legend="Sterile" ValidationMessageFor="@(() => working.Sterile)">
                <InputCheckbox @bind-Value="@working.Sterile" />
            </ValidatedField>
            <ValidatedField Legend="In Milk" ValidationMessageFor="@(() => working.InMilk)">
                <InputCheckbox @bind-Value="@working.InMilk" />
            </ValidatedField>
            <ValidatedField Legend="For Sale" ValidationMessageFor="@(() => working.ForSale)">
                <InputCheckbox @bind-Value="@working.ForSale" />
            </ValidatedField>
            <ValidatedField Legend="@LivestockAnimal.ParentFemaleName" ValidationMessageFor="@(() => working.MotherId)">
                <InputSelect @bind-Value="@working.MotherId">
                    <option value="0">Select @LivestockAnimal.ParentFemaleName ...</option>
                    @foreach (var g in app.dbContext.Livestocks.Where(s => s.LivestockBreedId == LivestockBreed.Id 
                        && s.Gender == GenderConstants.Female
                        && s.Id != working.Id).OrderBy(a => a.Name))
                    {
                        <option value="@g.Id" >@g.Name</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="@LivestockAnimal.ParentMaleName" ValidationMessageFor="@(() => working.FatherId)">
                <InputSelect @bind-Value="@working.FatherId">
                    <option value="0">Select @LivestockAnimal.ParentMaleName ...</option>
                    @foreach (var g in app.dbContext.Livestocks.Where(s => s.LivestockBreedId == LivestockBreed.Id
                        && s.Gender == GenderConstants.Male
                        && s.Id != working.Id).OrderBy(a => a.Name))
                    {
                        <option value="@g.Id">@g.Name</option>
                    }
                </InputSelect>
            </ValidatedField>
        </DataContent>
@*         <SecondaryContent>
            @if (working.Id > 0)
            {
                <CascadingValue Value="@working">
                    <LivestockSubTabs @ref="_tabControl"></LivestockSubTabs>
                </CascadingValue>
            }
        </SecondaryContent> *@
    </ValidatedForm>

}
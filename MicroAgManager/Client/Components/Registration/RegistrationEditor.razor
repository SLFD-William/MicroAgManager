@using Domain.Constants;
@using Domain.Models;
@using FrontEnd.Components.Unit;
@using Microsoft.EntityFrameworkCore;
@using FrontEnd.Components.Registrar;
@inherits HasRecipientComponent<RegistrationModel>
@if (editContext is not null && working is not null)
{
    <ValidatedForm editContext="editContext"
                   FreshenData="FreshenData"
                   OnValidSubmit="OnSubmit"
                   Cancel="Cancel"
                   showUpdateCancelButtons="showUpdateCancelButtons"
                   Modal="Modal"
                   Show="Show"
    @ref=_validatedForm>
        <DataContent>
            <ValidatedField Legend="Recipient Type" ValidationMessageFor="@(() => working.RecipientType)">
                <InputSelect @bind-Value="@working.RecipientType">
                    <option value="0">Select Recipient Type ...</option>
                    <option value="@RecipientTypeConstants.LivestockAnimal">@nameof(RecipientTypeConstants.LivestockAnimal)</option>
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient Type Id" ValidationMessageFor="@(() => working.RecipientTypeId)">
                <InputSelect @bind-Value="@working.RecipientTypeId">
                    <option value="0">Select Recipient Type Instance ...</option>
                    @foreach (var recipient in recipientTypeIds())
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient" ValidationMessageFor="@(() => working.RecipientId)">
                <InputSelect @bind-Value="@working.RecipientId">
                    <option value="0">Select Recipient Instance ...</option>
                    @foreach (var recipient in recipientIds())
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => working.RegistrarId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Registrar</span><button type="button" @onclick=ShowRegistrarEditor>+</button>
                        <RegistrarEditor @ref=_registrarEditor Modal="true" Show="@(showRegistrarModal)" showUpdateCancelButtons="true" Submitted="RegistrarCreated" Cancelled="RegistrarCanceled"></RegistrarEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@working.RegistrarId">
                        <option value="0">Select Registrar ...</option>
                        @foreach (var registrar in app.dbContext.Registrars.OrderBy(m => m.Name))
                        {
                            <option value="@registrar.Id">@($"{registrar.Name} ({registrar.RegistrarFarmID})")</option>
                        }
                    </InputSelect>
                </ChildContent>
                </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => working.Identifier)">
                <InputText @bind-Value="@working.Identifier"></InputText>
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => working.DefaultIdentification)">
                <InputCheckbox @bind-Value="@working.DefaultIdentification"></InputCheckbox>
            </ValidatedField>
            <ValidatedField Legend="Registration Date" ValidationMessageFor="@(() => working.RegistrationDate)">
                <InputDate @bind-Value="@working.RegistrationDate"></InputDate>
            </ValidatedField>
        </DataContent>
    </ValidatedForm>
}
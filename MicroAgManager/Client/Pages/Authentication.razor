@page "/authentication/register"
@page "/authentication/login"
@using BackEnd.Abstracts
@using BackEnd.BusinessLogic.Authentication
@using BackEnd.Models.Authentication
@inject NavigationManager navigationManager
@inject FrontEndAuthenticationStateProvider authStateProvider
<div class="Authentication">
    <EditForm OnValidSubmit="OnSubmit" EditContext="@editContext">
    <DataAnnotationsValidator />
    <div class="dataSection">
        <ValidatedField Legend="Email" ValidationMessageFor="@(() => registerRequest.Email)">
            <InputText id="inputUsername" placeholder="Email" autofocus @bind-Value="@Email" />
        </ValidatedField>
        @if (IsRegistering)
        {
            <ValidatedField Legend="Farm" ValidationMessageFor="@(() => registerRequest.Name)">
                <InputText id="inputFarmName" placeholder="Farm Name" @bind-Value="@registerRequest.Name" />
            </ValidatedField>
        }
        <ValidatedField Legend="Password" ValidationMessageFor="@(() => registerRequest.Password)">
            <InputText type="password" id="inputPassword" placeholder="Password" @bind-Value="@Password" />
        </ValidatedField>
        @if (IsRegistering)
        {
            <ValidatedField Legend="Password Confirmation" ValidationMessageFor="@(() => registerRequest.ConfirmPassword)">
                <InputText type="password" id="inputPasswordConfirm" placeholder="Password Confirmation" @bind-Value="@registerRequest.ConfirmPassword" />
            </ValidatedField>
        }
    </div>
    <div >
        <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@registerRequest.RememberMe" />
        <label class="form-check-label" for="inputRememberMe">Remember Me</label>
    </div>
    <button class="btn btn-lg btn-primary btn-block" type="submit">@SubmitString()</button>
    @if (!loginResult.success)
    {
        <div class="validation-message">@loginResult.message</div>
    }
    <NavLink href=@HrefString()>
        <h6 class="font-weight-normal text-center">@NavLinkString()</h6>
    </NavLink>
</EditForm>
</div>
@code{
    private EditContext? editContext;

    public bool IsRegistering { get; private set; }
    public string Email { get => IsRegistering ? registerRequest.Email : loginRequest.Email ; 
        set{registerRequest.Email = loginRequest.Email = value;} }
    public string Password
    {
        get => IsRegistering ? registerRequest.Password : loginRequest.Password;
        set { registerRequest.Password = loginRequest.Password = value; }
    }

    string SubmitString() => IsRegistering ? "Create Account" : "Sign In";
    string HrefString() => IsRegistering ? "authentication/login" : "authentication/register";
    string NavLinkString() => IsRegistering ? "Already have an account? Click here to login" : "Create account";

    RegisterUserCommand registerRequest { get; set; } = new RegisterUserCommand();
    LoginUserCommand loginRequest { get; set; } = new LoginUserCommand();
    [Parameter]public  LoginResult loginResult { get; set; } = new LoginResult { success = true };



    protected override void OnInitialized()
    {
        IsRegistering =  navigationManager.Uri.Contains("/register");

        editContext = IsRegistering ? new(registerRequest) : new(loginRequest);

        navigationManager.LocationChanged += (o, i) =>
        {
            IsRegistering = i.Location.Contains("/register");
            editContext.MarkAsUnmodified();
            loginResult = new LoginResult { success = true };
            StateHasChanged();
        };
        base.OnInitialized();
    }
    async Task OnSubmit()
    {
        try
        {
            loginResult = IsRegistering ? await authStateProvider.Register(registerRequest)
                : await authStateProvider.Login((LoginUserCommand)registerRequest);
            if (!loginResult.success)
                return;
            StateHasChanged();
            if (IsRegistering)//TODO Handle Email Confirmation
                navigationManager.NavigateTo("onboarding");
            else
                navigationManager.NavigateTo("onboarding"); //TODO remove this once wizard is complete.
        }
        catch (Exception ex)
        {
            loginResult.success=false;
            loginResult.message = ex.Message;
        }
    }
}
@using Domain.Models;
@inherits DataComponent<LivestockStatusModel>
@if (editContext is not null)
{
    <ValidatedForm editContext="editContext" 
        FreshenData="FreshenData"
        OnValidSubmit="OnSubmit" 
        Cancel="Cancel"
        showUpdateCancelButtons="true"
        createOnly="@(working.Id<1)"
        Modal="Modal"
        Show="Show"
        @ref=_validatedForm>
        <DataContent>
                @if (working.LivestockAnimalId <= 0)
                {
                    <ValidatedField Legend="Livestock Type" ValidationMessageFor="@(() => working.LivestockAnimalId)">
                        <InputSelect @bind-Value="@working.LivestockAnimalId">
                            <option value="0">Select Livestock Type ...</option>
                            @foreach (var state in app.dbContext.LivestockAnimals.OrderBy(a => a.Name))
                            {
                                <option value="@state.Id">@state.Name</option>
                            }
                        </InputSelect>
                    </ValidatedField>
                }
                <ValidatedField Legend="Status" ValidationMessageFor="@(() => working.Status)">
                    <InputText placeholder="Status" @bind-Value="@working.Status" />
                </ValidatedField>
                <ValidatedField Legend="Default Status" ValidationMessageFor="@(() => working.DefaultStatus)">
                    <InputCheckbox @bind-Value="@working.DefaultStatus" />
                </ValidatedField>
                <ValidatedField Legend="Being Managed" ValidationMessageFor="@(() => working.BeingManaged)">
                    <InputSelect @bind-Value="@working.BeingManaged">
                        @foreach (var state in StatusModes)
                        {
                            <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                        }
                    </InputSelect>
                </ValidatedField>
                <ValidatedField Legend="Sterile" ValidationMessageFor="@(() => working.Sterile)">
                    <InputSelect @bind-Value="@working.Sterile">
                        @foreach (var state in StatusModes)
                        {
                            <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                        }
                    </InputSelect>
                </ValidatedField>
                <ValidatedField Legend="In Milk" ValidationMessageFor="@(() => working.InMilk)">
                    <InputSelect @bind-Value="@working.InMilk">
                        @foreach (var state in StatusModes)
                        {
                            <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                        }
                    </InputSelect>
                </ValidatedField>
                <ValidatedField Legend="Bottle Fed" ValidationMessageFor="@(() => working.BottleFed)">
                    <InputSelect @bind-Value="@working.BottleFed">
                        @foreach (var state in StatusModes)
                        {
                            <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                        }
                    </InputSelect>
                </ValidatedField>
                <ValidatedField Legend="For Sale" ValidationMessageFor="@(() => working.ForSale)">
                    <InputSelect @bind-Value="@working.ForSale">
                        @foreach (var state in StatusModes)
                        {
                            <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                        }
                    </InputSelect>
                </ValidatedField>

            
        </DataContent>
</ValidatedForm>
}
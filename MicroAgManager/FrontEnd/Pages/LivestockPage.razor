@layout MainLayout
@using Domain.Models
@using FrontEnd.Components.Livestock
@using Microsoft.EntityFrameworkCore
@using Microsoft.FluentUI.AspNetCore.Components
@page "/Livestock"
@page "/Livestock/{livestockId}"

@if(livestock !=null)
{
    <CascadingValue Value="livestock">
        <LivestockViewer></LivestockViewer>
    </CascadingValue>
}
@if (app?.dbContext is not null && livestock == null)
{
<section class="LivestockPage">
    <FluentTreeView OnExpandedChange="HandleOnExpandedChanged" OnSelectedChange="HandleOnSelectedChanged">
          <FluentTreeItem Text="Animals" Id="Animals:0">
            @foreach(var animal in app.dbContext.LivestockAnimals.Include(a=>a.Breeds).OrderBy(a=>a.Name))
            {
                <FluentTreeItem Text="@animal.Name" Id="@($"{animal.GetEntityName()}:{animal.Id}")" Selected=@IsSelected($"{animal.GetEntityName()}:{animal.Id}")>
                        <FluentTreeItem Text="Breeds" Id="Breeds:0">
                        @foreach(var breed in animal.Breeds.OrderBy(b=>b.Name))
                        {
                                <FluentTreeItem Text="@($"{breed.EmojiChar} {breed.Name}")" Id="@($"{breed.GetEntityName()}:{breed.Id}")">
                                    <FluentTreeItem Text="Varieties" Id="Varieties:0">
                                @foreach(var variety in breed.Livestocks.Select(v=>v.Variety).Distinct().OrderBy(l=>l))
                                {
                                        <FluentTreeItem Text="@variety" Id="@($"Variety:{breed.Id}")" />
                                }
                                    </FluentTreeItem>
                                    <FluentTreeItem Text="Status" Id="Status:0">
                                        @foreach (var variety in breed.Livestocks.Select(v => v.CurrentStatus).Distinct().OrderBy(l => l))
                                        {
                                            <FluentTreeItem Text="@variety" Id="@($"Status:{breed.Id}")" />
                                        }
                                    </FluentTreeItem>
                                    <FluentTreeItem Text="Batch Number" Id="BatchNumber:0">
                                        @foreach (var variety in breed.Livestocks.Select(v => v.BatchNumber).Distinct().OrderBy(l => l))
                                        {
                                            <FluentTreeItem Text="@variety" Id="@($"BatchNumber:{breed.Id}")" />
                                        }
                                    </FluentTreeItem>
                            </FluentTreeItem>
                        }
                    </FluentTreeItem>
             </FluentTreeItem>
            }
                </FluentTreeItem>
    </FluentTreeView>
    <FluentDataGrid @ref=livestockGrid TGridItem=LivestockModel Virtualize=true Items="@filteredLivestockQuery()">
        @if(IsColumnVisible(nameof(LivestockAnimalModel).Replace("Model", string.Empty)))
        {
            <PropertyColumn Property="@(p => p.Breed.Animal.Name)" Title="Animal" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="animalNameFilter" @bind:event="oninput" placeholder="Animal..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }
        @if (IsColumnVisible(nameof(LivestockBreedModel).Replace("Model", string.Empty)))
        {
            <PropertyColumn Property="@(p => p.Breed.Name)" Title="Breed" Sortable ="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="breedNameFilter" @bind:event="oninput" placeholder="Breed..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(p => p.Breed.EmojiChar)" Title="Emoji" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="breedEmojiFilter" @bind:event="oninput" placeholder="Emoji..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }
        @if (IsColumnVisible("Variety"))
        {
        <PropertyColumn Property="@(p => p.Variety)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="varietyFilter" @bind:event="oninput" placeholder="Variety..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        }
            @if (IsColumnVisible("BatchNumber"))
            {
                <PropertyColumn Property
                ="@(p => p.BatchNumber)" Title
                ="Batch Number" Sortable
                ="true">
                    <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="batchNumberFilter" @bind:event="oninput" placeholder="Batch Number..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        }
        <PropertyColumn Property="@(p => p.Gender)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="genderFilter" @bind:event="oninput" placeholder="Gender..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
            @if (IsColumnVisible("Status"))
            {
        <PropertyColumn Property="@(p => p.Status.Status)" Title="Status">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="statusFilter" @bind:event="oninput" placeholder="Status..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
            }
        <PropertyColumn Property="@(p => p.Name)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.Birthdate)" Format="yyyy-MM-dd" Sortable="true" />
        <PropertyColumn Property="@(p => p.BeingManaged)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Sterile)" Sortable="true" />
        <PropertyColumn Property="@(p => p.InMilk)" Sortable="true" />
        <PropertyColumn Property="@(p => p.BottleFed)" Sortable="true" />
        <PropertyColumn Property="@(p => p.ForSale)" Sortable="true" />
        <PropertyColumn Property="@(p => p.MotherName)" Title="Mother" Sortable="false" />
        <PropertyColumn Property="@(p => p.FatherName)" Title="Father" Sortable="false" />
        <PropertyColumn Property="@(p => p.BornDefective)" Sortable="true" />
        <PropertyColumn Property="@(p => p.BirthDefect)" Title="Defect Description" Sortable="true" />
    </FluentDataGrid>
</section>
}
@code {
    @inject ApplicationStateProvider app
    // @inject NavigationManager nm
    [Parameter] public string livestockId { get; set; }
    FluentDataGrid<LivestockModel> livestockGrid;
    string animalNameFilter;
    string breedNameFilter;
    string breedEmojiFilter;
    string varietyFilter;
    string batchNumberFilter;
    string genderFilter;
    string statusFilter;
    string nameFilter;

    private bool IsExpanded(string itemId) => app.ExpandedTreeNodes["LivestockPage"].Any(t => t.Id == itemId);
    private bool IsSelected(string itemId) => app.SelectedTreeNodes["LivestockPage"].Any(t => t.Id == itemId);

    private bool IsColumnVisible(string itemId) {
        var selected = app.SelectedTreeNodes["LivestockPage"];
        var expanded = app.ExpandedTreeNodes["LivestockPage"];
        if (selected?.Any() != true && expanded?.Any() != true) return true;
        foreach(var item in selected)
            if (item.Id !=null && item.Id.StartsWith(itemId))  return false;
        foreach (var item in expanded)
            if (item.Id != null && item.Id.StartsWith(itemId)) return false;
        return true;

    }
    private List<long> TreeFilteredColumns(string entityName)
    {
        var selected = app.SelectedTreeNodes["LivestockPage"];
        var expanded = app.ExpandedTreeNodes["LivestockPage"];
        if (selected?.Any() != true && expanded?.Any() != true) return new();
        var filtered = new List<FluentTreeItem>();
        foreach (var item in selected)
            if (item.Id != null && item.Id.StartsWith(entityName)) filtered.Add(item);
        foreach (var item in expanded)
            if (item.Id != null && item.Id.StartsWith(entityName)) filtered.Add(item);
        return filtered.Select(t => long.Parse(t.Id.Split(':')[1])).Distinct().ToList(); 
    }
    private List<string> TreeFilteredColumns(string entityName, bool useText = true)
    {
        var selected = app.SelectedTreeNodes["LivestockPage"];
        var expanded = app.ExpandedTreeNodes["LivestockPage"];
        if (selected?.Any() != true && expanded?.Any() != true) return new();
        var filtered = new List<FluentTreeItem>();
        foreach (var item in selected)
            if (item.Id != null && item.Id.StartsWith(entityName)) filtered.Add(item);
        foreach (var item in expanded)
            if (item.Id != null && item.Id.StartsWith(entityName)) filtered.Add(item);
        return useText ? filtered.Select(t => t.Text).Distinct().ToList(): filtered.Select(t => t.Id.Split(':')[1]).Distinct().ToList();
    }

    private void HandleOnExpandedChanged(FluentTreeItem item)
    {
        if (item.Expanded)
            app.ExpandedTreeNodes["LivestockPage"].Add(item);
        else
            app.ExpandedTreeNodes["LivestockPage"].Remove(item);

        InvokeAsync(RefreshLivestock);
    }
    private void HandleOnSelectedChanged(FluentTreeItem item)
    {
        if (item.Selected)
            app.SelectedTreeNodes["LivestockPage"].Add(item);
        else
            app.SelectedTreeNodes["LivestockPage"].Remove(item);

        InvokeAsync(RefreshLivestock);
    }

    private LivestockModel livestock;
    private long? _livestockId;
    protected virtual void DbSync_OnUpdate() => InvokeAsync(RefreshLivestock);
    protected override void OnInitialized()
    {

        if (!app.ExpandedTreeNodes.ContainsKey("LivestockPage"))
            app.ExpandedTreeNodes.Add("LivestockPage", new List<FluentTreeItem>());
        if (!app.SelectedTreeNodes.ContainsKey("LivestockPage"))
            app.SelectedTreeNodes.Add("LivestockPage", new List<FluentTreeItem>());
        //nm.LocationChanged += HandleLocationChanged;
        app.dbSynchonizer.OnUpdate += DbSync_OnUpdate;
        InvokeAsync(RefreshLivestock);
    }

    //private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)=>InvokeAsync(RefreshLivestock);
    private IQueryable<LivestockModel> baseLivestockQuery() =>
        app.dbContext.Livestocks.Include(p => p.Status)
            .Include(p => p.Breed).ThenInclude(p => p.Animal)
            .Include(p => p.Mother).Include(p => p.Father);

    private IQueryable<LivestockModel> filteredLivestockQuery()
    {
        var query = baseLivestockQuery();
        var filteredAnimals = TreeFilteredColumns("LivestockAnimal");
        if (filteredAnimals.Any())
            query = query.Where(p => filteredAnimals.Contains(p.Breed.LivestockAnimalId));

        var filteredBreeds = TreeFilteredColumns("LivestockBreed");
        if (filteredBreeds.Any())
            query = query.Where(p => filteredBreeds.Contains(p.Breed.Id));

        var filteredVariety = TreeFilteredColumns("Variety",true);
        if (filteredVariety.Any())
            query = query.Where(p => filteredVariety.Contains(p.Variety));
        var filteredStatus = TreeFilteredColumns("Status", true);
        if (filteredStatus.Any())
            query = query.Where(p => filteredStatus.Contains(p.Status.Status));
        var filteredBatchNumber = TreeFilteredColumns("BatchNumber", true);
        if (filteredBatchNumber.Any())
            query = query.Where(p => filteredBatchNumber.Contains(p.BatchNumber));
        if(!string.IsNullOrEmpty(animalNameFilter))
            query = query.Where(p => p.Breed.Animal.Name.Contains(animalNameFilter));
        if (!string.IsNullOrEmpty(breedNameFilter))
            query = query.Where(p => p.Breed.Name.Contains(breedNameFilter));
        if (!string.IsNullOrEmpty(breedEmojiFilter))
            query = query.Where(p => p.Breed.EmojiChar.Contains(breedEmojiFilter));
        if (!string.IsNullOrEmpty(varietyFilter))
            query = query.Where(p => p.Variety.Contains(varietyFilter));
        if (!string.IsNullOrEmpty(batchNumberFilter))
            query = query.Where(p => p.BatchNumber.Contains(batchNumberFilter));
        if (!string.IsNullOrEmpty(genderFilter))
            query = query.Where(p => p.Gender.Contains(genderFilter));
        if (!string.IsNullOrEmpty(statusFilter))
            query = query.Where(p => p.CurrentStatus.Contains(statusFilter));
        if (!string.IsNullOrEmpty(nameFilter))
            query = query.Where(p => p.Name.Contains(nameFilter));
            
        return query;
        
    }
    private async Task RefreshLivestock()
    {

        if (long.TryParse(livestockId, out var id))
            _livestockId = id;
        livestock = null;
        if (_livestockId.HasValue)
            livestock = await baseLivestockQuery().FirstOrDefaultAsync(i => i.Id == _livestockId.Value);
        else
            await livestockGrid.RefreshDataAsync();

        StateHasChanged();
    }
    public virtual ValueTask DisposeAsync()
    {
        //nm.LocationChanged -= HandleLocationChanged;
        app.dbSynchonizer.OnUpdate -= DbSync_OnUpdate;
        return ValueTask.CompletedTask;
    }
}
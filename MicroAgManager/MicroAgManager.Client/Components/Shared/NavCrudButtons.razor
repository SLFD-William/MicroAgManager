

@if (!Editting)

{
    @if (OnNavigateClick.HasDelegate)
    {
        <button class="btn-link nav-link" type="button" @onclick=navigateClicked>@NavigateText</button>
    }
    @if (OnCreateClick.HasDelegate)
    {
        <button class="btn-link safe" type="button" @onclick=createClicked>@CreateText</button>
    }
    @if (OnEditClick.HasDelegate)
    {
        <button class="btn-link warning" type="button" @onclick=editClicked>@EditText</button>
    }
    @if (OnDeleteClick.HasDelegate)
    {
        <button class="btn-link danger" type="button" @onclick=deleteClicked>@DeleteText</button>
    }
}
else{
    @if (OnCancelClick.HasDelegate)
    {
        <button class="btn-link safe" type="button" @onclick=cancelClicked>@CancelText</button>
    }

    @if (OnSaveClick.HasDelegate)
    {
        <button class="btn-link warning" type="button" @onclick=saveClicked>@SaveText</button>
    }
}
@code {
    [Parameter] public string EditText { get; set; } = "edit";
    [Parameter] public string NavigateText { get; set; } = "navigate";
    [Parameter] public string SaveText { get; set; } = "save";
    [Parameter] public string DeleteText { get; set; } = "delete";
    [Parameter] public string CreateText { get; set; } = "create";
    [Parameter] public string CancelText { get; set; } = "cancel";


    [Parameter] public EventCallback OnEditClick { get; set; }
    [Parameter] public EventCallback OnNavigateClick { get; set; }
    [Parameter] public EventCallback OnSaveClick { get; set; }
    [Parameter] public EventCallback OnDeleteClick { get; set; }
    [Parameter] public EventCallback OnCreateClick { get; set; }
    [Parameter] public EventCallback OnCancelClick { get; set; }
    [Parameter] public bool Editting { get; set; } = false;

    private void editClicked()
    {
        Editting = true;
        OnEditClick.InvokeAsync();
    }
    private void cancelClicked()
    {
        Editting = false;
        OnCancelClick.InvokeAsync();
    }
    private void deleteClicked()
    {
        Editting = false;
        OnDeleteClick.InvokeAsync();
    }
    private void navigateClicked()
    {
        Editting = false;
        OnNavigateClick.InvokeAsync();
    }
    private void createClicked()
    {
        Editting = true;
        OnCreateClick.InvokeAsync();
    }
    private void saveClicked()
    {
        Editting = false;
        OnSaveClick.InvokeAsync();
    }
    
}

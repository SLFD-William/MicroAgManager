@page "/counter"
@inject ClientApplicationStateProvider app
@inject IJSRuntime jsRuntime
@rendermode InteractiveWebAssembly

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>
<p role="status">API Response: @currentCall</p>
<p role="status">App State: @app?.AppStaticInstanceName</p>
<p role="status">App State: @app?.AppInstanceName</p>
<p role="status">DB Created: @currentDb </p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="CallApi">Call API</button>
@if (_db != null)
{
    <button class="btn btn-primary" @onclick="GetDbContext">Get Db Context</button>
}


@code {
    private int currentCount = 0;
    private string currentCall="Nope";
    private string currentDb = "Nope";
    private FrontEnd.Persistence.FrontEndDbContext _db;
    private string haveApp = "Nope";
    private string haveInstantiatedApp = "Nope";

    private void CallApi() => InvokeAsync(UpdateResp);
    private void GetDbContext() => InvokeAsync(GetDbContextAsync);
    private async Task GetDbContextAsync()
    {

        currentDb = _db.Livestocks.Count().ToString();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _db = await app.InitializeDbContextAsync(jsRuntime);
            StateHasChanged();
        }
    }
    private async Task UpdateResp()
    {

        currentCall = await app.IsServerAlive();
        currentCount++;
        StateHasChanged();
    }
    private void IncrementCount()
    {
        currentCall = "Nope";
        currentCount++;
    }
}

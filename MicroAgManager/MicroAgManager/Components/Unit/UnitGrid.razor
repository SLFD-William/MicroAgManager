@using Domain.Constants
@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared.Filters
@using MicroAgManager.Data
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
<QuickGrid Theme="microagmanager" @ref=unitGrid TGridItem=UnitModel  Items="FilteredItems()">
    <TemplateColumn Title="Category" Sortable="true" Context="unit">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="categoryFilter" @bind:event="oninput" placeholder="Category ..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <span>@unit.Category (@UnitCategoryConstants.Units[unit.Category]) </span>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Name" Sortable="false" Context="unit">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Unit..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@($"/Ancillaries/Units?UnitId={unit.Id}")>
                @unit.Name
            </NavLink>
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.Symbol)" Title="Symbol" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="symbolFilter" @bind:event="oninput" placeholder="Symbol..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.ConversionFactorToSIUnit)" Title="SI Conversion" Sortable="true">
        <ColumnOptions>
            <GenericFilter T="double?" OnFilterChanged="HandleConversionFilterChanged" FilterValue="@conversionFilter" FilterEndValue="@conversionFilterEnd" FilterOperator="@conversionFilterOperator" />
        </ColumnOptions>
    </PropertyColumn>
</QuickGrid>

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter] required public IQueryable<UnitModel> Items { get; set; }
    QuickGrid<UnitModel> unitGrid;
    string categoryFilter { get; set; }
    string nameFilter { get; set; }
    string symbolFilter { get; set; }
    double? conversionFilter { get; set; } //numeric
    string conversionFilterOperator { get; set; } //numeric
    double? conversionFilterEnd { get; set; } //numeric
    private IQueryable<UnitModel> FilteredItems()
    {
        var query = Items.ToList().AsQueryable();
        if (!string.IsNullOrWhiteSpace(categoryFilter))
            query = query.Where(s => s.Category.Contains(categoryFilter));
        if (!string.IsNullOrWhiteSpace(nameFilter))
            query = query.Where(s => s.Name.Contains(nameFilter));
        if (!string.IsNullOrWhiteSpace(symbolFilter))
            query = query.Where(s => s.Symbol.Contains(symbolFilter));
        if (!string.IsNullOrWhiteSpace(conversionFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.ConversionFactorToSIUnit, conversionFilter, conversionFilterOperator, conversionFilterEnd);

        return query;
    }
    private void HandleConversionFilterChanged((string? FilterOperator, double? FilterValue, double? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        conversionFilter = filterValue;
        conversionFilterOperator = filterOperator ?? string.Empty;
        conversionFilterEnd = filterEndValue;
        StateHasChanged();
    }

}

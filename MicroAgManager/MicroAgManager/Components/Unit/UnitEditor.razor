@using BackEnd.BusinessLogic.Unit
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits BaseEditor

@if (editContext is not null)
{
    <ValidatedForm editContext="editContext"
                   OnSubmit="@OnUnitSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync())"
                   showUpdateCancelButtons="true"
                   Modal=Modal
                   Show=Show
                   Title="@(unit.Id< 1 ? "Create Unit" : $"Edit {unit.Name}")">
        <ChildContent>
            <ValidatedField Legend="Unit" ValidationMessageFor="@(() => unit.Category)">
                <InputSelect @bind-Value="@unit.Category">
                    <option value="">Select Category ...</option>
                    @foreach (var category in UnitCategoryConstants.Units.Keys.Order().ToList())
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Unit" ValidationMessageFor="@(() => unit.Name)">
                <InputText placeholder="Unit" @bind-Value="@unit.Name" />
            </ValidatedField>
            <ValidatedField Legend="Symbol" ValidationMessageFor="@(() => unit.Symbol)">
                <InputText placeholder="Unit" @bind-Value="@unit.Symbol" />
            </ValidatedField>
            @if (!string.IsNullOrEmpty(unit.Category))
            { 
                <ValidatedField Legend=@($"Conversion to SI {UnitCategoryConstants.Units[unit.Category]}") ValidationMessageFor="@(() => unit.ConversionFactorToSIUnit)">
                    <InputNumber placeholder="0" @bind-Value="@unit.ConversionFactorToSIUnit" />
                </ValidatedField>
            }
        </ChildContent>

    </ValidatedForm>
}

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Inject] protected IAPIService api { get; set; }
    private UnitModel? unit;
    protected override void OnInitialized()
    {
        unit = editContext.Model as UnitModel;
        if (unit is null) return;
    }
    private async Task OnUnitSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;
        try
        {

            var creating = (unit.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<UnitModel, CreateUnit>("api/CreateUnit", new CreateUnit { Unit = unit }) :
                await api.ProcessCommand<UnitModel, UpdateUnit>("api/UpdateUnit", new UpdateUnit { Unit = unit });

            if (id <= 0)
                throw new Exception("Unable to save unit");
            if (creating)
            {
                unit.Id = id;
                appState.DbContext.Units.Add(unit);
            }
            else
            {
                var updated = await appState.DbContext.Units.FindAsync(unit.Id);
                updated = unit.Map(updated) as UnitModel;
            }
            await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(unit);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }

    }

}

@using BackEnd.BusinessLogic.Milestone
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.Duty
@using MicroAgManager.Components.Shared
@using MicroAgManager.Data
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore
@inherits BaseEditor
@if (milestone is not null)
{
       <ValidatedForm editContext="editContext"
                   OnSubmit="@OnMilestoneSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="true"
                   createOnly="@(milestone.Id<1)"
                   Modal=Modal
                    Show=Show>
        <ChildContent>
            @if (milestone.RecipientTypeId <= 0)
            {
                <ValidatedField Legend="Livestock Type" ValidationMessageFor="@(() => milestone.RecipientTypeId)">
                    <InputSelect @bind-Value="@milestone.RecipientTypeId">
                            <option value="0">Select Type ...</option>
                            @foreach (var state in recipientIds())
                            {
                                <option value="@state.Key">@state.Value</option>
                            }
                    </InputSelect>
                </ValidatedField>
            }
            <ValidatedField Legend="Milestone" ValidationMessageFor="@(() => milestone.Name)">
                <InputText placeholder="Milestone" @bind-Value="@(milestone.Name)" />
            </ValidatedField>
            <ValidatedField Legend="Description" ValidationMessageFor="@(() => milestone.Description)">
                <InputTextArea placeholder="Description" @bind-Value="@(milestone.Description)" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => milestone.Duties)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Duties</span><button type="button" @onclick=ShowDutyEditor>+</button>
                        <DutyEditor Modal=true Show=@showDutyModal editContext=dutyEditContext OnCancel=DutyCanceled OnSubmit=DutySubmitted></DutyEditor>
                    </div>
                </LegendContent>

                <ChildContent>
                    <ul>
                        @foreach (var g in appState.DbContext.Duties.Where(l => milestone.Duties.Contains(l)))
                        {
                            <li><button type="button" @onclick=@(()=> DutyRemoved(g))>-</button> @g.Name</li>
                        }
                    </ul>
                    <select @onchange="DutySelected">
                        <option value="">Select Duty ...</option>
                        @foreach (var g in appState.DbContext.Duties.Where(l => !milestone.Duties.Contains(l)))
                        {
                            <option value="@g.Id">@g.Name</option>
                        }
                    </select>
                </ChildContent>
            </ValidatedField>
        </ChildContent>
    </ValidatedForm>
}

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Inject] protected IAPIService api { get; set; }
    private ValidatedForm _validatedForm;
    private MilestoneModel? milestone;
    protected override void OnInitialized()
    {
        milestone = editContext.Model as MilestoneModel;
        if (milestone is null) return;
    }
    private async Task OnMilestoneSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;
        try
        {

            var creating = (milestone.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<MilestoneModel, CreateMilestone>("api/CreateMilestone", new CreateMilestone { Milestone = milestone }) :
                await api.ProcessCommand<MilestoneModel, UpdateMilestone>("api/UpdateMilestone", new UpdateMilestone { Milestone = milestone });

            if (id <= 0)
                throw new Exception("Unable to save land plot");
            if (creating)
            {
                milestone.Id = id;
                appState.DbContext.Milestones.Add(milestone);
            }
            else
            {
                var updated = await appState.DbContext.Milestones.FindAsync(milestone.Id);
                updated = milestone.Map(updated) as MilestoneModel;
            }
            await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(milestone);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }

    }
    private bool showDutyModal = false;
    private EditContext dutyEditContext = new EditContext(new DutyModel());
    private void ShowDutyEditor()
    {
        dutyEditContext = new EditContext(new DutyModel());
        showDutyModal = true;
        StateHasChanged();
    }
    private void DutySubmitted(EditContext e)
    {
        var model = e.Model as DutyModel;
        showDutyModal = false;
        milestone.Duties.Add(model);
        dutyEditContext = null;
        StateHasChanged();
    }
    private void DutyCanceled(object e)
    {
        showDutyModal = false;
        StateHasChanged();
    }
    void DutyRemoved(DutyModel duty)
    {
        milestone.Duties.Remove(duty);
        StateHasChanged();
    }
    void DutySelected(ChangeEventArgs e)
    {
        milestone.Duties.Add(appState.DbContext.Duties.Find(long.Parse(e.Value.ToString())));
        StateHasChanged();
    }
    private List<KeyValuePair<long, string>> recipientIds()
    {
        if (milestone.RecipientType == RecipientTypeConstants.LivestockAnimal)
            return appState.DbContext.LivestockAnimals.OrderBy(a => a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();
        if (milestone.RecipientType == RecipientTypeConstants.LivestockBreed)
            return appState.DbContext.LivestockBreeds.Include(a=>a.Animal).OrderBy(a => a.Animal.Name).ThenBy(a=>a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();
        return new List<KeyValuePair<long, string>>();
    }
}

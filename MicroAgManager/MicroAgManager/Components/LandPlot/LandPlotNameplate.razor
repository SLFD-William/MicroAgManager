@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Services
<section class="LandPlotNameplate">
     <section class="name">
        <NavCrudButtons Editting="@showPlotModal" 
            ShowEdit="@((ShowEdit || OnEditClick.HasDelegate) && Plot.Id>0)" 
            OnEditClick="ShowPlotEditor"
                        ShowNavigate="@((ShowNavigate || OnEditClick.HasDelegate))"
                        NavigateText="@NavigateText"
                        OnNavigateClick=@OnNavigateClick
                  ></NavCrudButtons>
        <h3>@Plot.Name</h3>
    </section>
    @if (ShowAll || ShowFarm)
    {
        <section class="farm">
            @if (ShowAll)
            {
                <h4>Farm</h4>
            }
            <span>@Plot.Farm.Name</span>
        </section>
    }
    @if (ShowAll || ShowDescription)
    {
        <section class="description">
            @if (ShowAll)
            {
                <h4>Description</h4>
            }
            <span>@Plot.Description</span>
        </section>
    }
    @if(ShowAll || ShowArea)
    {
        <section class="area">
            @if (ShowAll)
            {
                <h4>Area</h4>
            }
            <span>@Plot?.Area @Plot?.AreaUnit?.Symbol</span>
        </section>
    }
    @if (ShowAll || ShowUsage)
    {
        <section class="usage">
            @if (ShowAll)
            {
                <h4>Usage</h4>
            }
            <span>@Plot.Usage</span>
        </section>
    }
    @if (ShowAll || ShowSubplots)
    {
        <section class="subplots">
            @if (ShowAll)
            {
                <h4>Subplots</h4>
            }
            <span>@Plot.Subplots?.Count()</span>
        </section>
    }
    @if (ShowAll || ShowLivestocks)
    {
        <section class="livestocks">
            @if (ShowAll)
            {
                <h4>Livestocks</h4>
            }
            <span>@Plot.Livestocks?.Count()</span>
        </section>
    }
    <LandPlotEditor Modal=true Show=@showPlotModal editContext=plotEditContext OnCancel=PlotCanceled OnSubmit=PlotSubmitted></LandPlotEditor>
</section>
@ChildContent
@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [CascadingParameter] LandPlotModel Plot { get; set; }
    [Parameter] public bool ShowAll { get; set; } = false;
    [Parameter] public bool ShowFarm { get; set; } = false;
    [Parameter] public bool ShowDescription { get; set; } = false;
    [Parameter] public bool ShowArea { get; set; } = false;
    [Parameter] public bool ShowUsage { get; set; } = false;
    [Parameter] public bool ShowSubplots { get; set; } = false;
    [Parameter] public bool ShowLivestocks { get; set; } = false;

    [Parameter] public bool ShowEdit { get; set; } = false; 
    [Parameter] public EventCallback OnEditClick { get; set; }
    
    [Parameter] public string NavigateText { get; set; } = "back";
    [Parameter] public bool ShowNavigate { get; set; } = false;
    [Parameter] public EventCallback OnNavigateClick { get; set; }
    
    [Parameter] public EventCallback OnSaveClick { get; set; }
    [Parameter] public EventCallback OnDeleteClick { get; set; }
    [Parameter] public string CreateText { get; set; } = "add";
    [Parameter] public bool ShowCreate { get; set; } = false;
    [Parameter] public EventCallback OnCreateClick { get; set; }
    [Parameter] public EventCallback OnCancelClick { get; set; }

    protected override void OnInitialized()
    {
        plotEditContext = new EditContext(Plot);
    }
    private bool showPlotModal = false;
    private EditContext plotEditContext;
    private void ShowPlotEditor()
    {
        var plot = ApplicationState._dbContext.LandPlots.Find(Plot.Id) ?? new LandPlotModel();
        plotEditContext = new EditContext(plot);
        showPlotModal = true;
        OnEditClick.InvokeAsync();
        StateHasChanged();
    }
    private void PlotSubmitted(EditContext e)
    {
        var model = e.Model as LandPlotModel;
        showPlotModal = false;
        if (model == null) return;
        StateHasChanged();
    }
    private void PlotCanceled(object e)
    {
        showPlotModal = false;
        StateHasChanged();
    }
}
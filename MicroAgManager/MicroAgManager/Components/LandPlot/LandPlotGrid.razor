@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared.Filters
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore


<QuickGrid Theme="microagmanager" @ref=plotGrid TGridItem=LandPlotModel  Items="FilteredItems()">
    
    @if (ShowFarmColumn)
    {
        <TemplateColumn Title="Farm" Sortable="true" Context="farm" SortBy="@OrderByFarmName">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="farmNameFilter" @bind:event="oninput" placeholder="Farm..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "FarmLocationId", farm.Farm.Id.ToString()}}))>@farm.Farm.Name</NavLink>
            </ChildContent>
        </TemplateColumn>
    }
    <TemplateColumn Title="Plot" Sortable="true" Context="plot" SortBy="@OrderByPlotName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="plotNameFilter" @bind:event="oninput" placeholder="Plot..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "FarmLocationId", plot.FarmLocationId.ToString()},{ "LandPlotId", plot.Id.ToString()}}))>@plot.Name</NavLink>
            </ChildContent>
    </TemplateColumn>
    @if (ShowUsageColumn)
    {
        <PropertyColumn Property="@(p => p.Usage)" Title="Usage" Sortable="true">
            <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="usageFilter" @bind:event="oninput" placeholder="Farm..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    }
    <TemplateColumn Title="Parent Plot" Sortable="true" Context="plot" SortBy="@OrderByParentPlotName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="parentPlotNameFilter" @bind:event="oninput" placeholder="Parent Plot..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            @if (plot.ParentPlotId.HasValue)
            {
                <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "FarmLocationId", plot.FarmLocationId.ToString()},{ "LandPlotId", plot.ParentPlotId.Value.ToString()}}))>@plot.ParentPlotName</NavLink>
            }
        </ChildContent>
    </TemplateColumn>

    
    <PropertyColumn Property="@(p => p.Area)" Title="Area" Sortable="true">
        <ColumnOptions>
            <GenericFilter T="decimal?" FilterOperator="@areaFilterOperator" FilterValue="@areaFilter" FilterEndValue="@areaFilterEnd" OnFilterChanged="HandleAreaFilterChanged" />
        </ColumnOptions>
    </PropertyColumn>
     <PropertyColumn Property="@(p => p.UnitSymbol)" Title="Area Unit" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="unitSymbolFilter" @bind:event="oninput" placeholder="Farm..." />
            </div>        
        </ColumnOptions>
    </PropertyColumn>


</QuickGrid>
@code {
    [Parameter] required public IQueryable<LandPlotModel> Items { get; set; }
    [Parameter]   public bool ShowFarmColumn
    {
        get => _showFarmColumn;
        set
        {
            _showFarmColumn = value;
            if (!value)
                farmNameFilter = string.Empty;
        }
    }
    private bool _showFarmColumn = true;

    [Parameter]
    public bool ShowUsageColumn
    {
        get => _showUsageColumn;
        set
        {
            _showUsageColumn = value;
            if (!value)
                usageFilter = string.Empty;
        }
    }
    private bool _showUsageColumn = true;

    QuickGrid<LandPlotModel> plotGrid;
    private GridSort<LandPlotModel> OrderByPlotName = GridSort<LandPlotModel>.ByAscending(p => p.Name);
    private GridSort<LandPlotModel> OrderByParentPlotName = GridSort<LandPlotModel>.ByAscending(p => p.ParentPlotName);
    private GridSort<LandPlotModel> OrderByFarmName = GridSort<LandPlotModel>.ByAscending(p => p.FarmName);
    private IQueryable<LandPlotModel> FilteredItems()
    {
        var query = Items.ToList().AsQueryable();
        if (!string.IsNullOrWhiteSpace(farmNameFilter))
            query = query.Where(s => s.FarmName.Contains(farmNameFilter));
        if (!string.IsNullOrWhiteSpace(plotNameFilter))
            query = query.Where(s => s.Name.Contains(plotNameFilter));
        if (!string.IsNullOrWhiteSpace(parentPlotNameFilter))
            query = query.Where(s => s.ParentPlotName.Contains(parentPlotNameFilter));
        if (!string.IsNullOrWhiteSpace(usageFilter))
            query = query.Where(s => s.Usage.Contains(usageFilter));
        if (!string.IsNullOrWhiteSpace(unitSymbolFilter))
            query = query.Where(s => s.UnitSymbol.Contains(unitSymbolFilter));
        if (!string.IsNullOrWhiteSpace(areaFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.Area, areaFilter, areaFilterOperator, areaFilterEnd);

        return query;
    }

    string farmNameFilter { get; set; }
    string plotNameFilter { get; set; }
    string parentPlotNameFilter { get; set; }
    string usageFilter { get; set; }
    string unitSymbolFilter { get; set; }
    decimal? areaFilter { get; set; } //numeric
    string areaFilterOperator { get; set; } //numeric
    decimal? areaFilterEnd { get; set; }

    private void HandleAreaFilterChanged((string? FilterOperator, decimal? FilterValue, decimal? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        areaFilter = filterValue;
        areaFilterOperator = filterOperator ?? string.Empty;
        areaFilterEnd = filterEndValue;
        StateHasChanged();
    }

}
@using Domain.Models
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore


<QuickGrid Theme="microagmanager" @ref=plotGrid TGridItem=LandPlotModel Virtualize=true Items="Items">
    
    @if (ShowFarmColumn)
    {
        <TemplateColumn Title="Farm" Sortable="true" Context="farm" SortBy="@OrderByFarmName">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="farmNameFilter" @bind:event="oninput" placeholder="Farm..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "FarmLocationId", farm.Farm.Id.ToString()}}))>@farm.Farm.Name</NavLink>
            </ChildContent>
        </TemplateColumn>
    }
    <TemplateColumn Title="Plot" Sortable="true" Context="plot" SortBy="@OrderByPlotName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="plotNameFilter" @bind:event="oninput" placeholder="Plot..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "FarmLocationId", plot.FarmLocationId.ToString()},{ "LandPlotId", plot.Id.ToString()}}))>@plot.Name</NavLink>
            </ChildContent>
    </TemplateColumn>
    @if (ShowUsageColumn)
    {
        <PropertyColumn Property
        ="@(p => p.Usage)" Title
        ="Usage" Sortable
        ="true">
            <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="usageFilter" @bind:event="oninput" placeholder="Farm..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    }
    <TemplateColumn Title="Parent Plot" Sortable="true" Context="plot" SortBy="@OrderByParentPlotName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="parentPlotNameFilter" @bind:event="oninput" placeholder="Parent Plot..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            @if (plot.ParentPlotId.HasValue)
            {
                <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "FarmLocationId", plot.FarmLocationId.ToString()},{ "LandPlotId", plot.ParentPlotId.Value.ToString()}}))>@plot.ParentPlotName</NavLink>
            }
        </ChildContent>
    </TemplateColumn>

    
    <PropertyColumn Property="@(p => p.Area)" Title="Area" Sortable="true">
        <ColumnOptions>
            @* <div class="search-box">
            <input type="search" autofocus @bind="farmNameFilter" @bind:event="oninput" placeholder="Farm..." />
            </div> *@
        </ColumnOptions>
    </PropertyColumn>
     <PropertyColumn Property="@(p => p.AreaUnit.Symbol)" Title="Area Unit" Sortable="true">
        <ColumnOptions>
            @* <div class="search-box">
            <input type="search" autofocus @bind="farmNameFilter" @bind:event="oninput" placeholder="Farm..." />
            </div>         *@
        </ColumnOptions>
    </PropertyColumn>


</QuickGrid>
@code {
    [Parameter] required public IQueryable<LandPlotModel> Items { get; set; }
    QuickGrid<LandPlotModel> plotGrid;
    private GridSort<LandPlotModel> OrderByPlotName = GridSort<LandPlotModel>.ByAscending(p => p.Name);
    private GridSort<LandPlotModel> OrderByParentPlotName = GridSort<LandPlotModel>.ByAscending(p => p.ParentPlotName);
    private GridSort<LandPlotModel> OrderByFarmName = GridSort<LandPlotModel>.ByAscending(p => p.Farm.Name);

    [Parameter] public bool ShowFarmColumn { get; set; } = true;
    [Parameter] public Action<string> farmNameFilterChanged { get; set; }
    private string _farmNameFilter;
    string farmNameFilter
    {
        get => _farmNameFilter; set
        {
            farmNameFilterChanged.Invoke(value);
            _farmNameFilter = value;
        }
    }

    [Parameter] public Action<string> plotNameFilterChanged { get; set; }
    private string _plotNameFilter;
    string plotNameFilter
    {
        get => _plotNameFilter; set
        {
            plotNameFilterChanged.Invoke(value);
            _plotNameFilter = value;
        }
    }
    [Parameter] public Action<string> parentPlotNameFilterChanged { get; set; }
    private string _parentPlotNameFilter;
    string parentPlotNameFilter
    {
        get => _parentPlotNameFilter; set
        {
            parentPlotNameFilterChanged.Invoke(value);
            _parentPlotNameFilter = value;
        }
    }


    [Parameter] public bool ShowUsageColumn { get; set; } = true;
    [Parameter] public Action<string> usageFilterChanged { get; set; }
    private string _usageFilter;
    string usageFilter
    {
        get => _usageFilter; set
        {
            usageFilterChanged.Invoke(value);
            _usageFilter = value;
        }
    }


}
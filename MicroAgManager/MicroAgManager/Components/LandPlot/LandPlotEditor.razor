@using BackEnd.BusinessLogic.FarmLocation.LandPlots
@using Domain.Constants
@using Domain.Models
@using FrontEnd.Persistence
@using MicroAgManager.Components.Shared
@using MicroAgManager.Components.Unit
@using MicroAgManager.Components.Farm
@using MicroAgManager.Data
@inherits BaseEditor
@if (landPlot is not null)
{
    <ValidatedForm editContext="editContext"
                   OnSubmit="@OnLandPlotSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="true"
                   createOnly="@(landPlot.Id<1)"
                   Modal=Modal
                    Show=Show>

        <DataContent>
            <ValidatedField ValidationMessageFor="@(() => landPlot.FarmLocationId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Farm</span><button type="button" @onclick=ShowFarmEditor>+</button>
                        <FarmEditor Modal=true Show=@showFarmModal editContext=farmEditContext OnCancel=FarmCanceled OnSubmit=FarmSubmitted></FarmEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@landPlot.FarmLocationId">
                        <option value="">Select Farm ...</option>
                        @foreach (var unit in _dbContext.Farms)
                        {
                            <option value="@unit.Id">
                                <CascadingValue Value="@unit">
                                    <FarmNameplate ></FarmNameplate>
                                </CascadingValue>
                            </option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
            <ValidatedField Legend="Plot Use" ValidationMessageFor="@(() => landPlot.Usage)">
                <InputSelect @bind-Value="@landPlot.Usage">
                    <option value="">Select Use ...</option>
                    <option value="@LandPlotUseConstants.GeneralUse">@LandPlotUseConstants.GeneralUse</option>
                    <option value="@LandPlotUseConstants.Garden">@LandPlotUseConstants.Garden</option>
                    <option value="@LandPlotUseConstants.Livestock">@LandPlotUseConstants.Livestock</option>
                    <option value="@LandPlotUseConstants.Pasture">@LandPlotUseConstants.Pasture</option>
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Name" ValidationMessageFor="@(() => landPlot.Name)">
                <InputText placeholder="Name" @bind-Value="@landPlot.Name" />
            </ValidatedField>
            <ValidatedField Legend="Description" ValidationMessageFor="@(() => landPlot.Description)">
                <InputText placeholder="Description" @bind-Value="@landPlot.Description" />
            </ValidatedField>
            <ValidatedField Legend="Area" ValidationMessageFor="@(() => landPlot.Area)">
                <InputNumber placeholder="0" @bind-Value="@landPlot.Area" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => landPlot.AreaUnitId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Area Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=UnitSubmitted></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@landPlot.AreaUnitId">
                        <option value="">Select Units ...</option>
                        @foreach (var unit in _dbContext.Units.Where(u => u.Category == UnitCategoryConstants.Area.Key))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        </DataContent>
    </ValidatedForm>
}


@code {
    [Inject] protected IAPIService api { get; set; }
    private LandPlotModel? landPlot;
    #region ModalEditors
    private bool showFarmModal = false;
    private EditContext farmEditContext = new EditContext(new FarmLocationModel());
    private void ShowFarmEditor()
    {
        showFarmModal = true;
        StateHasChanged();
    }
    private void FarmSubmitted(EditContext e)
    {
        var model = e.Model as FarmLocationModel;
        showFarmModal = false;
        if (model == null) return;
        ((LandPlotModel)editContext.Model).AreaUnitId = model.Id;
        // editContext = new EditContext(working);
        StateHasChanged();
    }
    private void FarmCanceled(object e)
    {
        showFarmModal = false;
        StateHasChanged();
    }

    private bool showUnitModal = false;
    private EditContext unitEditContext = new EditContext(new UnitModel());
    private void ShowUnitEditor()
    {
        showUnitModal = true;
        StateHasChanged();
    }
    private void UnitSubmitted(object e)
    {
        // var model = e as UnitModel;
        showUnitModal = false;
        // ((LandPlotModel)editContext.Model).AreaUnitId = model.Id;
        // editContext = new EditContext(working);
        // StateHasChanged();
    }
    private void UnitCanceled(object e)
    {
        showUnitModal = false;
        StateHasChanged();
    }
    #endregion
    protected override void OnInitialized()
    {
        landPlot = editContext.Model as LandPlotModel;
        if (landPlot is null) return;
    }
    private async Task OnLandPlotSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;
        try
        {

            var creating = (landPlot.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<LandPlotModel, CreateLandPlot>("api/CreateLandPlot", new CreateLandPlot { LandPlot = landPlot }) :
                await api.ProcessCommand<LandPlotModel, UpdateLandPlot>("api/UpdateLandPlot", new UpdateLandPlot { LandPlot = landPlot });

            if (id <= 0)
                throw new Exception("Unable to save land plot");
            if (creating)
            {
                landPlot.Id = id;
                _dbContext.LandPlots.Add(landPlot);
            }
            else
            {
                var updated = await _dbContext.LandPlots.FindAsync(landPlot.Id);
                updated = landPlot.Map(updated) as LandPlotModel;
            }
            await _dbContext.SaveChangesAsync();
            editContext = new EditContext(landPlot);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }
        
    }
}

@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared.Filters
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore


<QuickGrid Theme="microagmanager" @ref=farmGrid TGridItem=FarmLocationModel  Items="FilteredItems()">
    <PropertyColumn Property="@(p => p.Name)" Title="Farm" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="farmNameFilter" @bind:event="oninput" placeholder="Farm..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.StreetAddress)" Title="Street" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="streetFilter" @bind:event="oninput" placeholder="Street..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.City)" Title="City" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="cityFilter" @bind:event="oninput" placeholder="City..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.State)" Title="State" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="stateFilter" @bind:event="oninput" placeholder="State..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Zip)" Title="Zip" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="zipFilter" @bind:event="oninput" placeholder="Zip..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Country)" Title="Country" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="countryFilter" @bind:event="oninput" placeholder="Country..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.CountryCode)" Title="Country Code" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="countryCodeFilter" @bind:event="oninput" placeholder="Country Code..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Latitude)" Title="Latitude" Sortable="true">
        <ColumnOptions>
            <GenericFilter T="double?" FilterOperator="@latitudeFilterOperator" FilterValue="@latitudeFilter" FilterEndValue="@latitudeFilterEnd" OnFilterChanged="HandleLatitudeFilterChanged" />
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Longitude)" Title="Longitude" Sortable="true">
        <ColumnOptions>
            <GenericFilter T="double?" FilterOperator="@longitudeFilterOperator" FilterValue="@longitudeFilter" FilterEndValue="@longitudeFilterEnd" OnFilterChanged="HandleLatitudeFilterChanged" />
        </ColumnOptions>
    </PropertyColumn>
</QuickGrid>
@code {
    [Parameter] required public IQueryable<FarmLocationModel> Items { get; set; }
    QuickGrid<FarmLocationModel> farmGrid;
    string farmNameFilter { get; set; }
    string streetFilter { get; set; }
    string cityFilter { get; set; }
    string stateFilter { get; set; }
    string zipFilter { get; set; }
    string countryFilter { get; set; }
    string countryCodeFilter { get; set; }
    double? latitudeFilter { get; set; } //date
    string latitudeFilterOperator { get; set; }
    double? latitudeFilterEnd { get; set; }

    double? longitudeFilter { get; set; } //date
    string longitudeFilterOperator { get; set; }
    double? longitudeFilterEnd { get; set; }

   
    private IQueryable<FarmLocationModel> FilteredItems()
    {
        var query = Items.ToList().AsQueryable();

        if (!string.IsNullOrWhiteSpace(farmNameFilter))
            query = query.Where(s => s.Name.Contains(farmNameFilter));
        if (!string.IsNullOrWhiteSpace(streetFilter))
            query = query.Where(s => s.StreetAddress.Contains(streetFilter));
        if (!string.IsNullOrWhiteSpace(cityFilter))
            query = query.Where(s => s.City.Contains(cityFilter));
        if (!string.IsNullOrWhiteSpace(stateFilter))
            query = query.Where(s => s.State.Contains(stateFilter));
        if (!string.IsNullOrWhiteSpace(zipFilter))
            query = query.Where(s => s.Zip.Contains(zipFilter));
        if (!string.IsNullOrWhiteSpace(countryFilter))
            query = query.Where(s => s.Country.Contains(countryFilter));
        if (!string.IsNullOrWhiteSpace(countryCodeFilter))
            query = query.Where(s => s.CountryCode.Contains(countryCodeFilter));

        if (!string.IsNullOrWhiteSpace(latitudeFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.Latitude, latitudeFilter, latitudeFilterOperator, latitudeFilterEnd);
        if (!string.IsNullOrWhiteSpace(longitudeFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.Longitude, longitudeFilter, longitudeFilterOperator, longitudeFilterEnd);
        return query;
    }
    private void HandleLatitudeFilterChanged((string? FilterOperator, double? FilterValue, double? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        latitudeFilter = filterValue;
        latitudeFilterOperator = filterOperator ?? string.Empty;
        latitudeFilterEnd = filterEndValue;
        StateHasChanged();
    }
    private void HandleLongitudeFilterChanged((string? FilterOperator, double? FilterValue, double? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        longitudeFilter = filterValue;
        longitudeFilterOperator = filterOperator ?? string.Empty;
        longitudeFilterEnd = filterEndValue;
        StateHasChanged();
    }

}
@using BackEnd.BusinessLogic.FarmLocation
@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Data
@inherits BaseEditor
@if (farm is not null)
{
        <ValidatedForm editContext="editContext"
                   OnSubmit="OnFarmSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
               showUpdateCancelButtons="true"
                   @ref=_validatedForm
                   Modal=Modal
                   Show=Show>
        <DataContent>
            <ValidatedField Legend="Name" ValidationMessageFor="@(() => farm.Name)">
                <InputText placeholder="Name" @bind-Value="@farm.Name" />
            </ValidatedField>
               <ValidatedField Legend="Address" ValidationMessageFor="@(() => farm.StreetAddress)">
                <InputText placeholder="Street Address" @bind-Value="@farm.StreetAddress" />
            </ValidatedField>
            <ValidatedField Legend="City" ValidationMessageFor="@(() => farm.City)">
                <InputText placeholder="City" @bind-Value="@farm.City" />
            </ValidatedField>
            <ValidatedField Legend="State" ValidationMessageFor="@(() => farm.State)">
                <InputText placeholder="State" @bind-Value="@farm.State" />
            </ValidatedField>
            <ValidatedField Legend="Zip" ValidationMessageFor="@(() => farm.Zip)">
                <InputText placeholder="Zip" @bind-Value="@farm.Zip" />
            </ValidatedField>
            <ValidatedField Legend="Country" ValidationMessageFor="@(() => farm.Country)">
                <InputText placeholder="Country" @bind-Value="@farm.Country" />
            </ValidatedField>
            @if (locationEnabled)
            {
                <ValidatedField Legend="Latitude" ValidationMessageFor="@(() => farm.Latitude)">
                    <InputNumber placeholder="Latitude" step="0.0000001" @bind-Value="@farm.Latitude" />
                </ValidatedField>
                <ValidatedField Legend="Longitude" ValidationMessageFor="@(() => farm.Longitude)">
                    <InputNumber placeholder="Longitude" step="0.0000001" @bind-Value="@farm.Longitude" />
                </ValidatedField>

        }       
        </DataContent>

        <SecondaryContent>
            <section class="updateCancelButtons">
                <button type="button" @onclick="GetGeoLocation">Look up geo location</button>
                @if (locationEnabled)
                {
                    <button type="button" @onclick="OnCoordinateChange">Look up address</button>
                }
            </section>

    </SecondaryContent>
    </ValidatedForm>
}


@code {
    private ValidatedForm _validatedForm;
    bool locationEnabled { get; set; } = true;
    [Inject] protected IGeolocationService GeoLoc { get; set; }
    [Inject] protected IAPIService api { get; set; }
    private FarmLocationModel? farm;
    protected override void OnAfterRender(bool firstRender)
    {
        farm = editContext.Model as FarmLocationModel;
        if (farm is null) return;

        if (firstRender && !(farm.Longitude.HasValue || farm.Latitude.HasValue))
            GeoLoc.GetCurrentPosition(this, nameof(OnCoordinatesPermitted), nameof(OnErrorRequestingCoordinates));
    }
    [JSInvokable]
    public void OnCoordinatesPermitted(GeolocationPosition position)
    {
        locationEnabled = true;
        var locChanged = farm.Latitude != position.Coords.Latitude || farm.Longitude != position.Coords.Longitude;
        if (!locChanged) return;
        farm.Latitude = position.Coords.Latitude;
        farm.Longitude = position.Coords.Longitude;

        Task.Run(OnCoordinateChange);
        StateHasChanged();
    }
    private async Task OnCoordinateChange()
    {
        var geoLoc = await api.GetClosestAddress(farm.Latitude.Value, farm.Longitude.Value);
        var address = geoLoc?.ResourceSets.FirstOrDefault()?.Resources.FirstOrDefault()?.Address;
        if (address == null) return;

        farm.StreetAddress = address.AddressLine;
        farm.City = address.Locality;
        farm.State = address.AdminDistrict;
        farm.Country = address.CountryRegion;
        farm.Zip = address.PostalCode;
        StateHasChanged();
    }
    private async Task GetGeoLocation()
    {
        var geoLoc = await api.GetClosestGeoLocation(farm);
        var point = geoLoc?.ResourceSets.FirstOrDefault()?.Resources.FirstOrDefault()?.Point;
        if (point == null) return;
        farm.Latitude = point.Coordinates[0];
        farm.Longitude = point.Coordinates[1];
        StateHasChanged();
    }
    [JSInvokable]
    public void OnErrorRequestingCoordinates(GeolocationPositionError error)
    {
        // TODO: consume/handle error.
        locationEnabled = false;
        StateHasChanged();
    }

    private async Task OnFarmSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;

        try
        {
            if (!(farm.Latitude.HasValue || farm.Longitude.HasValue))
                await GetGeoLocation();

            var creating = (farm.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<FarmLocationModel, CreateFarmLocation>("api/CreateFarmLocation", new CreateFarmLocation { Farm = farm }) :
                await api.ProcessCommand<FarmLocationModel, UpdateFarmLocation>("api/UpdateFarmLocation", new UpdateFarmLocation { Farm = farm });

            if (id <= 0)
                throw new Exception("Unable to save farm location");
            if (creating)
            {
                farm.Id = id;
                _dbContext.Farms.Add(farm);
            }
            else
            {
                var updated =await _dbContext.Farms.FindAsync(farm.Id);
                updated = farm.Map(updated) as FarmLocationModel;
            }
            await _dbContext.SaveChangesAsync();
            editContext = new EditContext(farm);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }

        

    }
}

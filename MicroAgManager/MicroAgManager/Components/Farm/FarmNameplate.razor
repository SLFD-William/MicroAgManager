@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.Weather
@using MicroAgManager.Components.Shared
@using MicroAgManager.Services
<section class="FarmNameplate">
    <section class="name">
        <h3 >@Farm.Name</h3>
        <NavCrudButtons Editting="@showFarmModal" ShowEdit="@((ShowEdit || OnEditClick.HasDelegate) && Farm.Id>0)" OnEditClick="@ShowFarmEditor"></NavCrudButtons>
    </section>
    @if (ShowAll || ShowAddress)
    {
        <section class="address">
            @if (ShowAll)
            {
                <h4 class="fullWidth">Address</h4>
            }
            @if (ShowAll || ShowStreet)
            {
                <span>@Farm.StreetAddress</span>
            }


            @if (ShowAll || ShowCity)
            {
                    <span>@Farm.City</span>
            }
            @if (ShowAll || ShowState)
            {
                    <span>@Farm.State</span>
            }

            @if (ShowAll || ShowZip)
            {
                    <span>@Farm.Zip</span>
            }

            @if (ShowAll || (ShowCountry && !string.IsNullOrEmpty(Farm.Country)))
            {
                    <span>@Farm.Country</span>
            }
            @if (ShowAll || (ShowCountry && !string.IsNullOrEmpty(Farm.CountryCode)))
            {
                    <span>@Farm.CountryCode</span>
            }
        </section>
    }

    @if (ShowAll || ShowLocation || ShowWeather)
    {
        <section class="location">
            @if (ShowAll)
            {
                <h4 class="fullWidth">
                    @if (ShowAll || ShowWeather)
                    {
                        <span>Weather</span>
                    }
                    @if (ShowAll)
                    {
                        <span> and </span>
                    }
                    @if (ShowAll || ShowLocation)
                    {
                        <span>Location</span>
                    }
                </h4>
            }
            @if (ShowAll || ShowWeather)
            {
                <WeatherPlate  Latitude="@Farm.Latitude" Longitude="@Farm.Longitude"></WeatherPlate>
            }
            @if (ShowAll || ShowLocation)
            {
            <span>Lat: @Farm.Latitude</span>
            <span>Lon: @Farm.Longitude</span>
            }
        </section>
    }
    
    @if (ShowAll || ShowPlotUse)
    {
        <section class="plots fullWidth">
            @if (ShowAll)
            {
                <h4 class="fullWidth">Plot Summary</h4>
            }
            <section>
                <label class="plotGeneralUse">@LandPlotUseConstants.GeneralUse</label>
                <span>@Farm.Plots.Where(p => p.Usage == nameof(LandPlotUseConstants.GeneralUse)).Count()</span>
            </section>
            <section>
                <label class="plotCrop">@LandPlotUseConstants.Crop </label>
                <span> @Farm.Plots.Where(p => p.Usage == nameof(LandPlotUseConstants.Crop)).Count()</span>
            </section>
            <section>
                <label class="plotGarden">@LandPlotUseConstants.Garden</label>
                <span>@Farm.Plots.Where(p => p.Usage == nameof(LandPlotUseConstants.Garden)).Count()</span>
            </section>
            <section>
                <label class="plotLivestock">@LandPlotUseConstants.Livestock </label>
                <span>@Farm.Plots.Where(p => p.Usage == nameof(LandPlotUseConstants.Livestock)).Count()</span>
            </section>
            <section>
                <label class="plotNutrientRecycling">@LandPlotUseConstants.NutrientRecycling  </label>
                <span>@Farm.Plots.Where(p => p.Usage == nameof(LandPlotUseConstants.NutrientRecycling)).Count()</span>
            </section>
            <section>
                <label class="plotOutbuilding">@LandPlotUseConstants.Outbuilding</label>
                <span>@Farm.Plots.Where(p => p.Usage == nameof(LandPlotUseConstants.Outbuilding)).Count()</span>
            </section>
            <section>
                <label class="plotPasture">@LandPlotUseConstants.Pasture </label>
                <span>@Farm.Plots.Where(p => p.Usage == nameof(LandPlotUseConstants.Pasture)).Count()</span>
            </section>
        </section>
    }
    <FarmEditor Modal=true Show=@showFarmModal editContext=farmEditContext OnCancel=FarmCanceled OnSubmit=FarmSubmitted></FarmEditor>

</section>
@code {
    [CascadingParameter] FarmLocationModel Farm { get; set; }
    [Parameter] public bool ShowAll { get; set; } = false;

    [Parameter] public bool ShowAddress { get; set; } = false ;
    [Parameter] public bool ShowPlotUse { get; set; } = false;
    [Parameter] public bool ShowLocation { get; set; } = false;
    [Parameter] public bool ShowWeather { get; set; } = false;

    [Parameter] public bool ShowStreet { get; set; } = true;
    [Parameter] public bool ShowCity { get; set; } = true;
    [Parameter] public bool ShowState { get; set; } = true;
    [Parameter] public bool ShowZip { get; set; } = true;
    [Parameter] public bool ShowCountry { get; set; } = true;

    [Parameter] public bool ShowEdit { get; set; } = false;
    [Parameter] public EventCallback OnEditClick { get; set; }
    [Parameter] public EventCallback OnNavigateClick { get; set; }
    [Parameter] public EventCallback OnSaveClick { get; set; }
    [Parameter] public EventCallback OnDeleteClick { get; set; }
    [Parameter] public EventCallback OnCreateClick { get; set; }
    [Parameter] public EventCallback OnCancelClick { get; set; }
    private bool showFarmModal = false;
    private EditContext farmEditContext;
    protected override void OnInitialized()
    {
        farmEditContext = new EditContext(Farm);
    }
    private void ShowFarmEditor()
    {
        var farm = ApplicationState._dbContext.Farms.Find(Farm.Id) ?? new FarmLocationModel();

        farmEditContext = new EditContext(farm);
        showFarmModal = true;
        StateHasChanged();
        OnEditClick.InvokeAsync();
    }
    private void FarmSubmitted(EditContext e)
    {
        var model = e.Model as FarmLocationModel;
        showFarmModal = false;
        if (model == null) return;
        StateHasChanged();
    }
    private void FarmCanceled(object e)
    {
        showFarmModal = false;
        StateHasChanged();
    }

}

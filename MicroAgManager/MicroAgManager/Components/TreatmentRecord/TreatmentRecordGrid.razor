@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Data
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore

<QuickGrid Theme="microagmanager" @ref=treatmentRecordGrid TGridItem=TreatmentRecordModel Virtualize=true Items="Items">
  <TemplateColumn Title="Treatment" Sortable="true" Context="treatmentRecord" SortBy="@OrderByTreatmentName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="treatmentNameFilter" @bind:event="oninput" placeholder="Treatment..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            @treatmentRecord.Treatment.Name
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.Treatment.BrandName)" Title="Brand Name" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="brandNameFilter" @bind:event="oninput" placeholder="Brand Name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Treatment.Reason)" Title="Reason" Sortable="true">
        @* <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="reasonFilter" @bind:event="oninput" placeholder="Reason..." />
            </div>
        </ColumnOptions> *@
    </PropertyColumn>
    @if (ShowRecipientType)
    {
        <PropertyColumn Property="@(p => p.RecipientType)" Title="Recipient Type" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientTypeFilter" @bind:event="oninput" placeholder="Recipient Type..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="Recipient Type Instance" Sortable="true" Context="treatment">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientTypeInstanceFilter" @bind:event="oninput" placeholder="Recipient Type Instance..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                @RecipientLogic.RecipientTypeName(appState.DbContext, treatment.RecipientType, treatment.RecipientTypeId)
            </ChildContent>
        </TemplateColumn>
    }
    @if (ShowRecipient)
    {
        <TemplateColumn Title="Recipient" Sortable="true" Context="treatment" >
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                @RecipientLogic.RecipientName(appState.DbContext, treatment.RecipientType, treatment.RecipientId)
            </ChildContent>
        </TemplateColumn>
    }
    <PropertyColumn Property="@(p => p.Treatment.LabelMethod)" Title="Label Method" Sortable="true">
        @* <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="labelMethodFilter" @bind:event="oninput" placeholder="Label Method..." />
            </div>
        </ColumnOptions> *@
    </PropertyColumn>
    <TemplateColumn Title="Dosage" Context="treatment">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
        </div>
        </ColumnOptions>*@
        <ChildContent>
            @($"{treatment.Treatment.DosageAmount} {UnitLogic.UnitName(appState.DbContext, treatment.Treatment.DosageUnitId)}")
         </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Mass" Context="treatment">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
        </div>
        </ColumnOptions>*@
        <ChildContent>
            @($"{treatment.Treatment.RecipientMass} {UnitLogic.UnitName(appState.DbContext, treatment.Treatment.RecipientMassUnitId)}")
            @UnitLogic.UnitName(appState.DbContext, treatment.Treatment.RecipientMassUnitId)
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.Treatment.MeatWithdrawal)" Title="Meat Withdrawal" Sortable="true">
        @* <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="meatWithdrawalFilter" @bind:event="oninput" placeholder="Meat Withdrawal..." />
            </div>
        </ColumnOptions> *@
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Treatment.MilkWithdrawal)" Title="Milk Withdrawal" Sortable="true">
        @* <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="milkWithdrawalFilter" @bind:event="oninput" placeholder="Milk Withdrawal..." />
            </div>
        </ColumnOptions> *@
    </PropertyColumn>
    <TemplateColumn Title="Per" Context="treatment">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
        </div>
        </ColumnOptions>*@
        <ChildContent>
            @($"{treatment.Treatment.PerScalar} per {UnitLogic.UnitName(appState.DbContext, treatment.Treatment.PerUnitId)}")
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Every" Context="treatment">
        @* <ColumnOptions>
           <div class="search-box">
            <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
            </div>
        </ColumnOptions>*@

        <ChildContent>
            @($"every {treatment.Treatment.EveryScalar} {UnitLogic.UnitName(appState.DbContext, treatment.Treatment.EveryUnitId)}")
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Duration" Context="treatment">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
        </div>
        </ColumnOptions>*@
        <ChildContent>
            @($"for {treatment.Treatment.DurationScalar} {UnitLogic.UnitName(appState.DbContext, treatment.Treatment.DurationUnitId)}")
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.AppliedMethod)" Title="Applied Method" Sortable="true">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="labelMethodFilter" @bind:event="oninput" placeholder="Label Method..." />
        </div>
        </ColumnOptions> *@
    </PropertyColumn>
    <TemplateColumn Title="Applied Dosage" Context="treatment">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
        </div>
        </ColumnOptions>*@
        <ChildContent>
            @($"{treatment.DosageAmount} {UnitLogic.UnitName(appState.DbContext, treatment.DosageUnitId)}")
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.DatePerformed)" Title="Performed On" Sortable="true">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="durationUnitFilter" @bind:event="oninput" placeholder="Duration Unit..." />
        </div>
        </ColumnOptions> *@
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Notes)" Title="Notes" Sortable="true">
        @* <ColumnOptions>
        <div class="search-box">
        <input type="search" autofocus @bind="durationUnitFilter" @bind:event="oninput" placeholder="Duration Unit..." />
        </div>
        </ColumnOptions> *@
    </PropertyColumn>
</QuickGrid>

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter] required public IQueryable<TreatmentRecordModel> Items { get; set; }
    QuickGrid<TreatmentRecordModel> treatmentRecordGrid;

    private GridSort<TreatmentRecordModel> OrderByTreatmentName = GridSort<TreatmentRecordModel>.ByAscending(p => p.Treatment.Name);
    [Parameter] public Action<string> treatmentNameFilterChanged { get; set; }
    private string _treatmentNameFilter;
    string treatmentNameFilter
    {
        get => _treatmentNameFilter; set
        {
            treatmentNameFilterChanged.Invoke(value);
            _treatmentNameFilter = value;
        }
    }

    [Parameter] public Action<string> brandNameFilterChanged { get; set; }
    private string _brandNameFilter;
    string brandNameFilter
    {
        get => _brandNameFilter; set
        {
            brandNameFilterChanged.Invoke(value);
            _brandNameFilter = value;
        }
    }
    [Parameter] public bool ShowRecipientType { get; set; } = true;
    [Parameter] public Action<string> recipientTypeFilterChanged { get; set; }
    private string _recipientTypeFilter;
    string recipientTypeFilter
    {
        get => _recipientTypeFilter; set
        {
            recipientTypeFilterChanged.Invoke(value);
            _recipientTypeFilter = value;
        }
    }
    [Parameter] public Action<string> recipientTypeInstanceFilterChanged { get; set; }
    private string _recipientTypeInstanceFilter;
    string recipientTypeInstanceFilter
    {
        get => _recipientTypeInstanceFilter; set
        {
            recipientTypeInstanceFilterChanged.Invoke(value);
            _recipientTypeInstanceFilter = value;
        }
    }
    [Parameter] public bool ShowRecipient { get; set; } = true;
    [Parameter] public Action<string> recipientFilterChanged { get; set; }
    private string _recipientFilter;
    string recipientFilter
    {
        get => _recipientFilter; set
        {
            recipientFilterChanged.Invoke(value);
            _recipientFilter = value;
        }
    }

}

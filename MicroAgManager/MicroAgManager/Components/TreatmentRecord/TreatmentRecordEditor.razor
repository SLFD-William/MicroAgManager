@using BackEnd.BusinessLogic.TreatmentRecord
@using Domain.Constants
@using Domain.Interfaces
@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Components.Unit
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits HasRecipientsEditor
@if (treatmentRecord is not null)
{
    <ValidatedForm editContext="editContext"
                   OnSubmit="OnTreatmentRecordSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="@ShowUpdateCancel"
                   Modal=Modal
                   Show=Show>

        <ValidatedField ValidationMessageFor="@(() => treatmentRecord.TreatmentId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Treatment</span>
                        <button type="button" @onclick=ShowTreatmentEditor>+</button>
                        <TreatmentEditor Modal=true Show=@showTreatmentModal editContext=treatmentEditContext OnCancel=TreatmentCanceled OnSubmit=TreatmentSubmitted></TreatmentEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                <InputSelect @bind-Value="@treatmentRecord.TreatmentId">
                        <option value="">Select Treatment ...</option>
                        @foreach (var unit in appState.DbContext.Treatments)
                        {
                            <option value="@unit.Id">
                                @unit.Name
                            </option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        @if (ShowRecipient)
        {
            <ValidatedField Legend="Recipient Type" ValidationMessageFor="@(() => treatmentRecord.RecipientType)">
                <InputSelect @bind-Value="@treatmentRecord.RecipientType">
                    <option value="0">Select Recipient Type ...</option>
                    <option value="@RecipientTypeConstants.LivestockAnimal">@RecipientTypeConstants.LivestockAnimal</option>
                    <option value="@RecipientTypeConstants.LivestockBreed">@RecipientTypeConstants.LivestockBreed</option>
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient Item" ValidationMessageFor="@(() => treatmentRecord.RecipientTypeId)">
                <InputSelect @bind-Value="@treatmentRecord.RecipientTypeId">
                    <option value="0">Select Recipient Type Instance ...</option>
                    @foreach (var recipient in RecipientLogic.RecipientTypeIds(appState.DbContext, treatmentRecord.RecipientType))
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient" ValidationMessageFor="@(() => treatmentRecord.RecipientId)">
                <InputSelect @bind-Value="@treatmentRecord.RecipientId">
                    <option value="0">Select Recipient Instance ...</option>
                    @foreach (var recipient in RecipientLogic.RecipientIds(appState.DbContext, treatmentRecord.RecipientType))
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
        }
       <ValidatedField Legend="Label Method" ValidationMessageFor="@(() => treatmentRecord.AppliedMethod)">
            <InputSelect @bind-Value="@treatmentRecord.AppliedMethod">
                <option value="">Select Method ...</option>
                @foreach (var method in TreatmentConstants.MethodsByInvasiveness)
                {
                    <option value="@method">@method</option>
                }
            </InputSelect>
        </ValidatedField>
         @if (!string.IsNullOrEmpty(treatmentRecord.AppliedMethod) && !TreatmentConstants.NonWithdrawalTreatments.Contains(treatmentRecord.AppliedMethod))
        {
            <ValidatedField Legend="Dose" ValidationMessageFor="@(() => treatmentRecord.DosageAmount)">
                <InputNumber @bind-Value="@treatmentRecord.DosageAmount"></InputNumber>
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => treatmentRecord.DosageUnitId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Dose Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=UnitSubmitted></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                <InputSelect @bind-Value="@treatmentRecord.DosageUnitId">
                    <option value="0">Select Dose Unit ...</option>
                    @foreach (var unit in UnitLogic.UnitSelections(appState.DbContext,UnitCategoryConstants.DosageUnits))
                    {
                        <option value="@unit.Id">@($"{unit.Category} {unit.Symbol}")</option>
                    }
                </InputSelect>
                </ChildContent>
            </ValidatedField>
        }
        <ValidatedField Legend="Notes" ValidationMessageFor="@(() => treatmentRecord.Notes)">
            <InputTextArea placeholder="Notes" @bind-Value="@treatmentRecord.Notes" />
        </ValidatedField>
        <ValidatedField Legend="Treatment Date" ValidationMessageFor="@(() => treatmentRecord.DatePerformed)">
            <InputDate @bind-Value="@treatmentRecord.DatePerformed" />
        </ValidatedField>
    </ValidatedForm>
}

@code {
     [Inject] protected IAPIService api { get; set; }
    private TreatmentRecordModel? treatmentRecord;
    private TreatmentRecordModel original;
    protected override void OnInitialized()
    {
        treatmentRecord = editContext.Model as TreatmentRecordModel;
        if (treatmentRecord is null) return;
        base.OnInitialized();
        treatmentRecord.AppliedMethod = treatmentRecord.Treatment.LabelMethod;
        treatmentRecord.DosageAmount = treatmentRecord.Treatment.DosageAmount;
        treatmentRecord.DosageUnitId = treatmentRecord.Treatment.DosageUnitId;

        original = treatmentRecord.Clone() as TreatmentRecordModel;
        if (treatmentRecord.DatePerformed == DateTime.MinValue)
            treatmentRecord.DatePerformed = DateTime.Now;
        // Initialize other properties of treatmentRecord if needed
    }
    public async override Task<IHasRecipient> SubmitEditContext()
    {
        await OnTreatmentRecordSubmit(editContext);
        return treatmentRecord;
    }

    private async Task OnTreatmentRecordSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;

        try
        {
            if (original.DatePerformed != treatmentRecord.DatePerformed)
                treatmentRecord.DatePerformed = treatmentRecord.DatePerformed.Date + DateTime.Now.TimeOfDay;
            var creating = (treatmentRecord.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<TreatmentRecordModel, CreateTreatmentRecord>("api/CreateTreatmentRecord", new CreateTreatmentRecord { TreatmentRecord = treatmentRecord }) :
                await api.ProcessCommand<TreatmentRecordModel, UpdateTreatmentRecord>("api/UpdateTreatmentRecord", new UpdateTreatmentRecord { TreatmentRecord = treatmentRecord });

            if (id <= 0)
                throw new Exception("Unable to save treatment");
            treatmentRecord.Id = id;
            //     if (creating)
            // {
            //     treatmentRecord.Id = id;
            //     appState.DbContext.TreatmentRecords.Add(treatmentRecord);
            // }
            // else
            // {
            //     var updated = await appState.DbContext.TreatmentRecords.FindAsync(treatmentRecord.Id);
            //     updated = treatmentRecord.Map(updated) as TreatmentRecordModel;
            // }
            // await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(treatmentRecord);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }
#region Treatment
    private bool showTreatmentModal = false;
    private EditContext treatmentEditContext = new EditContext(new TreatmentModel());
    private void ShowTreatmentEditor()
    {
        showTreatmentModal = true;
        StateHasChanged();
    }
    private void TreatmentSubmitted(EditContext e)
    {
        var model = e.Model as TreatmentModel;
        showTreatmentModal = false;
        if (model == null) return;
        treatmentRecord.TreatmentId = model.Id;
        editContext = new EditContext(treatmentRecord);
        StateHasChanged();
    }
    private void TreatmentCanceled(object e)
    {
        showTreatmentModal = false;
        StateHasChanged();
    }
#endregion
#region Unit
    private bool showUnitModal = false;
    private EditContext unitEditContext = new EditContext(new UnitModel());
    private void ShowUnitEditor()
    {
        showUnitModal = true;
        StateHasChanged();
    }
    private void UnitSubmitted(EditContext e)
    {
        var model = e.Model as UnitModel;
        showUnitModal = false;
        if (model == null) return;
        treatmentRecord.DosageUnitId = model.Id;
        editContext = new EditContext(treatmentRecord);
        StateHasChanged();
    }
    private void UnitCanceled(object e)
    {
        showUnitModal = false;
        StateHasChanged();
    }
    #endregion
}

@* @using Domain.Constants;
@using Domain.Models;
@using FrontEnd.Components.Unit;
@inherits DataComponent<TreatmentModel>
@if (editContext is not null)
{
    <ValidatedForm editContext="editContext"
        FreshenData="FreshenData"
        OnValidSubmit="OnSubmit"
        Cancel="Cancel"
        showUpdateCancelButtons="true"
        createOnly="@(((TreatmentModel)working).Id<1)"
        Modal="Modal"
        Show="Show"
        @ref=_validatedForm>
        <ChildContent>
            <ValidatedField Legend="Treatment" ValidationMessageFor="@(() => ((TreatmentModel)working).Name)">
                <InputText placeholder="Treatment" @bind-Value="@(((TreatmentModel)working).Name)" />
            </ValidatedField>
            <ValidatedField Legend="Brand Name" ValidationMessageFor="@(() => ((TreatmentModel)working).BrandName)">
                <InputText placeholder="Brand Name" @bind-Value="@(((TreatmentModel)working).BrandName)" />
            </ValidatedField>
            <ValidatedField Legend="Reason" ValidationMessageFor="@(() => ((TreatmentModel)working).Reason)">
                <InputTextArea placeholder="Reason" @bind-Value="@(((TreatmentModel)working).Reason)" />
            </ValidatedField>
            <ValidatedField Legend="Label Method" ValidationMessageFor="@(() => ((TreatmentModel)working).LabelMethod)">
                <InputSelect @bind-Value="@(((TreatmentModel)working).LabelMethod)">
                    <option value="">Select Method ...</option>
                    <option value="@TreatmentConstants.Grooming">@TreatmentConstants.Grooming</option>
                    <option value="@TreatmentConstants.Intramuscular">@TreatmentConstants.Intramuscular</option>
                    <option value="@TreatmentConstants.Intravenous">@TreatmentConstants.Intravenous</option>
                    <option value="@TreatmentConstants.Oral">@TreatmentConstants.Oral</option>
                    <option value="@TreatmentConstants.Subcutaneous">@TreatmentConstants.Subcutaneous</option>
                    <option value="@TreatmentConstants.Surgical">@TreatmentConstants.Surgical</option>
                    <option value="@TreatmentConstants.Topical">@TreatmentConstants.Topical</option>
                </InputSelect>
            </ValidatedField>
            @if (!string.IsNullOrEmpty(((TreatmentModel)working).LabelMethod) && !TreatmentConstants.NonWithdrawalTreatments.Contains(((TreatmentModel)working).LabelMethod))
            {
               <ValidatedField Legend="Dosage Amount" ValidationMessageFor="@(() => ((TreatmentModel)working).DosageAmount)">
                    <InputNumber placeholder="Dosage Amount" @bind-Value="@(((TreatmentModel)working).DosageAmount)" />
                </ValidatedField>
                <ValidatedField ValidationMessageFor="@(() => ((TreatmentModel)working).DosageUnitId)">
                    <LegendContent>
                        <div style="display:inline-flex;gap:1rem;">
                            <span>Dosage Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                            <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="DosageUnitCreated" Cancelled="DosageUnitCanceled"></UnitEditor>
                        </div>
                    </LegendContent>
                    <ChildContent>
                        <InputSelect @bind-Value="@(((TreatmentModel)working).DosageUnitId)">
                            <option value="">Select Dosage Unit ...</option>
                            @foreach (var unit in app.dbContext.Units.Where(u=> UnitCategoryConstants.DosageUnits.Keys.Contains(u.Category)).OrderBy(u=>u.Category).ThenBy(u=>u.Name))
                            {
                                <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                            }
                        </InputSelect>
                    </ChildContent>
                </ValidatedField>
                <ValidatedField Legend="Recipient Mass" ValidationMessageFor="@(() => ((TreatmentModel)working).RecipientMass)">
                    <InputNumber @bind-Value="@(((TreatmentModel)working).RecipientMass)" />
                </ValidatedField>
                <ValidatedField ValidationMessageFor="@(() => ((TreatmentModel)working).RecipientMassUnitId)">
                    <LegendContent>
                        <div style="display:inline-flex;gap:1rem;">
                            <span>Mass Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                            <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="MassUnitCreated" Cancelled="MassUnitCanceled"></UnitEditor>
                        </div>
                    </LegendContent>
                    <ChildContent>
                        <InputSelect @bind-Value="@(((TreatmentModel)working).RecipientMassUnitId)">
                            <option value="">Select Mass Unit ...</option>
                            @foreach (var unit in app.dbContext.Units.Where(u => u.Category == UnitCategoryConstants.Mass.Key).OrderBy(u => u.Name))
                            {
                                <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                            }
                        </InputSelect>
                    </ChildContent>
                </ValidatedField>
                <ValidatedField Legend="Meat Withdrawal (Days)" ValidationMessageFor="@(() => ((TreatmentModel)working).MeatWithdrawal)">
                    <InputNumber @bind-Value="@(((TreatmentModel)working).MeatWithdrawal)" />
                </ValidatedField>
                <ValidatedField Legend="Milk Withdrawal (Days)" ValidationMessageFor="@(() => ((TreatmentModel)working).MilkWithdrawal)">
                    <InputNumber @bind-Value="@(((TreatmentModel)working).MilkWithdrawal)" />
                </ValidatedField>
            }
            <ValidatedField Legend="Frequency" ValidationMessageFor="@(() => ((TreatmentModel)working).Frequency)">
                <InputNumber @bind-Value="@(((TreatmentModel)working).Frequency)" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => ((TreatmentModel)working).FrequencyUnitId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Frequency Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="FrequencyUnitCreated" Cancelled="FrequencyUnitCanceled"></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@(((TreatmentModel)working).FrequencyUnitId)">
                        <option value="">Select Frequency Unit ...</option>
                        @foreach (var unit in app.dbContext.Units.Where(u => u.Category == UnitCategoryConstants.Time.Key).OrderBy(u => u.Name))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
            <ValidatedField Legend="Duration" ValidationMessageFor="@(() => ((TreatmentModel)working).Duration)">
                <InputNumber @bind-Value="@(((TreatmentModel)working).Duration)" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => ((TreatmentModel)working).DurationUnitId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Duration Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Show=@showUnitModal showUpdateCancelButtons="true" @ref=_unitEditor Modal="true" Submitted="DurationUnitCreated" Cancelled="DurationUnitCanceled"></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@(((TreatmentModel)working).DurationUnitId)">
                        <option value="">Select Duration Unit ...</option>
                        @foreach (var unit in app.dbContext.Units.Where(u => u.Category == UnitCategoryConstants.Time.Key).OrderBy(u => u.Name))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        </ChildContent>
    </ValidatedForm>
} *@
@using BackEnd.BusinessLogic.Treatment
@using Domain.Constants
@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Components.Unit
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits BaseEditor
@if (treatment is not null)
{
    <ValidatedForm editContext="editContext"
                   OnSubmit="OnTreatmentSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="true"
                   @ref=_validatedForm
                   Modal=Modal
                   Show=Show
                   Title="@(treatment.Id< 1 ? "Create Treatment" : $"Edit {treatment.Name}")">
        <ValidatedField Legend="Treatment" ValidationMessageFor="@(() => treatment.Name)">
            <InputText placeholder="Treatment" @bind-Value="@treatment.Name" />
        </ValidatedField>
        <ValidatedField Legend="Brand Name" ValidationMessageFor="@(() => treatment.BrandName)">
            <InputText placeholder="Brand Name" @bind-Value="@(treatment.BrandName)" />
        </ValidatedField>
        <ValidatedField Legend="Reason" ValidationMessageFor="@(() => treatment.Reason)">
            <InputTextArea placeholder="Reason" @bind-Value="@(treatment.Reason)" />
        </ValidatedField>
        <ValidatedField Legend="Label Method" ValidationMessageFor="@(() => treatment.LabelMethod)">
            <InputSelect @bind-Value="@(treatment.LabelMethod)">
                <option value="">Select Method ...</option>
                @foreach (var method in TreatmentConstants.MethodsByInvasiveness)
                {
                    <option value="@method">@method</option>
                }
            </InputSelect>
        </ValidatedField>
        @if (!string.IsNullOrEmpty(treatment.LabelMethod) && !TreatmentConstants.NonWithdrawalTreatments.Contains(treatment.LabelMethod))
        {
            <ValidatedField Legend="Dosage Amount" ValidationMessageFor="@(() => treatment.DosageAmount)">
                <InputNumber placeholder="Dosage Amount" @bind-Value="@(treatment.DosageAmount)" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => treatment.DosageUnitId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Dose Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=@((e)=>UnitSubmitted(e,nameof(treatment.DosageUnitId)))></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@treatment.DosageUnitId">
                        <option value="0">Select Dose Unit ...</option>
                    @foreach (var unit in UnitLogic.UnitSelections(appState.DbContext, UnitCategoryConstants.DosageUnits))
                        {
                            <option value="@unit.Id">@($"{unit.Category} {unit.Symbol}")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
            <ValidatedField Legend="Recipient Mass" ValidationMessageFor="@(() => treatment.RecipientMass)">
                <InputNumber @bind-Value="@(treatment.RecipientMass)" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => treatment.RecipientMassUnitId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Mass Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=@((e)=>UnitSubmitted(e,nameof(treatment.RecipientMassUnitId)))></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@(treatment.RecipientMassUnitId)">
                        <option value="">Select Mass Unit ...</option>
                        @foreach (var unit in UnitLogic.UnitSelections(appState.DbContext, new Dictionary<string, string>() { { UnitCategoryConstants.Mass.Key, UnitCategoryConstants.Mass.Value } }))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
            <ValidatedField Legend="Meat Withdrawal (Days)" ValidationMessageFor="@(() => treatment.MeatWithdrawal)">
                <InputNumber @bind-Value="@(treatment.MeatWithdrawal)" />
            </ValidatedField>
            <ValidatedField Legend="Milk Withdrawal (Days)" ValidationMessageFor="@(() => treatment.MilkWithdrawal)">
                <InputNumber @bind-Value="@(treatment.MilkWithdrawal)" />
            </ValidatedField>
        
        <ValidatedField Legend="Per" ValidationMessageFor="@(() => treatment.PerScalar)">
            <InputNumber @bind-Value="@(treatment.PerScalar)" />
        </ValidatedField>
        <ValidatedField ValidationMessageFor="@(() => treatment.PerUnitId)">
            <LegendContent>
                <div style="display:inline-flex">
                    <span>Per Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=@((e) => UnitSubmitted(e, nameof(treatment.PerUnitId)))></UnitEditor>
                </div>
            </LegendContent>
            <ChildContent>
                    <InputSelect @bind-Value="@(treatment.PerUnitId)">
                    <option value="">Select Per Unit ...</option>
                    @foreach (var unit in UnitLogic.UnitSelections(appState.DbContext, new Dictionary<string, string>() { { UnitCategoryConstants.Time.Key, UnitCategoryConstants.Time.Value } }))
                    {
                        <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                    }
                </InputSelect>
            </ChildContent>
        </ValidatedField>
            <ValidatedField Legend="Every" ValidationMessageFor="@(() => treatment.EveryScalar)">
                <InputNumber @bind-Value="@(treatment.EveryScalar)" />
            </ValidatedField>
            <ValidatedField ValidationMessageFor="@(() => treatment.EveryUnitId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Every Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                        <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=@((e) => UnitSubmitted(e, nameof(treatment.EveryUnitId)))></UnitEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@(treatment.EveryUnitId)">
                        <option value="">Select Every Unit ...</option>
                        @foreach (var unit in UnitLogic.UnitSelections(appState.DbContext, new Dictionary<string, string>() { { UnitCategoryConstants.Time.Key, UnitCategoryConstants.Time.Value } }))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        <ValidatedField Legend="Duration" ValidationMessageFor="@(() => treatment.DurationScalar)">
            <InputNumber @bind-Value="@(treatment.DurationScalar)" />
        </ValidatedField>
        <ValidatedField ValidationMessageFor="@(() => treatment.DurationUnitId)">
            <LegendContent>
                <div style="display:inline-flex">
                    <span>Duration Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                    <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=@((e) => UnitSubmitted(e, nameof(treatment.DurationUnitId)))></UnitEditor>
                </div>
            </LegendContent>
            <ChildContent>
                <InputSelect @bind-Value="@(treatment.DurationUnitId)">
                    <option value="">Select Duration Unit ...</option>
                        @foreach (var unit in UnitLogic.UnitSelections(appState.DbContext, new Dictionary<string, string>() { { UnitCategoryConstants.Time.Key, UnitCategoryConstants.Time.Value } }))
                        {
                            <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                        }
                </InputSelect>
            </ChildContent>
        </ValidatedField>
        }
    </ValidatedForm>
}

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Inject] protected IAPIService api { get; set; }
    private ValidatedForm _validatedForm;
    protected override void OnInitialized()
    {
        treatment = editContext.Model as TreatmentModel;
        if (treatment is null) return;
    }

    private TreatmentModel? treatment;

    private async Task OnTreatmentSubmit(EditContext editContext)
    {
        if (TreatmentConstants.NonWithdrawalTreatments.Contains(treatment.LabelMethod))
        {
            var unit = appState.DbContext.Units.Where(u => u.Category == UnitCategoryConstants.Time.Key).First();
            treatment.DurationScalar=1;
            treatment.DurationUnitId = unit.Id;
            treatment.EveryScalar=1;
            treatment.EveryUnitId=unit.Id;
            treatment.PerScalar=1;
            treatment.PerUnitId = unit.Id;
            editContext = new EditContext(treatment);
        }
        
        if (!editContext.Validate()) return;

        try
        {
            var creating = (treatment.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<TreatmentModel, CreateTreatment>("api/CreateTreatment", new CreateTreatment { Treatment = treatment }) :
                await api.ProcessCommand<TreatmentModel, UpdateTreatment>("api/UpdateTreatment", new UpdateTreatment { Treatment = treatment });

            if (id <= 0)
                throw new Exception("Unable to save treatment");
            if (creating)
            {
                treatment.Id = id;
                appState.DbContext.Treatments.Add(treatment);
            }
            else
            {
                var updated = await appState.DbContext.Treatments.FindAsync(treatment.Id);
                updated = treatment.Map(updated) as TreatmentModel;
            }
            await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(treatment);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }
    #region Unit
    private bool showUnitModal = false;
    private EditContext unitEditContext = new EditContext(new UnitModel());
    private void ShowUnitEditor()
    {
        unitEditContext = new EditContext(new UnitModel());
        showUnitModal = true;
        StateHasChanged();
    }
    private void UnitSubmitted(EditContext e, string field)
    {
        var model = e.Model as UnitModel;
        showUnitModal = false;
        if (model == null) return;

        // Use reflection to get the property to update
        var propertyInfo = typeof(TreatmentModel).GetProperty(field);
        if (propertyInfo != null)
        {
            // Set the property value
            propertyInfo.SetValue(treatment, model.Id);
        }

        editContext = new EditContext(treatment);
        StateHasChanged();
    }
    private void UnitCanceled(object e)
    {
        showUnitModal = false;
        StateHasChanged();
    }
    #endregion
}

@using Domain.Models
@using Domain.Constants
@using MicroAgManager.Components.Shared
@using MicroAgManager.Services
<section class="LivestockNameplate">
    <section class="name">
        @if (ShowEmoji)
        {
            <span class="emoji">
                @Livestock.Breed?.EmojiChar
                @if (ShowGeneral)
                {
                    <p>@Livestock.Breed?.Animal?.Name</p>
                }
            </span>
        }
        @if (ShowGender)
        {
            <span class="fa-stack gender">
                
                @if (Livestock.Sterile)
                {
                    <i class="fas fa-ban fa-stack-1x"></i>
                }
            </span>
        }
        <h3>@Livestock.Name</h3>
        <NavCrudButtons Editting="@showLivestockModal"
                        ShowEdit="@((ShowEdit || OnEditClick.HasDelegate) && Livestock.Id>0)"
                        OnEditClick="ShowLivestockEditor"
                        ShowNavigate="@((ShowNavigate || OnEditClick.HasDelegate))" 
                        OnNavigateClick="@OnNavigateClick"
                        NavigateText="@NavigateText"
                        ></NavCrudButtons>
    </section>
    @if (ShowGeneral)
    {
        <p class="variety">@Livestock.Variety</p>
        <p class="breed">@Livestock.Breed?.Name</p>
    }

    @if (ShowStatus)
    {
        <p class="status">@Livestock.Status?.Status</p>
    }
    @if (ShowAge)
    {
        <p class="age">@Age()</p>
    }
    @if (ShowGeneral && !ShowEmoji)
    {
        <p class="animal">@Livestock.Breed?.Animal?.Name</p>
    }

    @if (ShowParents)
            {
            <span class="parents">
                @if (ShowMother)
                {
                    <CascadingValue Value="Livestock.Mother">
                        <LivestockNameplate ShowEmoji=false></LivestockNameplate>
                    </CascadingValue>
                }
                @if(ShowFather)
                {
                    <CascadingValue Value="Livestock.Father">
                        <LivestockNameplate ShowEmoji=false></LivestockNameplate>
                    </CascadingValue>
                }
            </span>
            }
    <LivestockEditor Modal="true" Show="@showLivestockModal" editContext="@livestockEditContext" OnCancel=LivestockCanceled OnSubmit=LivestockSubmitted></LivestockEditor>
</section>
@ChildContent
@code {
    [CascadingParameter] LivestockModel Livestock { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowAll { get; set; } = false;
    [Parameter] public bool ShowGender { get; set; } = true;
    [Parameter] public bool ShowEmoji { get; set; } = true;
    [Parameter] public bool ShowGeneral { get; set; } = false;
    [Parameter] public bool ShowStatus { get; set; } = false;
    [Parameter] public bool ShowAge { get; set; } = false;
    [Parameter] public bool ShowFather { get; set; } = true;
    [Parameter] public bool ShowMother { get; set; } = true;
    [Parameter] public bool ShowParents { get; set; } = false;


    [Parameter] public bool ShowEdit { get; set; } = false;
    [Parameter] public EventCallback<long> OnEditClick { get; set; }

    [Parameter] public string NavigateText { get; set; } = "back";
    [Parameter] public bool ShowNavigate { get; set; } = false;
    [Parameter] public EventCallback OnNavigateClick { get; set; }
    
    [Parameter] public EventCallback<long> OnSaveClick { get; set; }
    [Parameter] public EventCallback<long> OnDeleteClick { get; set; }
    [Parameter] public EventCallback<long> OnCreateClick { get; set; }
    [Parameter] public EventCallback<long> OnCancelClick { get; set; }
    private string Age()
    {
        if (Livestock is null)
            return "";

        var age = DateTime.Now.Subtract(Livestock.Birthdate);
        switch (age.Days)
        {
            case var d when d < 1:
                return $"{age.Hours} hours old";
            case var d when d < 90:
                return $"{age.Days} days old";
            case var d when d < 548:
                return $"{age.Days / 30} months old";
            default:
                return $"{age.Days / 365} years old";
        }
    }
    protected override void OnInitialized()
    {
        livestockEditContext = new EditContext(Livestock);
    }
    private bool showLivestockModal = false;
    private EditContext livestockEditContext;
    private void ShowLivestockEditor()
    {
        var livestock = ApplicationState._dbContext.Livestocks.Find(Livestock.Id) ?? new LivestockModel();
        livestockEditContext = new EditContext(livestock);
        showLivestockModal = true;
        OnEditClick.InvokeAsync();
        StateHasChanged();
    }
    private void LivestockSubmitted(EditContext e)
    {
        var model = e.Model as LivestockModel;
        showLivestockModal = false;
        if (model == null) return;
        StateHasChanged();
    }
    private void LivestockCanceled(object e)
    {
        showLivestockModal = false;
        StateHasChanged();
    }
 

}
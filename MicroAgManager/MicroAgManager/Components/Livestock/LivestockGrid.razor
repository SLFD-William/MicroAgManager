@using Domain.Models
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore


<QuickGrid Theme="microagmanager" @ref=livestockGrid TGridItem=LivestockModel Items="@Items">
    @if (ShowAnimalNameColumn)
    {
        <TemplateColumn Title="Animal" Sortable="true" Context="livestock" SortBy="@OrderByAnimalName">
@*             <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="animalNameFilter" @bind:event="oninput" placeholder="Animal..." />
                </div>
            </ColumnOptions> *@
            <ChildContent>
                <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "LivestockAnimalId", livestock.Breed.Animal.Id.ToString() }}))>@livestock.Breed.Animal.Name</NavLink>
            </ChildContent>
            </TemplateColumn>
    }
    @if (ShowBreedColumns)
    {
        <TemplateColumn Title="Breed" Sortable="true" Context="livestock" SortBy="@OrderByBreedName">
@*             <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="breedNameFilter" @bind:event="oninput" placeholder="Breed..." />
                </div>
            </ColumnOptions> *@
            <ChildContent>
                <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "LivestockAnimalId", livestock.Breed.Animal.Id.ToString() },{ "LivestockBreedId", livestock.Breed.Id.ToString() }}))>@livestock.Breed.Name</NavLink>
            </ChildContent>
        </TemplateColumn>
        <PropertyColumn Property="@(p => p.Breed.EmojiChar)" Title="Emoji" Sortable="true">
@*             <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="breedEmojiFilter" @bind:event="oninput" placeholder="Emoji..." />
                </div>
            </ColumnOptions> *@
        </PropertyColumn>
    }
        <PropertyColumn Property="@(p => p.Variety)" Sortable="true">
@*             <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="varietyFilter" @bind:event="oninput" placeholder="Variety..." />
                </div>
            </ColumnOptions> *@
        </PropertyColumn>
    @if (ShowLocationColumn)
    { 
        <PropertyColumn Property="@(p => p.Location.Name)" Title="Location" Sortable="true">
@*             <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="locationFilter" @bind:event="oninput" placeholder="Location..." />
                </div>
            </ColumnOptions> *@
        </PropertyColumn>   
    }
        <PropertyColumn Property="@(p => p.BatchNumber)" Title="Batch Number" Sortable="true">
@*             <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="batchNumberFilter" @bind:event="oninput" placeholder="Batch Number..." />
                </div>
            </ColumnOptions> *@
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.Gender)" Sortable="true">
@*             <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="@genderFilter" @bind:event="oninput" placeholder="Gender..." />
                </div>
            </ColumnOptions> *@
        </PropertyColumn>
@*     <PropertyColumn Property="@(p => p.Status.Status)" Title="Status" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="@statusFilter" @bind:event="oninput" placeholder="Status..." />
                </div>
            </ColumnOptions>
        </PropertyColumn> *@
    <TemplateColumn Title="Name" SortBy="@OrderByName" Context="livestock">
@*         <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="@nameFilter" @bind:event="oninput" placeholder="Name..." />
            </div>
        </ColumnOptions> *@
        <ChildContent>
            <NavLink href=@(ApplicationState.CorrectedParametersUri(new(){{ "LivestockAnimalId", livestock.Breed.Animal.Id.ToString() },{ "LivestockBreedId", livestock.Breed.Id.ToString() }
                     ,{ "LivestockId", livestock.Id.ToString() }}))>@livestock.Name</NavLink>
        </ChildContent>
    </TemplateColumn>
@*         <PropertyColumn Property="@(p => p.Name)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="@nameFilter" @bind:event="oninput" placeholder="Name..." />
                </div>
            </ColumnOptions>
            
        </PropertyColumn> *@
        <PropertyColumn Property="@(p => p.Birthdate)" Format="yyyy-MM-dd" Sortable="true" />
        <PropertyColumn Property="@(p => p.BeingManaged)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Sterile)" Sortable="true" />
        <PropertyColumn Property="@(p => p.InMilk)" Sortable="true" />
        <PropertyColumn Property="@(p => p.BottleFed)" Sortable="true" />
        <PropertyColumn Property="@(p => p.ForSale)" Sortable="true" />
@*         <PropertyColumn Property="@(p => p.Mother.Name)" Title="Mother" Sortable="false" />
        <PropertyColumn Property="@(p => p.Father.Name)" Title="Father" Sortable="false" /> *@
        <PropertyColumn Property="@(p => p.BornDefective)" Sortable="true" />
        <PropertyColumn Property="@(p => p.BirthDefect)" Title="Defect Description" Sortable="true" />
    </QuickGrid>
        
@code {
    [Parameter] required public IQueryable<LivestockModel> Items { get; set; }
    [Parameter] public EventCallback<long> OnNavigateClick { get; set; }
    [Parameter] public EventCallback<long> OnDeleteClick { get; set; }
    [Parameter] public EventCallback<long> OnCreateClick { get; set; }
    [Parameter] public EventCallback<long> OnEditClick { get; set; }

    QuickGrid<LivestockModel> livestockGrid;
    GridSort<LivestockModel> OrderByName = GridSort<LivestockModel>.ByAscending(p => p.Name);
    GridSort<LivestockModel> OrderByAnimalName = GridSort<LivestockModel>.ByAscending(p => p.Breed.Animal.Name);
    GridSort<LivestockModel> OrderByBreedName = GridSort<LivestockModel>.ByAscending(p => p.Breed.Name);
    [Parameter] public bool ShowAnimalNameColumn { get; set; } = true;
    [Parameter] public bool ShowBreedColumns { get; set; } = true;
    [Parameter] public bool ShowLocationColumn { get; set; } = true;
    #region Filtering

    [Parameter] public Action<string> animalNameFilterChanged { get; set; }
    private string _animalNameFilter;
    string animalNameFilter { get => _animalNameFilter; set
        {
            animalNameFilterChanged.Invoke(value);
            _animalNameFilter = value;
        }  
    }

    [Parameter] public Action<string> breedNameFilterChanged { get; set; }
    private string _breedNameFilter;
    string breedNameFilter
    {
        get => _breedNameFilter; set
        {
            breedNameFilterChanged.Invoke(value);
            _breedNameFilter = value;
        }
    }
    
    [Parameter] public Action<string> breedEmojiFilterChanged { get; set; }
    private string _breedEmojiFilter;
    string breedEmojiFilter
    {
        get => _breedEmojiFilter; set
        {
            breedEmojiFilterChanged.Invoke(value);
            _breedEmojiFilter = value;
        }
    }
    
    [Parameter] public Action<string> varietyFilterChanged { get; set; }
    private string _varietyFilter;
    string varietyFilter
    {
        get => _varietyFilter; set
        {
            varietyFilterChanged.Invoke(value);
            _varietyFilter = value;
        }
    }
    
    [Parameter] public Action<string> batchNumberFilterChanged { get; set; }
    private string _batchNumberFilter;
    string batchNumberFilter
    {
        get => _batchNumberFilter; set
        {
            batchNumberFilterChanged.Invoke(value);
            _batchNumberFilter = value;
        }
    }
    [Parameter] public Action<string> locationFilterChanged { get; set; }
    private string _locationFilter;
    string locationFilter
    {
        get => _locationFilter; set
        {
            locationFilterChanged.Invoke(value);
            _locationFilter = value;
        }
    }
    [Parameter] public Action<string> genderFilterChanged { get; set; }
    private string _genderFilter;
    string genderFilter
    {
        get => _genderFilter; set
        {
            genderFilterChanged.Invoke(value);
            _genderFilter = value;
        }
    }
    
    [Parameter] public Action<string> statusFilterChanged { get; set; }
    private string _statusFilter;
    string statusFilter
    {
        get => _statusFilter; set
        {
            statusFilterChanged.Invoke(value);
            _statusFilter = value;
        }
    }
    
    [Parameter] public Action<string> nameFilterChanged { get; set; }
    private string _nameFilter;
    string nameFilter
    {
        get => _nameFilter; set
        {
            nameFilterChanged.Invoke(value);
            _nameFilter = value;
        }
    }
    #endregion
    
}
@using BackEnd.BusinessLogic.Livestock.Status
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits BaseEditor

@if (status is not null)
{
    <ValidatedForm editContext="editContext"
                   OnSubmit="OnStatusSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="true"
                   @ref=_validatedForm
                   Modal=Modal
                   Show=Show>
        <ChildContent>
            <ValidatedField ValidationMessageFor="@(() => status.LivestockAnimalId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Animal</span><button type="button" @onclick=ShowAnimalEditor>+</button>
                        @if (_addingAnimal)
                        { 
                            <LivestockAnimalEditor Modal="true" Show="@_addingAnimal" editContext="@_addAnimalContext" OnSubmit="AnimalAddSubmitted" OnCancel="AnimalAddCancelled"></LivestockAnimalEditor>
                        }
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@LivestockAnimalId">
                        <option value="0">Select Animal ...</option>
                        @foreach (var state in appState.DbContext.LivestockAnimals.OrderBy(a => a.Name))
                        {
                            <option value="@state.Id">@state.Name</option>
                        }
                    </InputSelect>
                </ChildContent>

            </ValidatedField>
            <ValidatedField Legend="Status" ValidationMessageFor="@(() => status.Status)">
                <InputText placeholder="Status" @bind-Value="@(status.Status)" />
            </ValidatedField>
            <ValidatedField Legend="Default Status" ValidationMessageFor="@(() => status.DefaultStatus)">
                <InputCheckbox @bind-Value="@(status.DefaultStatus)" />
            </ValidatedField>
            <ValidatedField Legend="Being Managed" ValidationMessageFor="@(() => status.BeingManaged)">
                <InputSelect @bind-Value="@(status.BeingManaged)">
                    @foreach (var state in StatusModes)
                    {
                        <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Sterile" ValidationMessageFor="@(() => status.Sterile)">
                <InputSelect @bind-Value="@(status.Sterile)">
                    @foreach (var state in StatusModes)
                    {
                        <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="In Milk" ValidationMessageFor="@(() => status.InMilk)">
                <InputSelect @bind-Value="@(status.InMilk)">
                    @foreach (var state in StatusModes)
                    {
                        <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Bottle Fed" ValidationMessageFor="@(() => status.BottleFed)">
                <InputSelect @bind-Value="@(status.BottleFed)">
                    @foreach (var state in StatusModes)
                    {
                        <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="For Sale" ValidationMessageFor="@(() => status.ForSale)">
                <InputSelect @bind-Value="@(status.ForSale)">
                    @foreach (var state in StatusModes)
                    {
                        <option value="@state">@(string.IsNullOrEmpty(state) ? "Select Status state ..." : state)</option>
                    }
                </InputSelect>
            </ValidatedField>

        </ChildContent>
    </ValidatedForm>
}

@code {
    [Inject] protected IAPIService api { get; set; }
    private ValidatedForm _validatedForm;
    private LivestockStatusModel? status;
    private long _LivestockAnimalId = 0;
    private long LivestockAnimalId { get => _LivestockAnimalId; set => _LivestockAnimalId = value; }

    protected override void OnInitialized()
    {
        status = editContext.Model as LivestockStatusModel;
        if (status is null) return;
        base.OnInitialized();
        LivestockAnimalId = status.LivestockAnimalId;

    }
    private async Task OnStatusSubmit(EditContext editContext)
    {
        if (status.LivestockAnimalId < 1)
            ((LivestockStatusModel)editContext.Model).LivestockAnimalId = _LivestockAnimalId;
        
        if (!editContext.Validate()) return;

        try
        {
            var creating = (status.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<LivestockStatusModel, CreateLivestockStatus>("api/CreateLivestockStatus", new CreateLivestockStatus { LivestockStatus = status }) :
                await api.ProcessCommand<LivestockStatusModel, UpdateLivestockStatus>("api/UpdateLivestockStatus", new UpdateLivestockStatus { LivestockStatus = status });

            if (id <= 0)
                throw new Exception("Unable to save status");
            status.Id = id;
            //     if (creating)
            // {
            //     status.Id = id;
            //     appState.DbContext.LivestockStatuses.Add(status);
            // }
            // else
            // {
            //     var updated = await appState.DbContext.LivestockStatuses.FindAsync(status.Id);
            //     updated = status.Map(updated) as LivestockStatusModel;
            // }
            // await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(status);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }
    }
    private readonly static List<string> StatusModes = new List<string> {
            string.Empty,
            LivestockStatusModeConstants.Unchanged,
            LivestockStatusModeConstants.False,
            LivestockStatusModeConstants.True
        };
    private void ShowAnimalEditor()
    {
        LivestockAnimalModel animal = new();
        _addAnimalContext = new EditContext(animal);
        _addingAnimal = true;
        StateHasChanged();
    }
    private bool _addingAnimal = false;
    private EditContext _addAnimalContext;
    private void AnimalAddCancelled(EditContext context) { _addingAnimal = false; }
    private void AnimalAddSubmitted(EditContext context)
    {
        _addingAnimal = false;
        status.LivestockAnimalId = (context.Model as LivestockAnimalModel)?.Id ?? status.LivestockAnimalId;
        StateHasChanged();
    }

}

@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.Measurement
@using MicroAgManager.Components.Shared
@using MicroAgManager.Components.ScheduledDuty
@using MicroAgManager.Components.TreatmentRecord
@using MicroAgManager.Components.Registration
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore







<TabControl @ref="_tabControl" TabSelected="@(async() => await OnInitializedAsync())">
        <TabPage @ref="_closeTab" Text="x">
        </TabPage>
        <TabPage @ref="_scheduledDutiesTab">
            <ButtonContent>
                <button type="button" class="@_tabControl.GetButtonClass(_scheduledDutiesTab)" @onclick="@(() =>_tabControl.ActivatePage(_scheduledDutiesTab))">
                    Scheduled Duties
                </button>
            </ButtonContent>
            <ChildContent>
            <ScheduledDutyGrid Items="LivestockBaseQueries.baseScheduledDutyQuery(livestock.Id,appState)" ShowRecipientType=false ShowRecipient=false></ScheduledDutyGrid>
            </ChildContent>
        </TabPage>
        <TabPage @ref="_progenyTab">
            <ButtonContent>
                <button type="button" class="@_tabControl.GetButtonClass(_progenyTab)" @onclick="@(() =>_tabControl.ActivatePage(_progenyTab))">
                    Progeny
                </button>
            </ButtonContent>
            <ChildContent>
            <CascadingValue Value="livestock">
                <LivestockProgeny></LivestockProgeny>
            </CascadingValue>
            </ChildContent>
        </TabPage>
        <TabPage @ref="_ancestryTab">
            <ButtonContent>
                <button type="button" class="@_tabControl.GetButtonClass(_ancestryTab)" @onclick="@(() =>_tabControl.ActivatePage(_ancestryTab))">
                    Ancestry
                </button>
            </ButtonContent>
            <ChildContent>
                <CascadingValue Value="livestock">
                    <LivestockAncestry ShowSelf=false></LivestockAncestry>
                </CascadingValue>
            </ChildContent>
        </TabPage>
        <TabPage @ref="_measurementsTab">
            <ButtonContent>
                <button type="button" class="@_tabControl.GetButtonClass(_measurementsTab)" @onclick="@(() =>_tabControl.ActivatePage(_measurementsTab))">
                    Measurements
                </button>
            </ButtonContent>
            <ChildContent>
            <ScheduledDutyCommand Command="@DutyCommandConstants.Measurement" RecipientTypes="@RecipientTypes" RecipientId="@livestock.Id"></ScheduledDutyCommand>
                <MeasurementGrid Items="LivestockBaseQueries.baseMeasurementQuery(livestock.Id,appState)" ShowRecipientType=false ShowRecipient=false></MeasurementGrid>
            </ChildContent>
        </TabPage>
    <TabPage @ref="_treatmentsTab">
        <ButtonContent>
            <button type="button" class="@_tabControl.GetButtonClass(_treatmentsTab)" @onclick="@(() =>_tabControl.ActivatePage(_treatmentsTab))">
               Treatments
            </button>
        </ButtonContent>
        <ChildContent>
            <ScheduledDutyCommand Command="@DutyCommandConstants.Treatment" RecipientTypes="@RecipientTypes" RecipientId="@livestock.Id"></ScheduledDutyCommand>
            <TreatmentRecordGrid Items="LivestockBaseQueries.baseTreatmentRecordQuery(livestock.Id,appState)" ShowRecipientType=false ShowRecipient=false></TreatmentRecordGrid>
        </ChildContent>
    </TabPage>
    <TabPage @ref="_regisrationsTab">
        <ButtonContent>
            <button type="button" class="@_tabControl.GetButtonClass(_regisrationsTab)" @onclick="@(() =>_tabControl.ActivatePage(_regisrationsTab))">
                Registrations
            </button>
        </ButtonContent>
        <ChildContent>
            <ScheduledDutyCommand Command="@DutyCommandConstants.Registration" RecipientTypes="@RecipientTypes" RecipientId="@livestock.Id"></ScheduledDutyCommand>
            <RegistrationGrid Items="LivestockBaseQueries.baseRegistrationQuery(livestock.Id,appState)" ShowRecipientType=false ShowRecipient=false></RegistrationGrid>
        </ChildContent>
    </TabPage>
        <TabPage @ref="_breedingRecordsTab">
            <ButtonContent>
                <button type="button" class="@_tabControl.GetButtonClass(_breedingRecordsTab)" @onclick="@(() =>_tabControl.ActivatePage(_breedingRecordsTab))">
                    Breeding Records
                </button>
            </ButtonContent>
            <ChildContent>
            @if (livestock.Gender == GenderConstants.Male)
            {
                <ScheduledDutyCommand Command="@DutyCommandConstants.Service" RecipientTypes="@RecipientTypes" RecipientId="@livestock.Id"></ScheduledDutyCommand>
            }
            @if (livestock.Gender == GenderConstants.Female)
            {
                <ScheduledDutyCommand Command="@DutyCommandConstants.Breed" RecipientTypes="@RecipientTypes" RecipientId="@livestock.Id"></ScheduledDutyCommand>
            }
            <BreedingRecordGrid Items="LivestockBaseQueries.baseBreedingRecordQuery(livestock.Id,appState)"
                                    ShowRecipientType="false"
                                    ShowFemale="@(livestock.Gender == GenderConstants.Male)"
                                    ShowMale="@(livestock.Gender == GenderConstants.Female)">
                </BreedingRecordGrid>
            </ChildContent>
        </TabPage>
    </TabControl>

@code{
    [CascadingParameter] private ApplicationState appState { get; set; }
    [CascadingParameter] public LivestockModel? Livestock { get; set; }
    [Parameter] public long? livestockId { get; set; }
    private LivestockModel livestock { get; set; } = new LivestockModel();

    private Dictionary<string, long>? RecipientTypes { get; set; }

    protected TabControl _tabControl;
    protected TabPage _closeTab;
    protected TabPage _scheduledDutiesTab;
    protected TabPage _ancestryTab;
    protected TabPage _progenyTab;
    protected TabPage _breedingRecordsTab;
    protected TabPage _measurementsTab;
    protected TabPage _treatmentsTab;
    protected TabPage _regisrationsTab;

    protected override void OnInitialized()
    {
        appState.OnLocationChange += Refresh;
    }
    private void Refresh() => InvokeAsync(OnInitializedAsync);
    public void Dispose()
    {
        appState.OnLocationChange -= Refresh;
    }
    protected override async Task OnInitializedAsync()
    {
        livestock = Livestock is LivestockModel ? Livestock :
                  await appState.DbContext.Livestocks
                   .Include(p => p.Status)
                   .Include(p => p.Breed).ThenInclude(p => p.Animal)
                   .Include(p => p.Mother).Include(p => p.Father)
                   .FirstOrDefaultAsync(i => i.Id == livestockId);

        RecipientTypes = new Dictionary<string, long>()
        {
            {"LivestockAnimal",livestock.Breed.LivestockAnimalId },
            {"LivestockBreed",livestock.LivestockBreedId }
        };
        StateHasChanged();
    }

}

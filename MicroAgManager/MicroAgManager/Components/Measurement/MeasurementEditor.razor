@using BackEnd.BusinessLogic.Measurement
@using Domain.Constants
@using Domain.Interfaces
@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Components.Unit
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits HasRecipientsEditor
@if (measurement is not null)
{
        <ValidatedForm editContext="editContext"
                   OnSubmit="OnMeasurementSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="@ShowUpdateCancel"
                   Modal=Modal
                   Show=Show>

            <ValidatedField ValidationMessageFor="@(() => measurement.MeasureId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Measure</span>
                        <button type="button" @onclick=ShowMeasureEditor>+</button>
                        <MeasureEditor Modal=true Show=@showMeasureModal editContext=measureEditContext OnCancel=MeasureCanceled OnSubmit=MeasureSubmitted></MeasureEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                <InputSelect @bind-Value="@measurement.MeasureId">
                        <option value="">Select Measure ...</option>
                        @foreach (var unit in appState.DbContext.Measures)
                        {
                            <option value="@unit.Id">
                                @unit.Name
                            </option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        @if (ShowRecipient)
        {
            <ValidatedField Legend="Recipient Type" ValidationMessageFor="@(() => measurement.RecipientType)">
                <InputSelect @bind-Value="@measurement.RecipientType">
                    <option value="0">Select Recipient Type ...</option>
                    <option value="@RecipientTypeConstants.LivestockAnimal">@RecipientTypeConstants.LivestockAnimal</option>
                    <option value="@RecipientTypeConstants.LivestockBreed">@RecipientTypeConstants.LivestockBreed</option>
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient Item" ValidationMessageFor="@(() => measurement.RecipientTypeId)">
                <InputSelect @bind-Value="@measurement.RecipientTypeId">
                    <option value="0">Select Recipient Type Instance ...</option>
                    @foreach (var recipient in RecipientLogic.RecipientTypeIds(appState.DbContext, measurement.RecipientType))
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient" ValidationMessageFor="@(() => measurement.RecipientId)">
                <InputSelect @bind-Value="@measurement.RecipientId">
                    <option value="0">Select Recipient Instance ...</option>
                    @foreach (var recipient in RecipientLogic.RecipientIds(appState.DbContext, measurement.RecipientType))
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
        }
        <ValidatedField Legend="Value" ValidationMessageFor="@(() => measurement.Value)">
            <InputNumber @bind-Value="measurement.Value"></InputNumber>
        </ValidatedField>
        <ValidatedField ValidationMessageFor="@(() => measurement.MeasurementUnitId)">
            <LegendContent>
                <div style="display:inline-flex;gap:1rem;">
                    <span>Units</span><button type="button" @onclick=ShowUnitEditor>+</button>
                    <UnitEditor Modal=true Show=@showUnitModal editContext=unitEditContext OnCancel=UnitCanceled OnSubmit=UnitSubmitted></UnitEditor>
                </div>
            </LegendContent>
            <ChildContent>
                <InputSelect @bind-Value="@measurement.MeasurementUnitId">
                    <option value="0">Select Unit ...</option>
                    @foreach (var unit in UnitLogic.UnitSelections(appState.DbContext,null))
                    {
                        <option value="@unit.Id">@($"{unit.Name} ({unit.Symbol})")</option>
                    }
                </InputSelect>
            </ChildContent>
        </ValidatedField>
        <ValidatedField Legend="Notes" ValidationMessageFor="@(() => measurement.Notes)">
            <InputTextArea placeholder="Notes" @bind-Value="@measurement.Notes" />
        </ValidatedField>
        <ValidatedField Legend="Measurement Date" ValidationMessageFor="@(() => measurement.DatePerformed)">
            <InputDate @bind-Value="@measurement.DatePerformed" />
        </ValidatedField>
    </ValidatedForm>
}

@code {
    [Inject] protected IAPIService api { get; set; }
    private MeasurementModel? measurement;
    private MeasurementModel? original;
    protected override void OnInitialized()
    {
        measurement = editContext.Model as MeasurementModel;
        if (measurement is null) return;
        base.OnInitialized();
        if (measurement.MeasurementUnitId < 1)
            measurement.MeasurementUnitId = measurement.Measure.UnitId;

        original = measurement.Clone() as MeasurementModel;
        if (measurement.DatePerformed == DateTime.MinValue)
            measurement.DatePerformed = DateTime.Now;
    }
    public async override Task<IHasRecipient> SubmitEditContext()
    {
        await OnMeasurementSubmit(editContext);
        return measurement;
    }

    private async Task OnMeasurementSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;

        try
        {
            if (original.DatePerformed != measurement.DatePerformed)
                measurement.DatePerformed = measurement.DatePerformed.Date + DateTime.Now.TimeOfDay;
            var creating = (measurement.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<MeasurementModel, CreateMeasurement>("api/CreateMeasurement", new CreateMeasurement { Measurement = measurement }) :
                await api.ProcessCommand<MeasurementModel, UpdateMeasurement>("api/UpdateMeasurement", new UpdateMeasurement { Measurement = measurement });

            if (id <= 0)
                throw new Exception("Unable to save measurement");
            measurement.Id = id;
            //     if (creating)
            // {
            //     measurement.Id = id;
            //     appState.DbContext.Measurements.Add(measurement);
            // }
            // else
            // {
            //     var updated = await appState.DbContext.Measurements.FindAsync(measurement.Id);
            //     updated = measurement.Map(updated) as MeasurementModel;
            // }
            // await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(measurement);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }



    }

    private bool showMeasureModal = false;
    private EditContext measureEditContext = new EditContext(new MeasureModel());
    private void ShowMeasureEditor()
    {
        showMeasureModal = true;
        StateHasChanged();
    }
    private void MeasureSubmitted(EditContext e)
    {
        var model = e.Model as MeasureModel;
        showMeasureModal = false;
        if (model == null) return;
        measurement.MeasureId = model.Id;
        editContext = new EditContext(measurement);
        StateHasChanged();
    }
    private void MeasureCanceled(object e)
    {
        showMeasureModal = false;
        StateHasChanged();
    }
    private bool showUnitModal = false;
    private EditContext unitEditContext = new EditContext(new UnitModel());
    private void ShowUnitEditor()
    {
        showUnitModal = true;
        StateHasChanged();
    }
    private void UnitSubmitted(EditContext e)
    {
        var model = e.Model as UnitModel;
        showUnitModal = false;
        if (model == null) return;
        measurement.MeasurementUnitId = model.Id;
        editContext = new EditContext(measurement);
        StateHasChanged();
    }
    private void UnitCanceled(object e)
    {
        showUnitModal = false;
        StateHasChanged();
    }

    
}
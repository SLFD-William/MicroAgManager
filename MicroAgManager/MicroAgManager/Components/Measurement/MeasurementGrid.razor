@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared.Filters
@using MicroAgManager.Data
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore


<QuickGrid Theme="microagmanager" @ref=measurementGrid TGridItem=MeasurementModel Virtualize=true Items="FilteredItems()">
    <TemplateColumn Title="Measure" Sortable="true" Context="measure" SortBy="@OrderByMeasureName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="measureNameFilter" @bind:event="oninput" placeholder="Measure..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@($"/Ancillaries/Measurements?MeasureId={measure.MeasureId}")>
                @measure.Measure?.Name
            </NavLink>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Measure Unit" Context="measurement" SortBy="@OrderByMeasureUnit">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="measureUnitFilter" @bind:event="oninput" placeholder="Recipient..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@($"/Ancillaries/Units?UnitId={measurement.Measure.UnitId}")>
                @UnitLogic.UnitName(appState.DbContext, measurement.Measure.UnitId)
            </NavLink>
        </ChildContent>
    </TemplateColumn>
    @if (ShowRecipientType)
    {
        <PropertyColumn Property="@(p => p.RecipientType)" Title="Recipient Type" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientTypeFilter" @bind:event="oninput" placeholder="Recipient Type..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="Recipient Type Item" Sortable="true" Context="measurement" SortBy="@OrderByRecipientTypeItem">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientTypeItemFilter" @bind:event="oninput" placeholder="Recipient Type Instance..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                @measurement.RecipientTypeItem
            </ChildContent> 
        </TemplateColumn>
    }
    @if (ShowRecipient)
    {
        <TemplateColumn Title="Recipient" Sortable="true" Context="measurement" SortBy="@OrderByRecipientItem">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                <NavLink href=@RecipientLogic.GetRecipientHref(measurement.RecipientType,measurement.RecipientId)>
                    @measurement.RecipientItem
                </NavLink>

            </ChildContent>
        </TemplateColumn>
    }
    <TemplateColumn Title="Measured Value" Context="measurement">
        <ColumnOptions>
            <GenericFilter T="decimal?" FilterOperator="@measurementFilterOperator" FilterValue="@measurementFilter" FilterEndValue="@measurementFilterEnd" OnFilterChanged="HandleMeasurementFilterChanged" />
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@($"/Ancillaries/Measurements?MeasurementId={measurement.Id}")>
                @($"{measurement.Value} {measurement.MeasurementUnitName}")
            </NavLink>
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.DatePerformed)" Title="Performed On" Sortable="true">
        <ColumnOptions>
            <GenericFilter T="DateTime?" FilterOperator="@completedOnFilterOperator" FilterValue="@completedOnFilter" FilterEndValue="@completedOnFilterEnd" OnFilterChanged="HandleCompletedFilterChanged" />
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Notes)" Title="Notes" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="measurementNotesFilter" @bind:event="oninput" placeholder="Notes..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
</QuickGrid>
@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter] required public IQueryable<MeasurementModel> Items { get; set; }
    QuickGrid<MeasurementModel> measurementGrid;
    [Parameter]
    public bool ShowRecipientType
    {
        get => _showRecipientType;
        set
        {
            _showRecipientType = value;
            if (!value)
            {
                recipientTypeFilter = string.Empty;
                recipientTypeItemFilter = string.Empty;
            }

        }
    }
    private bool _showRecipientType = true;
    [Parameter]
    public bool ShowRecipient
    {
        get => _showRecipient;
        set
        {
            _showRecipient = value;
            if (!value)
                recipientFilter = string.Empty;
        }
    }
    private bool _showRecipient = true;

    GridSort<MeasurementModel> OrderByMeasureName = GridSort<MeasurementModel>.ByAscending(p => p.Measure.Name);
    GridSort<MeasurementModel> OrderByMeasureUnit = GridSort<MeasurementModel>.ByAscending(p => p.MeasureUnitName);
    GridSort<MeasurementModel> OrderByRecipientTypeItem = GridSort<MeasurementModel>.ByAscending(p => p.RecipientTypeItem);
    GridSort<MeasurementModel> OrderByRecipientItem = GridSort < MeasurementModel>.ByAscending(p => p.RecipientItem);

    string measureNameFilter { get; set; }
    string measureUnitFilter { get; set; }

    string recipientTypeFilter { get; set; }
    string recipientTypeItemFilter { get; set; }
    string recipientFilter { get; set; }
    string measurementNotesFilter { get; set; }

    decimal? measurementFilter { get; set; } //numeric
    string measurementFilterOperator { get; set; } //numeric
    decimal? measurementFilterEnd { get; set; } //numeric
    DateTime? completedOnFilter { get; set; } //date
    string completedOnFilterOperator { get; set; }
    DateTime? completedOnFilterEnd { get; set; }
   
    private void HandleMeasurementFilterChanged((string? FilterOperator, decimal? FilterValue, decimal? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        measurementFilter = filterValue;
        measurementFilterOperator = filterOperator ?? string.Empty;
        measurementFilterEnd = filterEndValue;
        StateHasChanged();
    }
    private void HandleCompletedFilterChanged((string? FilterOperator, DateTime? FilterValue, DateTime? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        completedOnFilter = filterValue;
        completedOnFilterOperator = filterOperator ?? string.Empty;
        completedOnFilterEnd = filterEndValue;
        StateHasChanged();
    }
    private IQueryable<MeasurementModel> FilteredItems()
    {
        var query = Items.ToList().AsQueryable();
        if (!string.IsNullOrWhiteSpace(measureNameFilter))
            query = query.Where(s => s.MeasureName.Contains(measureNameFilter));
        if (!string.IsNullOrWhiteSpace(measureUnitFilter))
            query = query.Where(s => s.MeasureUnitName.Contains(measureUnitFilter));
        if (!string.IsNullOrWhiteSpace(recipientTypeFilter))
            query = query.Where(s => s.RecipientType.Contains(recipientTypeFilter));
        if (!string.IsNullOrWhiteSpace(recipientTypeItemFilter))
            query = query.Where(s => s.RecipientTypeItem.Contains(recipientTypeItemFilter));
        if (!string.IsNullOrWhiteSpace(recipientFilter))
            query = query.Where(s => s.RecipientItem.Contains(recipientFilter));
        if (!string.IsNullOrWhiteSpace(measurementNotesFilter))
            query = query.Where(s => s.Notes.Contains(measurementNotesFilter));
        if (!string.IsNullOrWhiteSpace(measurementFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.Value, measurementFilter, measurementFilterOperator, measurementFilterEnd);
        if (!string.IsNullOrWhiteSpace(completedOnFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.DatePerformed, completedOnFilter, completedOnFilterOperator, completedOnFilterEnd);
        return query;
    }
}
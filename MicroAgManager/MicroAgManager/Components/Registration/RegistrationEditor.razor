@using BackEnd.BusinessLogic.Registration
@using Domain.Constants
@using Domain.Interfaces
@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits HasRecipientsEditor
@if (registration is not null)
{
        <ValidatedForm editContext="editContext"
                   OnSubmit="OnRegistrationSubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="@ShowUpdateCancel"
                   Modal=Modal
                   Show=Show>
        <ValidatedField ValidationMessageFor="@(() =>registration.RegistrarId)">
            <LegendContent>
                <div style="display:inline-flex;gap:1rem;">
                    <span>Registrar</span><button type="button" @onclick=ShowRegistrarEditor>+</button>
                    <RegistrarEditor Modal="true" Show="@showRegistrarModal" editContext=registrarEditContext OnCancel=RegistrarCanceled OnSubmit=RegistrarSubmitted></RegistrarEditor>
                </div>
            </LegendContent>
            <ChildContent>
                <InputSelect @bind-Value="@registration.RegistrarId">
                    <option value="0">Select Registrar ...</option>
                    @foreach (var registrar in appState.DbContext.Registrars.OrderBy(m => m.Name))
                    {
                        <option value="@registrar.Id">@($"{registrar.Name} ({registrar.RegistrarFarmID})")</option>
                    }
                </InputSelect>
            </ChildContent>
        </ValidatedField>
        @if (ShowRecipient)
        {
            <ValidatedField Legend="Recipient Type" ValidationMessageFor="@(() => registration.RecipientType)">
                <InputSelect @bind-Value="@registration.RecipientType">
                    <option value="0">Select Recipient Type ...</option>
                    <option value="@RecipientTypeConstants.LivestockAnimal">@nameof(RecipientTypeConstants.LivestockAnimal)</option>
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient Item" ValidationMessageFor="@(() => registration.RecipientTypeId)">
                <InputSelect @bind-Value="@registration.RecipientTypeId">
                    <option value="0">Select Recipient Type Instance ...</option>
                    @foreach (var recipient in RecipientLogic.RecipientTypeIds(appState.DbContext, registration.RecipientType))
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
            <ValidatedField Legend="Recipient" ValidationMessageFor="@(() => registration.RecipientId)">
                <InputSelect @bind-Value="@registration.RecipientId">
                    <option value="0">Select Recipient Instance ...</option>
                    @foreach (var recipient in RecipientLogic.RecipientIds(appState.DbContext, registration.RecipientType))
                    {
                        <option value="@recipient.Key">@recipient.Value</option>
                    }
                </InputSelect>
            </ValidatedField>
        }
        <ValidatedField Legend="Identification Number" ValidationMessageFor="@(() => registration.Identifier)">
            <InputText @bind-Value="@registration.Identifier"></InputText>
        </ValidatedField>
        <ValidatedField Legend="Default Identification" ValidationMessageFor="@(() => registration.DefaultIdentification)">
            <InputCheckbox @bind-Value="@registration.DefaultIdentification"></InputCheckbox>
        </ValidatedField>
        <ValidatedField Legend="Registration Date" ValidationMessageFor="@(() => registration.RegistrationDate)">
            <InputDate @bind-Value="@registration.RegistrationDate"></InputDate>
        </ValidatedField>
    </ValidatedForm>
}


@code {
    [Inject] protected IAPIService api { get; set; }
    private RegistrationModel registration;
    private RegistrationModel original;
    protected override void OnInitialized()
    {
        registration = editContext.Model as RegistrationModel;
        if (registration is null) return;
        base.OnInitialized();
        original = registration.Clone() as RegistrationModel;
        if (registration.RegistrationDate == DateTime.MinValue)
            registration.RegistrationDate = DateTime.Now;
    }
    public async override Task<IHasRecipient> SubmitEditContext()
    {
        await OnRegistrationSubmit(editContext);
        return registration;
    }

    private async Task OnRegistrationSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;

        try
        {
            if (original.RegistrationDate != registration.RegistrationDate)
                registration.RegistrationDate = registration.RegistrationDate.Date + DateTime.Now.TimeOfDay;
            var creating = (registration.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<RegistrationModel, CreateRegistration>("api/CreateRegistration", new CreateRegistration { Registration = registration }) :
                await api.ProcessCommand<RegistrationModel, UpdateRegistration>("api/UpdateRegistration", new UpdateRegistration { Registration = registration });

            if (id <= 0)
                throw new Exception("Unable to save registration");
            registration.Id = id;
            //     if (creating)
            // {
            //     registration.Id = id;
            //     appState.DbContext.Registrations.Add(registration);
            // }
            // else
            // {
            //     var updated = await appState.DbContext.Registrations.FindAsync(registration.Id);
            //     updated = registration.Map(updated) as RegistrationModel;
            // }
            // await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(registration);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }
    }
    private bool showRegistrarModal = false;
    private EditContext registrarEditContext = new EditContext(new RegistrarModel());
    private void ShowRegistrarEditor()
    {
        showRegistrarModal = true;
        StateHasChanged();
    }
    private void RegistrarSubmitted(EditContext e)
    {
        var model = e.Model as RegistrarModel;
        showRegistrarModal = false;
        if (model == null) return;
        registration.RegistrarId = model.Id;
        editContext = new EditContext(registration);
        StateHasChanged();
    }
    private void RegistrarCanceled(object e)
    {
        showRegistrarModal = false;
        StateHasChanged();
    }
}
     
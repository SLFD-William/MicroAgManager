@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Components.Shared.Filters
@using MicroAgManager.Data
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore


<QuickGrid Theme="microagmanager" @ref=registrationGrid TGridItem=RegistrationModel  Items="Items">
    <TemplateColumn Title="Registrar" Sortable="true" Context="registrar" SortBy="@OrderByRegistrarName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="registrarNameFilter" @bind:event="oninput" placeholder="Registrar..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@($"/Ancillaries/Registrations?RegistrarId={registrar.RegistrarId}")>
                @registrar.Registrar.Name
            </NavLink>
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.Registrar.Email)" Title="Email" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
            <input type="search" autofocus @bind="registrarEmailFilter" @bind:event="oninput" placeholder="Identifier..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Registrar.Website)" Title="Website" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="registrarWebFilter" @bind:event="oninput" placeholder="Identifier..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Registrar.API)" Title="API Format" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="registrarApiFilter" @bind:event="oninput" placeholder="Identifier..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Registrar.RegistrarFarmID)" Title="Farm Id" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="registrarFarmFilter" @bind:event="oninput" placeholder="Identifier..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    @if (ShowRecipientType)
    {
        <PropertyColumn Property="@(p => p.RecipientType)" Title="Recipient Type" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientTypeFilter" @bind:event="oninput" placeholder="Recipient Type..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="Recipient Type Item" Sortable="true" Context="registration" SortBy="@OrderByRecipientTypeItem">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientTypeItemFilter" @bind:event="oninput" placeholder="Recipient Type Item..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                @registration.RecipientTypeItem
            </ChildContent>
        </TemplateColumn>
    }
    @if (ShowRecipient)
    {
        <TemplateColumn Title="Recipient" Sortable="true" Context="registration" SortBy="@OrderByRecipientItem">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Recipient..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                <NavLink href=@RecipientLogic.GetRecipientHref(registration.RecipientType, registration.RecipientId)>
                    @RecipientLogic.RecipientName(appState.DbContext, registration.RecipientType, registration.RecipientId)
                </NavLink>

            </ChildContent>
        </TemplateColumn>
    }
    <TemplateColumn Title="Identifier" Sortable="true" SortBy="OrderByIdentifier" Context="registrar">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="identifierFilter" @bind:event="oninput" placeholder="Registrar..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@($"/Ancillaries/Registrations?RegistrationId={registrar.Id}")>
                @registrar.Identifier
            </NavLink>
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(p => p.DefaultIdentification)" Sortable="true">
        <ColumnOptions>
            <GenericFilter T="bool?" FilterOperator="@defaultIdentificationFilterOperator" FilterValue="@defaultIdentificationFilter" FilterEndValue="@defaultIdentificationFilterEnd" OnFilterChanged="HandleDefaultIdentificationFilterChanged" />
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.RegistrationDate)" Title="Registration Date" Sortable="true">
        <ColumnOptions>
            <GenericFilter T="DateTime?" FilterOperator="@registrationDateFilterOperator" FilterValue="@registrationDateFilter" FilterEndValue="@registrationDateFilterEnd" OnFilterChanged="HandleRegistrationDateFilterChanged" />
        </ColumnOptions>
    </PropertyColumn>
</QuickGrid>
@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter] required public IQueryable<RegistrationModel> Items { get; set; }
    QuickGrid<RegistrationModel> registrationGrid;
    [Parameter]
    public bool ShowRecipientType
    {
        get => _showRecipientType;
        set
        {
            _showRecipientType = value;
            if (!value)
            {
                recipientTypeFilter = string.Empty;
                recipientTypeItemFilter = string.Empty;
            }

        }
    }
    private bool _showRecipientType = true;
    [Parameter]
    public bool ShowRecipient
    {
        get => _showRecipient;
        set
        {
            _showRecipient = value;
            if (!value)
                recipientFilter = string.Empty;
        }
    }
    private bool _showRecipient = true;


    GridSort<RegistrationModel> OrderByRegistrarName = GridSort<RegistrationModel>.ByAscending(p => p.Registrar.Name);
    GridSort<RegistrationModel> OrderByRecipientTypeItem = GridSort<RegistrationModel>.ByAscending(p => p.RecipientTypeItem);
    GridSort<RegistrationModel> OrderByRecipientItem = GridSort<RegistrationModel>.ByAscending(p => p.RecipientItem);
    GridSort<RegistrationModel> OrderByIdentifier = GridSort<RegistrationModel>.ByAscending(p => p.Identifier);
    string registrarNameFilter { get; set; }
    string recipientTypeFilter { get; set; }
    string recipientTypeItemFilter { get; set; }
    string recipientFilter { get; set; }
    string registrarEmailFilter { get; set; }
    string registrarWebFilter { get; set; }
    string registrarApiFilter { get; set; }
    string registrarFarmFilter { get; set; }
    string identifierFilter { get; set; }
    bool? defaultIdentificationFilter { get; set; } //bool
    bool? defaultIdentificationFilterEnd { get; set; }
    string defaultIdentificationFilterOperator { get; set; }
    void HandleDefaultIdentificationFilterChanged((string? FilterOperator, bool? FilterValue, bool? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        defaultIdentificationFilter = filterValue;
        defaultIdentificationFilterOperator = filterOperator ?? string.Empty;
        defaultIdentificationFilterEnd = filterEndValue;
        StateHasChanged();
    }
    DateTime? registrationDateFilter { get; set; } //bool
    DateTime? registrationDateFilterEnd { get; set; }
    string registrationDateFilterOperator { get; set; }
    void HandleRegistrationDateFilterChanged((string? FilterOperator, DateTime? FilterValue, DateTime? FilterEndValue) filterData)
    {
        var (filterOperator, filterValue, filterEndValue) = filterData;
        registrationDateFilter = filterValue;
        registrationDateFilterOperator = filterOperator ?? string.Empty;
        registrationDateFilterEnd = filterEndValue;
        StateHasChanged();
    }
    private IQueryable<RegistrationModel> FilteredItems()
    {
        var query = Items.ToList().AsQueryable();
        if (!string.IsNullOrWhiteSpace(recipientTypeFilter))
            query = query.Where(s => s.RecipientType.Contains(recipientTypeFilter));
        if (!string.IsNullOrWhiteSpace(recipientTypeItemFilter))
            query = query.Where(s => s.RecipientTypeItem.Contains(recipientTypeItemFilter));
        if (!string.IsNullOrWhiteSpace(recipientFilter))
            query = query.Where(s => s.RecipientItem.Contains(recipientFilter));
        if (!string.IsNullOrWhiteSpace(registrarNameFilter))
            query = query.Where(s => s.RegistrarName.Contains(registrarNameFilter));
        if (!string.IsNullOrWhiteSpace(registrarEmailFilter))
            query = query.Where(s => s.RegistrarEmail.Contains(registrarEmailFilter));
        if (!string.IsNullOrWhiteSpace(registrarWebFilter))
            query = query.Where(s => s.RegistrarWebsite.Contains(registrarWebFilter));
        if (!string.IsNullOrWhiteSpace(registrarApiFilter))
            query = query.Where(s => s.RegistrarApi.Contains(registrarApiFilter));
        if (!string.IsNullOrWhiteSpace(registrarFarmFilter))
            query = query.Where(s => s.RegistrarFarmId.Contains(registrarFarmFilter));
        if (!string.IsNullOrWhiteSpace(identifierFilter))
            query = query.Where(s => s.Identifier.Contains(identifierFilter));
        if (!string.IsNullOrWhiteSpace(defaultIdentificationFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.DefaultIdentification, defaultIdentificationFilter, defaultIdentificationFilterOperator, defaultIdentificationFilterEnd);
        if (!string.IsNullOrWhiteSpace(registrationDateFilterOperator))
            query = FilteringHelpers.ApplyFilter(query, s => s.RegistrationDate, registrationDateFilter, registrationDateFilterOperator, registrationDateFilterEnd);


        return query;  
    }
}
@using Domain.Logic
@using Domain.Models
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore


<QuickGrid Theme="microagmanager" @ref=scheduleDutyGrid TGridItem=ScheduledDutyModel Virtualize=true Items="FilteredItems()">
    <PropertyColumn Property="@(p => p.ScheduleSource)" Title="Source" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="sourceFilter" @bind:event="oninput" placeholder="Source..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.ScheduleSourceItem)" Title="Source Item" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="sourceItemFilter" @bind:event="oninput" placeholder="Source Item..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn Title="Duty" Sortable="true" Context="scheduledDuty" SortBy="@OrderByDutyName">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="dutyNameFilter" @bind:event="oninput" placeholder="Animal..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <NavLink href=@($"/Ancillaries/ScheduledDuties?DutyId={scheduledDuty.DutyId}")>
                @scheduledDuty.Duty.Name
            </NavLink>
         </ChildContent>
     </TemplateColumn>
    <TemplateColumn Title="Command" Sortable="true" Context="scheduledDuty" SortBy="@OrderByDutyCommandItem">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="dutyCommandItemFilter" @bind:event="oninput" placeholder="Command..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            @if (scheduledDuty.CompletedOn.HasValue)
            {
                <span>@scheduledDuty.Duty.CommandItem</span>
            }
            else
            {
                <ScheduledDutyCommand Command="@scheduledDuty.Duty.Command" ScheduledDutyId="@scheduledDuty.Id"></ScheduledDutyCommand>
            }
        </ChildContent>
    </TemplateColumn>
    @if (ShowRecipientType)
    {
    <TemplateColumn Title="Recipient Type" Sortable="true" Context="scheduledDuty" SortBy="@OrderByDutyRecipientType">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="dutyRecipientTypeFilter" @bind:event="oninput" placeholder="Animal..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <span>@scheduledDuty.Duty.RecipientType</span>
        </ChildContent>
    </TemplateColumn>
    <TemplateColumn Title="Recipient Type Item" Sortable="true" Context="scheduledDuty" SortBy="@OrderByDutyRecipientTypeItem">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="dutyRecipientTypeItemFilter" @bind:event="oninput" placeholder="Animal..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            <span>@scheduledDuty.Duty.RecipientTypeItem</span>
        </ChildContent>
    </TemplateColumn>
    }
    @if (ShowRecipient)
    {
        <PropertyColumn Property="@(p => p.Recipient)" Title="Recipient" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="recipientFilter" @bind:event="oninput" placeholder="Source..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="Recipient Item" Sortable="true" Context="scheduledDuty" SortBy="@OrderByDutyRecipientItem">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="dutyRecipientTypeFilter" @bind:event="oninput" placeholder="Animal..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                    <NavLink href=@RecipientLogic.GetRecipientHref(scheduledDuty.Duty.RecipientType,scheduledDuty.RecipientId)>
                        @RecipientLogic.RecipientName(appState.DbContext, scheduledDuty.Duty.RecipientType, scheduledDuty.RecipientId)
                    </NavLink>
                </ChildContent>
        </TemplateColumn>
    }
    <PropertyColumn Property="@(p => p.DueOn)" Title="DueOn" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <select @bind="dueOnFilterOperator">
                    <option value="">Select operator...</option>
                    <option value="eq">Equals</option>
                    <option value="neq">Not equals</option>
                    <option value="gt">Greater than</option>
                    <option value="lt">Less than</option>
                    <option value="gte">Greater than or equal</option>
                    <option value="lte">Less than or equal</option>
                    <option value="between">Between</option>
                    <option value="null">Is Null</option>
                    <option value="notnull">Is Not Null</option>
                </select>
                <input type="date" @bind="dueOnFilter" @bind:event="oninput" />
                @if (dueOnFilterOperator == "between")
                {
                    <input type="date" @bind="dueOnFilterEnd" @bind:event="oninput" />
                }
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.ReminderDays)" Title="Reminder Days" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="reminderFilter" @bind:event="oninput" placeholder="Source..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.CompletedOn)" Title="Completed On" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <select @bind="completedOnFilterOperator">
                    <option value="">Select operator...</option>
                    <option value="eq">Equals</option>
                    <option value="neq">Not equals</option>
                    <option value="gt">Greater than</option>
                    <option value="lt">Less than</option>
                    <option value="gte">Greater than or equal</option>
                    <option value="lte">Less than or equal</option>
                    <option value="between">Between</option>
                    <option value="null">Is Null</option>
                    <option value="notnull">Is Not Null</option>
                </select>
                <input type="date" @bind="completedOnFilter" @bind:event="oninput" />
                @if (completedOnFilterOperator == "between")
                {
                    <input type="date" @bind="completedOnFilterEnd" @bind:event="oninput" />
                }
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn Title="Record" Sortable="true" Context="scheduledDuty" SortBy="@OrderByRecord">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="recordFilter" @bind:event="oninput" placeholder="Animal..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            @if (scheduledDuty.RecordId > 0)
            {
                <NavLink href=@ScheduledDutyLogic.GetRecordHref(scheduledDuty)>
                    @($"{scheduledDuty.Record} {scheduledDuty.RecordId}")
                </NavLink>
            }
            else
            {
                <span>@scheduledDuty.Record</span>
            }
        </ChildContent>
    </TemplateColumn>
</QuickGrid>







@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter] public bool ShowRecipientType { get; set; } = true;
    [Parameter] public bool ShowRecipient { get; set; } = true;
    [Parameter] required public IQueryable<ScheduledDutyModel> Items { get; set; }
    QuickGrid<ScheduledDutyModel> scheduleDutyGrid;
    string sourceFilter { get; set; }
    string sourceItemFilter { get; set; }
    string dutyNameFilter { get; set; }
    string dutyCommandItemFilter { get; set; }
    string dutyRecipientTypeFilter { get; set; }
    string dutyRecipientTypeItemFilter { get; set; }
    string recipientFilter { get; set; }
    string dutyRecipientItemFilter { get; set; }
    string reminderFilter { get; set; } //numeric
    DateTime? dueOnFilter { get; set; } //date
    string dueOnFilterOperator { get; set; }
    DateTime? dueOnFilterEnd { get; set; }
    DateTime? completedOnFilter { get; set; } //date
    string completedOnFilterOperator { get; set; }
    DateTime? completedOnFilterEnd { get; set; }
    string recordFilter { get; set; }
    
    private IQueryable<ScheduledDutyModel> FilteredItems()
    {
        var query = Items.ToList().AsQueryable();

        if (!string.IsNullOrWhiteSpace(sourceFilter))
            query = query.Where(s => s.ScheduleSource.Contains(sourceFilter));
        if (!string.IsNullOrWhiteSpace(sourceItemFilter))
            query = query.Where(s => s.ScheduleSourceItem.Contains(sourceItemFilter));
        if (!string.IsNullOrWhiteSpace(dutyNameFilter))
            query = query.Where(s => s.Duty.Name.Contains(dutyNameFilter));
        if (!string.IsNullOrWhiteSpace(dutyCommandItemFilter))
            query = query.Where(s => s.Duty.CommandItem.Contains(dutyCommandItemFilter));
        if (!string.IsNullOrWhiteSpace(dutyRecipientTypeFilter))
            query = query.Where(s => s.Duty.RecipientType.Contains(dutyRecipientTypeFilter));
        if (!string.IsNullOrWhiteSpace(dutyRecipientTypeItemFilter))
            query = query.Where(s => s.Duty.RecipientType.Contains(dutyRecipientTypeItemFilter));
        if (!string.IsNullOrWhiteSpace(recipientFilter))
            query = query.Where(s => s.Recipient.Contains(recipientFilter));
        if (!string.IsNullOrWhiteSpace(reminderFilter))
            query = query.Where(s => s.ReminderDays.ToString().Contains(reminderFilter));
        // if (!string.IsNullOrWhiteSpace(dutyRecipientItemFilter))
        //     query = query.Where(s => s.Re.Contains(dutyRecipientItemFilter));

             // query = FilteringHelpers.ApplyDateFilter(query, s => s.DueOn, dueOnFilter, dueOnFilterOperator, dueOnFilterEnd);
             // query = FilteringHelpers.ApplyDateFilter(query, s => s.CompletedOn, completedOnFilter, completedOnFilterOperator, completedOnFilterEnd);

            return query;
    }
    GridSort<ScheduledDutyModel> OrderByDutyName = GridSort<ScheduledDutyModel>.ByAscending(p => p.Duty.Name);
    GridSort<ScheduledDutyModel> OrderByDutyCommand = GridSort<ScheduledDutyModel>.ByAscending(p => p.Duty.Command);
    GridSort<ScheduledDutyModel> OrderByDutyCommandItem = GridSort<ScheduledDutyModel>.ByAscending(p => p.Duty.CommandItem);
    GridSort<ScheduledDutyModel> OrderByDutyRecipientType = GridSort<ScheduledDutyModel>.ByAscending(p => p.Duty.RecipientType);
    GridSort<ScheduledDutyModel> OrderByDutyRecipientTypeItem = GridSort<ScheduledDutyModel>.ByAscending(p => p.Duty.RecipientTypeItem);
    GridSort<ScheduledDutyModel> OrderByDutyRecipientItem = GridSort<ScheduledDutyModel>.ByAscending(p => p.RecipientItem);
    GridSort<ScheduledDutyModel> OrderByRecord = GridSort<ScheduledDutyModel>.ByAscending(p => p.Record).ThenAscending(p=>p.RecipientId);
    
}
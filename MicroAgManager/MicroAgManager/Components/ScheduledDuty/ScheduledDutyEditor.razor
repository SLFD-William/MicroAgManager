@using Domain
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.Chore
@using MicroAgManager.Components.Duty
@using MicroAgManager.Components.Event
@using MicroAgManager.Components.Livestock
@using MicroAgManager.Components.Measurement
@using MicroAgManager.Components.Milestone
@using MicroAgManager.Components.Registration
@using MicroAgManager.Components.Shared
@using MicroAgManager.Components.TreatmentRecord
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits BaseEditor
@if (scheduledDuty is not null)
{
    <ValidatedForm editContext="editContext"
                   OnSubmit="@OnScheduledDutySubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="true"
                   createOnly="@(scheduledDuty.Id<1)"
                   Modal=Modal
                   Show=Show>
        <ValidatedField ValidationMessageFor="@(() => scheduledDuty.DutyId)">
            <LegendContent>
                <div style="display:inline-flex">
                    <span>Duty</span>
                    <button type="button" @onclick=ShowDutyEditor>+</button>
                    <DutyEditor Modal=true Show=@showDutyModal editContext=dutyEditContext OnCancel=DutyCanceled OnSubmit=DutySubmitted></DutyEditor>
                </div>
            </LegendContent>
            <ChildContent>
                <InputSelect @bind-Value="@scheduledDuty.DutyId">
                    <option value="">Select Duty ...</option>
                    @foreach (var unit in appState.DbContext.Duties)
                    {
                        <option value="@unit.Id">
                            @unit.Name
                        </option>
                    }
                </InputSelect>
            </ChildContent>
        </ValidatedField>
        @if (scheduledDuty.DutyId > 0)
        { 
            <ValidatedField ValidationMessageFor="@(() => scheduledDuty.ScheduleSourceId)">
                <LegendContent>
                    <div style="display:inline-flex">
                        <span>Source</span>
                        <button type="button" @onclick=ShowSourceEditor>+</button>
                        @if (string.IsNullOrEmpty(scheduledDuty.ScheduleSource) || scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Event)
                        {
                            <EventEditor Modal="true" Show="showSourceModal" editContext="SetupEventContext()" OnSubmit="SourceSubmitted" OnCancel="SourceCanceled"></EventEditor>
                        }
                        @if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Chore)
                        {
                            <ChoreEditor Modal="true" Show="showSourceModal" editContext="SetupChoreContext()" OnSubmit="SourceSubmitted" OnCancel="SourceCanceled"></ChoreEditor>
                        }
                        @if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Milestone)
                        {
                            <ChoreEditor Modal="true" Show="showSourceModal" editContext="SetupMilestoneContext()" OnSubmit="SourceSubmitted" OnCancel="SourceCanceled"></ChoreEditor>
                        }
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@scheduledDuty.ScheduleSourceId">
                        <option value="">Select Source ...</option>
                        @foreach (var unit in sourceIds())
                        {
                            <option value="@unit.Key">
                                @unit.Value
                            </option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        }
@*         @if (recordComponent != null && scheduledDuty.ScheduleSourceId>0 )
        { 
            <DynamicComponent Type="@recordComponent" Parameters="@recordComponentParameters" />
        } *@
    </ValidatedForm>
}
@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Inject] protected IAPIService api { get; set; }
    private ScheduledDutyModel? scheduledDuty;

    private Type recordComponent;
    private Dictionary<string, object> recordComponentParameters { get; set; } = [];
    private Type sourceComponent;
    private Dictionary<string, object> sourceComponentParameters { get; set; } = [];
    protected override void OnInitialized()
    {
        scheduledDuty = editContext.Model as ScheduledDutyModel;
        if (scheduledDuty is null) return;
        SetupRecordComponent();
    }

    private EditContext SetupMilestoneContext()
    {
        var milestone = appState.DbContext.Milestones.Find(scheduledDuty.ScheduleSourceId) ?? new();
        if (milestone.Id < 1)
        {   milestone.RecipientType = scheduledDuty.Duty.RecipientType;
            milestone.RecipientTypeId = scheduledDuty.Duty.RecipientTypeId;
            milestone.Duties.Add(scheduledDuty.Duty);
        }
        return new EditContext(milestone);
    }
    private EditContext SetupChoreContext()
    {
        
        var chore = appState.DbContext.Chores.Find(scheduledDuty.ScheduleSourceId) ?? new();
        if (chore.Id < 1)
        {
            chore.RecipientType = scheduledDuty.Duty.RecipientType;
            chore.RecipientTypeId = scheduledDuty.Duty.RecipientTypeId;
            chore.Duties.Add(scheduledDuty.Duty);
        }
        return new EditContext(chore);
    }
    private EditContext SetupEventContext()
    {
        var eventModel = appState.DbContext.Events.Find(scheduledDuty.ScheduleSourceId) ?? new();
        if (eventModel.Id < 1)
        {
            eventModel.Duties.Add(scheduledDuty.Duty);
        }
        return new EditContext(eventModel);
    }
    private void SetupRecordComponent()
    {
        recordComponentParameters.Clear();
        if (scheduledDuty.Record == ScheduledDutyRecordConstants.BreedingRecord) SetupBreedingRecordComponent();
        if (scheduledDuty.Record == ScheduledDutyRecordConstants.Measurement) SetupMeasurementComponent();
        if (scheduledDuty.Record == ScheduledDutyRecordConstants.TreatmentRecord) SetupTreatmentRecordComponent();
        if (scheduledDuty.Record == ScheduledDutyRecordConstants.Registration) SetupRegistrationComponent();
    }
    private void SetupBreedingRecordComponent()
    {
        recordComponent = typeof(BreedingRecordEditor);
        // var measurement = appState.DbContext.Measurements.Find(scheduledDuty.RecordId) ?? new();
        // if (measurement.Id < 1)
        // {
        //     measurement.RecipientId = scheduledDuty.RecipientId;
        //     measurement.RecipientType = scheduledDuty.Duty.RecipientType;
        //     measurement.RecipientTypeId = scheduledDuty.Duty.RecipientTypeId;
        //     measurement.MeasureId = scheduledDuty.Duty.CommandId;
        // }
        // var measurementContext = new EditContext(measurement);
        // recordComponentParameters.Add("editContex", measurementContext);
        // recordComponentParameters.Add("OnSubmit", EventCallback.Factory.Create<EditContext>(this, SourceSubmitted));
        // recordComponentParameters.Add("OnCancel", EventCallback.Factory.Create<object>(this, SourceCanceled));

    }
    private void SetupRegistrationComponent()
    {
        recordComponent = typeof(RegistrationEditor);
        // var measurement = appState.DbContext.Measurements.Find(scheduledDuty.RecordId) ?? new();
        // if (measurement.Id < 1)
        // {
        //     measurement.RecipientId = scheduledDuty.RecipientId;
        //     measurement.RecipientType = scheduledDuty.Duty.RecipientType;
        //     measurement.RecipientTypeId = scheduledDuty.Duty.RecipientTypeId;
        //     measurement.MeasureId = scheduledDuty.Duty.CommandId;
        // }
        // var measurementContext = new EditContext(measurement);
        // recordComponentParameters.Add("editContex", measurementContext);
        // recordComponentParameters.Add("OnSubmit", EventCallback.Factory.Create<EditContext>(this, SourceSubmitted));
        // recordComponentParameters.Add("OnCancel", EventCallback.Factory.Create<object>(this, SourceCanceled));

    }
    private void SetupMeasurementComponent()
    {
        recordComponent = typeof(MeasurementEditor);
        var measurement = appState.DbContext.Measurements.Find(scheduledDuty.RecordId) ?? new();
        if (measurement.Id < 1)
        {
            measurement.RecipientId = scheduledDuty.RecipientId;
            measurement.RecipientType = scheduledDuty.Duty.RecipientType;
            measurement.RecipientTypeId = scheduledDuty.Duty.RecipientTypeId;
            measurement.MeasureId = scheduledDuty.Duty.CommandId;
        }
        var measurementContext = new EditContext(measurement);
        recordComponentParameters.Add("editContex", measurementContext);
        recordComponentParameters.Add("OnSubmit", EventCallback.Factory.Create<EditContext>(this, SourceSubmitted));
        recordComponentParameters.Add("OnCancel", EventCallback.Factory.Create<object>(this, SourceCanceled));

    }
    private void SetupTreatmentRecordComponent()
    {
        recordComponent = typeof(TreatmentRecordEditor);
        // var measurement = appState.DbContext.Measurements.Find(scheduledDuty.RecordId) ?? new();
        // if (measurement.Id < 1)
        // {
        //     measurement.RecipientId = scheduledDuty.RecipientId;
        //     measurement.RecipientType = scheduledDuty.Duty.RecipientType;
        //     measurement.RecipientTypeId = scheduledDuty.Duty.RecipientTypeId;
        //     measurement.MeasureId = scheduledDuty.Duty.CommandId;
        // }
        // var measurementContext = new EditContext(measurement);
        // recordComponentParameters.Add("editContex", measurementContext);
        // recordComponentParameters.Add("OnSubmit", EventCallback.Factory.Create<EditContext>(this, SourceSubmitted));
        // recordComponentParameters.Add("OnCancel", EventCallback.Factory.Create<object>(this, SourceCanceled));

    }

    private async Task OnScheduledDutySubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;
        try
        {

            // var creating = (duty.Id <= 0);

            // var id = creating ?
            //     await api.ProcessCommand<DutyModel, CreateDuty>("api/CreateDuty", new CreateDuty { Duty = duty }) :
            //     await api.ProcessCommand<DutyModel, UpdateDuty>("api/UpdateDuty", new UpdateDuty { Duty = duty });

            // if (id <= 0)
            //     throw new Exception("Unable to save land plot");
            // if (creating)
            // {
            //     duty.Id = id;
            //     appState.DbContext.Duties.Add(duty);
            // }
            // else
            // {
            //     var updated = await appState.DbContext.Duties.FindAsync(duty.Id);
            //     updated = duty.Map(updated) as DutyModel;
            // }
            // await appState.DbContext.SaveChangesAsync();
            // editContext = new EditContext(duty);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }

    }
    private bool showDutyModal = false;
    private EditContext dutyEditContext = new EditContext(new DutyModel());
    private void ShowDutyEditor()
    {
        showDutyModal = true;
        StateHasChanged();
    }
    private void DutySubmitted(EditContext e)
    {
        var model = e.Model as DutyModel;
        showDutyModal = false;
        if (model == null) return;
        ((ScheduledDutyModel)editContext.Model).DutyId = model.Id;
        StateHasChanged();
    }
    private void DutyCanceled(object e)
    {
        showDutyModal = false;
        StateHasChanged();
    }

    private bool showSourceModal = false;
    private void ShowSourceEditor()
    {
        showSourceModal = true;
        StateHasChanged();
    }
    private void SourceSubmitted(EditContext e)
    {
        var model = e.Model as DutyModel;
        showSourceModal = false;
        if (model == null) return;
        ((ScheduledDutyModel)editContext.Model).ScheduleSourceId = model.Id;
        StateHasChanged();
    }
    private void SourceCanceled(object e)
    {
        showSourceModal = false;
        StateHasChanged();
    }
    private List<KeyValuePair<long, string>> sourceIds()
    {
        if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Milestone)
            return appState.DbContext.Milestones.OrderBy(a => a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();
        if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Chore)
            return appState.DbContext.Chores.OrderBy(a => a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();
        if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Event)
            return appState.DbContext.Events.OrderByDescending(a=>a.StartDate).ThenBy(a => a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();

        return new List<KeyValuePair<long, string>>();
    }
}
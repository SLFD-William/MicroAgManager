@using Domain.Logic
@using MicroAgManager.Components.Duty
@using MicroAgManager.Components.Shared
@inherits BaseEditor
@if (scheduledDuty is not null)
{
    <ValidatedForm editContext="editContext"
                   Modal=Modal
                   Show=Show
                   Title="@((scheduledDuty.Id< 1 ? "Create " : "Edit ") + scheduledDuty.Duty.Command)">
       
         <ChildContent>
            <ValidatedField ValidationMessageFor="@(() => scheduledDuty.DutyId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>Duty</span>
                        <button type="button" @onclick=ShowDutyEditor>+</button>
                        <DutyEditor Modal=true Show=@_showingDutyEditor editContext=dutyEditContext OnCancel=DutyCanceled OnSubmit=DutySubmitted></DutyEditor>
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@DutyId">
                        <option value="">Select Duty ...</option>
                        @foreach (var unit in dutySelections())
                        {
                            <option value="@unit.Id">
                                @unit.Name
                            </option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
            @if (scheduledDuty.DutyId > 0)
            {
                <ValidatedField ValidationMessageFor="@(() => scheduledDuty.ScheduleSourceId)">
                    <LegendContent>
                        <div style="display:inline-flex;gap:1rem;">
                            <span>@scheduledDuty.ScheduleSource</span>
                            <button type="button" @onclick=ShowSourceEditor>+</button>
                            @if (_showingSourceEditor)
                            {
                                <DynamicComponent Type="@sourceType" Parameters="@sourceComponents[sourceType.Name].Parameters" />
                            }
                        </div>
                    </LegendContent>
                    <ChildContent>
                        <InputSelect @bind-Value="@ScheduleSourceId">
                            <option value="">Select Source ...</option>
                            @foreach (var unit in DutyLogic.ScheduledDutySourceIds(appState.DbContext,scheduledDuty))
                            {
                                <option value="@unit.Key">
                                    @unit.Value
                                </option>
                            }
                        </InputSelect>
                    </ChildContent>
                </ValidatedField>
            }
            @if (ShowRecordEditor())
            {
                <section style="grid-column:1/-1;width:100%;">
                    <DynamicComponent @ref="recordComponent" Type="@_recordType" Parameters="@recordComponents[_recordType.Name].Parameters" />
                </section>
            }
        </ChildContent>
        <SecondaryContent>
            <section style="display:flex;grid-column:1/-1;width:100%;">
            <button type="button" @onclick="@(()=>OnScheduledDutySubmit(editContext))">@(scheduledDuty.Id <= 0 ? "Create" : "Update")</button>
                <TimePrompt @ref=_rescheduleEditor Legend="@($"Reschedule {scheduledDuty.Duty.Name}")" Show=showReschedule Cancelled="RescheduleCancel" Submitted="RescheduleSubmitted" SuggestedTime="newDue"></TimePrompt>
            @if(scheduledDuty.Id > 0 && !scheduledDuty.CompletedOn.HasValue)
            {
                  <button type="button" @onclick="Snooze">@SnoozeLabel()</button>
                    <TimePrompt @ref=_snoozeEditor Show=showSnooze Cancelled="SnoozeCancel" Submitted="SnoozeSubmitted" SuggestedTime="SuggestedSnooze"></TimePrompt>
                    <button type="button" @onclick="Dismiss">Dismiss</button>
                    <ConfirmationYesNo Prompt="Are you sure you want to Dismiss this Duty?" Show=showDismiss Cancelled="DismissCancel" Submitted="DismissedConfirmed"></ConfirmationYesNo>
            }
            <button type="button" @onclick="@(()=>OnCancel.InvokeAsync(editContext))">Cancel</button>
            </section>
        </SecondaryContent>
    </ValidatedForm>
}

@using BackEnd.BusinessLogic.Livestock
@using BackEnd.BusinessLogic.ScheduledDuty
@using Domain
@using Domain.Abstracts
@using Domain.Constants
@using Domain.Interfaces
@using Domain.Models
@using MicroAgManager.Components.Chore
@using MicroAgManager.Components.Duty
@using MicroAgManager.Components.Event
@using MicroAgManager.Components.Livestock
@using MicroAgManager.Components.Measurement
@using MicroAgManager.Components.Milestone
@using MicroAgManager.Components.Registration
@using MicroAgManager.Components.Shared
@using MicroAgManager.Components.TreatmentRecord
@using MicroAgManager.Data
@using MicroAgManager.Services
@inherits BaseEditor
@if (scheduledDuty is not null)
{
    <ValidatedForm editContext="editContext"
                   OnSubmit="@OnScheduledDutySubmit"
                   OnCancel="@(()=> OnCancel.InvokeAsync(editContext))"
                   showUpdateCancelButtons="true"
                   createOnly="@(scheduledDuty.Id<1)"
                   Modal=Modal
                   Show=Show
                   Title="@((scheduledDuty.Id< 1 ? "Create " : "Edit ") + scheduledDuty.Duty.Command)">
        <ValidatedField ValidationMessageFor="@(() => scheduledDuty.DutyId)">
            <LegendContent>
                <div style="display:inline-flex;gap:1rem;">
                    <span>Duty</span>
                    <button type="button" @onclick=ShowDutyEditor>+</button>
                    <DutyEditor Modal=true Show=@_showingDutyEditor editContext=dutyEditContext OnCancel=DutyCanceled OnSubmit=DutySubmitted></DutyEditor>
                </div>
            </LegendContent>
            <ChildContent>
                <InputSelect @bind-Value="@DutyId">
                    <option value="">Select Duty ...</option>
                    @foreach (var unit in appState.DbContext.Duties.Where(d => d.Command == scheduledDuty.Duty.Command))
                    {
                        <option value="@unit.Id">
                            @unit.Name
                        </option>
                    }
                </InputSelect>
            </ChildContent>
        </ValidatedField>
        @if (scheduledDuty.DutyId > 0)
        { 
            <ValidatedField ValidationMessageFor="@(() => scheduledDuty.ScheduleSourceId)">
                <LegendContent>
                    <div style="display:inline-flex;gap:1rem;">
                        <span>@scheduledDuty.ScheduleSource</span>
                        <button type="button" @onclick=ShowSourceEditor>+</button>
                        @if (_showingSourceEditor)
                        {
                            <DynamicComponent Type="@sourceType" Parameters="@sourceComponents[sourceType.Name].Parameters" />
                        }
                    </div>
                </LegendContent>
                <ChildContent>
                    <InputSelect @bind-Value="@ScheduleSourceId">
                        <option value="">Select Source ...</option>
                        @foreach (var unit in sourceIds())
                        {
                            <option value="@unit.Key">
                                @unit.Value
                            </option>
                        }
                    </InputSelect>
                </ChildContent>
            </ValidatedField>
        }
        @if (ShowRecordEditor())
        {
            <section style="grid-column:1/-1;width:100%;">
            <DynamicComponent @ref="recordComponent" Type="@recordType" Parameters="@recordComponents[recordType.Name].Parameters" />
            </section>
        }
    </ValidatedForm>
}
@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Inject] protected IAPIService api { get; set; }

    private DynamicComponent? recordComponent;
    private ScheduledDutyModel? scheduledDuty;
    private long DutyId
    {
        get
        {
            return scheduledDuty.DutyId;
        }
        set
        {
            if (value != scheduledDuty.DutyId)
            {
                scheduledDuty.DutyId = value;
                scheduledDuty.Duty = appState.DbContext.Duties.Find(value);
                ShowRecordEditor();
                StateHasChanged();
            }
        }
    }
    private long ScheduleSourceId
    {
        get
        {
            return scheduledDuty.ScheduleSourceId;
        }
        set
        {
            if (value != scheduledDuty.ScheduleSourceId)
            {
                scheduledDuty.ScheduleSourceId = value;
                ShowRecordEditor();
                StateHasChanged();
            }
        }
    }
    protected override void OnInitialized()
    {
        scheduledDuty = editContext.Model as ScheduledDutyModel;
        if (scheduledDuty is null) return;
        if (string.IsNullOrEmpty(scheduledDuty.ScheduleSource)) scheduledDuty.ScheduleSource = ScheduledDutySourceConstants.Event;
        if (scheduledDuty.DueOn == DateTime.MinValue) scheduledDuty.DueOn = DateTime.Today;
        scheduledDuty.Duty = appState.DbContext.Duties.Find(scheduledDuty.DutyId);
        DutyId = scheduledDuty.DutyId;
        ScheduleSourceId = scheduledDuty.ScheduleSourceId;
    }

    private DateTime? GetDatePerformedFromRecord(object recordModel)
    {
        switch (recordModel.GetType().Name)
        {
            case nameof(MeasurementModel):
                return ((MeasurementModel)recordModel).DatePerformed;
            case nameof(RegistrationModel):
                return ((RegistrationModel)recordModel).RegistrationDate;
            case nameof(ServiceLivestock):
                return ((ServiceLivestock)recordModel).ServiceDate;
            case nameof(BreedingRecordModel):
                return ((BreedingRecordModel)recordModel).ResolutionDate;
            default:
                return null;
        }
    }
    private string GetRecipientFromRecipientType(DutyModel duty)
    {
        switch (duty.RecipientType)
        {
            case nameof(RecipientTypeConstants.LivestockAnimal):
            case nameof(RecipientTypeConstants.LivestockBreed):
                return nameof(Domain.Entity.Livestock);

            default:
                return null;
        }
    }

    private async Task OnScheduledDutySubmit(EditContext editContext)
    {
        var myComponent = recordComponent?.Instance as HasRecipientsEditor;
        if (!myComponent.editContext.Validate()) return;

        var recordModel = await myComponent.SubmitEditContext();
        if (recordModel is IHasRecipient)
        {
            scheduledDuty.Record = ((BaseModel)recordModel).GetEntityName();
            scheduledDuty.RecordId = ((BaseModel)recordModel).Id;
            scheduledDuty.RecipientId = ((IHasRecipient)recordModel).RecipientId;
        }
        if (recordModel is ServiceLivestock)
        {
            scheduledDuty.RecordId = -1;
            scheduledDuty.Record = nameof(ServiceLivestock);
            scheduledDuty.RecipientId = ((ServiceLivestock)recordModel).StudId;
        }

        scheduledDuty.Recipient = GetRecipientFromRecipientType(scheduledDuty.Duty);
        scheduledDuty.CompletedOn = GetDatePerformedFromRecord(recordModel);

        editContext = new EditContext(scheduledDuty);

        if (!editContext.Validate()) return;
        try
        {

            var creating = (scheduledDuty.Id <= 0);

            var id = creating ?
                await api.ProcessCommand<ScheduledDutyModel, CreateScheduledDuty>("api/CreateScheduledDuty", new CreateScheduledDuty { ScheduledDuty = scheduledDuty }) :
                await api.ProcessCommand<ScheduledDutyModel, UpdateScheduledDuty>("api/UpdateScheduledDuty", new UpdateScheduledDuty { ScheduledDuty = scheduledDuty });

            if (id <= 0)
                throw new Exception("Unable to save scheduled duty");
            if (creating)
            {
                scheduledDuty.Id = id;
                appState.DbContext.ScheduledDuties.Add(scheduledDuty);
            }
            else
            {
                var updated = await appState.DbContext.ScheduledDuties.FindAsync(scheduledDuty.Id);
                updated = scheduledDuty.Map(updated) as ScheduledDutyModel;
            }
            await appState.DbContext.SaveChangesAsync();
            editContext = new EditContext(scheduledDuty);
            await OnSubmit.InvokeAsync(editContext);
        }
        catch (Exception ex)
        {

        }

    }

    #region Duty
    private bool _showingDutyEditor = false;
    private EditContext dutyEditContext = new EditContext(new DutyModel());
    private void ShowDutyEditor()
    {
        _showingDutyEditor = true;
        StateHasChanged();
    }
    private void DutySubmitted(EditContext e)
    {
        var model = e.Model as DutyModel;
        _showingDutyEditor = false;
        if (model == null) return;
        scheduledDuty.DutyId = model.Id;
        scheduledDuty.Duty = appState.DbContext.Duties.Find(model.Id);
        editContext = new EditContext(scheduledDuty);
        StateHasChanged();
    }
    private void DutyCanceled(object e)
    {
        _showingDutyEditor = false;
        StateHasChanged();
    }

    #endregion
    #region Source
    private List<KeyValuePair<long, string>> sourceIds()
    {
        if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Milestone)
            return appState.DbContext.Milestones.OrderBy(a => a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();
        if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Chore)
            return appState.DbContext.Chores.OrderBy(a => a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();
        if (scheduledDuty.ScheduleSource == ScheduledDutySourceConstants.Event)
            return appState.DbContext.Events.OrderByDescending(a=>a.StartDate).ThenBy(a => a.Name).Select(x => new KeyValuePair<long, string>(x.Id, x.Name)).ToList();

        return new List<KeyValuePair<long, string>>();
    }
    private bool _showingSourceEditor = false;
    Type? sourceType;
    private EditContext sourceEditContext;
    private Dictionary<string, ComponentMetadata> sourceComponents =
     new()
         {
            {
                nameof(EventEditor),
                new ComponentMetadata
                {
                    Name = "Event",
                    Parameters = new() {
                        { "Modal", true },
                        { "Show", true },
                        { "editContext", string.Empty },
                        { "OnCancel", string.Empty },
                        { "OnSubmit", string.Empty }
                    }
                }
            }
         };
    private void ShowSourceEditor()
    {
        object model = null;
        switch (scheduledDuty.ScheduleSource)
        {
            case nameof(ScheduledDutySourceConstants.Event):
                model = appState.DbContext.Events.Find(scheduledDuty.ScheduleSourceId) ?? new EventModel() { Color = "#ffffff", StartDate = DateTime.Today, EndDate = DateTime.Today };
                sourceType = typeof(EventEditor);
                break;
            case nameof(ScheduledDutySourceConstants.Chore):
                break;
            case nameof(ScheduledDutySourceConstants.Milestone):
                break;
            default:
                sourceType = null;
                break;
        }
        if (sourceType is not null)
        {
            sourceEditContext = new EditContext(model);
            sourceComponents[sourceType.Name].Parameters["editContext"] = sourceEditContext;
            sourceComponents[sourceType.Name].Parameters["OnCancel"] = EventCallback.Factory.Create<EditContext>(this, SourceCanceled);
            sourceComponents[sourceType.Name].Parameters["OnSubmit"] = EventCallback.Factory.Create<EditContext>(this, SourceSubmitted);
        }
        _showingSourceEditor = true;
        StateHasChanged();
    }
    private void SourceSubmitted(EditContext e)
    {
        scheduledDuty.ScheduleSourceId = ((BaseModel)e.Model).Id;
        _showingSourceEditor = false;
        StateHasChanged();
    }
    private void SourceCanceled(EditContext e)
    {
        _showingSourceEditor = false;
        StateHasChanged();
    }
   
    #endregion
    #region Record
    private bool _showingRecordEditor = false;
    Type? recordType;
    private Dictionary<string, ComponentMetadata> recordComponents =
     new()
        {
            {
                nameof(MeasurementEditor),
                new ComponentMetadata
                {
                    Name = "Measurement",
                    Parameters = new() {
                        { "Modal", false },
                        { "Show", true },
                        { "ShowUpdateCancel", false },
                        { "editContext", string.Empty }
                    }
                }
            },
            {
                nameof(RegistrationEditor),
                new ComponentMetadata
                {
                    Name = "Registration",
                    Parameters = new() {
                        { "Modal", false },
                        { "Show", true },
                        { "ShowUpdateCancel", false },
                        { "editContext", string.Empty }
                    }
                }
            },
            {
                nameof(ServiceLivestockEditor),
                new ComponentMetadata
                {
                    Name = "Service",
                    Parameters = new() {
                        { "Modal", false },
                        { "Show", true },
                        { "ShowUpdateCancel", false },
                        { "editContext", string.Empty }
                    }
                }
            },
            {
                nameof(BreedingRecordEditor),
                new ComponentMetadata
                {
                    Name = "BreedingRecord",
                    Parameters = new() {
                        { "Modal", false },
                        { "Show", true },
                        { "ShowUpdateCancel", false },
                        { "editContext", string.Empty }
                    }
                }
            }
         };
    private bool ShowRecordEditor()
    {
        if (scheduledDuty.ScheduleSourceId < 1 || scheduledDuty.DutyId<1) return false;
        IHasRecipient model = null;
        switch (scheduledDuty.Duty.Command)
        {
            case nameof(DutyCommandConstants.Registration):
                scheduledDuty.Record = nameof(DutyCommandConstants.Registration);
                model = appState.DbContext.Registrations.Find(scheduledDuty.RecordId) ?? new RegistrationModel();
                if (((RegistrationModel)model).Id < 1)
                {
                    ((RegistrationModel)model).RegistrarId = scheduledDuty.Duty.CommandId;
                    ((RegistrationModel)model).Registrar = appState.DbContext.Registrars.Find(scheduledDuty.Duty.CommandId);
                    ((RegistrationModel)model).RegistrationDate = DateTime.Today;
                }
                recordType = typeof(RegistrationEditor);
                break;
            case nameof(DutyCommandConstants.Measurement):
                scheduledDuty.Record = nameof(DutyCommandConstants.Measurement);
                model = appState.DbContext.Measurements.Find(scheduledDuty.RecordId) ?? new MeasurementModel();
                if (((MeasurementModel)model).Id < 1)
                {
                    ((MeasurementModel)model).MeasureId = scheduledDuty.Duty.CommandId;
                    ((MeasurementModel)model).Measure = appState.DbContext.Measures.Find(scheduledDuty.Duty.CommandId);
                    ((MeasurementModel)model).DatePerformed = DateTime.Today;
                }
                recordType = typeof(MeasurementEditor);
                break;
            case nameof(DutyCommandConstants.Service):
                recordType = typeof(ServiceLivestockEditor);
                model = new ServiceLivestock() 
                    { DamIds = new List<long>(), 
                      ServiceDate = DateTime.Now, 
                      ScheduleSource = scheduledDuty.ScheduleSource, 
                      ScheduleSourceId = scheduledDuty.ScheduleSourceId };
                break;
            case nameof(DutyCommandConstants.Birth):
            case nameof(DutyCommandConstants.Breed):
                scheduledDuty.Record = "BreedingRecord";
                model = appState.DbContext.BreedingRecords.Find(scheduledDuty.RecordId) ?? new BreedingRecordModel();
                recordType = typeof(BreedingRecordEditor);
                break;
            case nameof(DutyCommandConstants.Treatment):
                break;
            default:
                recordType = null;
                break;
        }
        if (recordType is not null )
        {
            model.RecipientType = scheduledDuty.Duty.RecipientType;
            model.RecipientTypeId = scheduledDuty.Duty.RecipientTypeId;
            recordComponents[recordType.Name].Parameters["editContext"] = new EditContext(model);
            return true;
        }
        return false;
        
    }
    private void RecordSubmitted(EditContext e)
    {
        scheduledDuty.RecordId = ((BaseModel)e.Model).Id;
        //_showingRecordEditor = false;
        StateHasChanged();
    }
    private void RecordCanceled(EditContext e)
    {
        //_showingRecordEditor = false;
        StateHasChanged();
    }

#endregion

}
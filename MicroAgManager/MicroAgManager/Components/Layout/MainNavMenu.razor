@implements IDisposable

@inject NavigationManager NavigationManager

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />
<div class="MainNavMenu" onclick="document.querySelector('.navbar-toggler').click()">
    <nav>
        <a class="brand" href="">MicroAgManager</a>
        <div class="spanner"></div>
        <AuthorizeView>
            <Authorized>
                <NavLink href="/Home" Match="NavLinkMatch.Prefix">
                    @* <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> *@ Home
                </NavLink>
                <NavLink href="/Farm" Match="NavLinkMatch.Prefix">
                    @* <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> *@ Farm
                </NavLink>
                <NavLink href="Account/Manage">
                    @* <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> *@ @context.User.Identity?.Name
                </NavLink>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit">
                        @* <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> *@ Logout
                    </button>
                </form>
            </Authorized>
            <NotAuthorized>
                <NavLink href="Account/Register">
                    @* <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> *@ Register
                </NavLink>
                <NavLink href="Account/Login">
                    @* <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> *@ Login
                </NavLink>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


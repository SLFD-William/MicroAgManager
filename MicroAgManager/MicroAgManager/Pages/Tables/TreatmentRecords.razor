@page "/Ancillaries/TreatmentRecords"
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.ScheduledDuty
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.TreatmentRecord
@implements IDisposable
<PageTitle>Treatment Records</PageTitle>
<div class="TreatmentRecords">
  @if (appState.DbContext?.Tenants.Any() == true)
    {
        <TreeView Id="TreatmentRecord">
    
        </TreeView>
        <div>
            @if (!TreatmentRecordId.HasValue)
            {
                <div>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Treatment" ></ScheduledDutyCommand>
                    <TreatmentRecordGrid Items="baseTreatmentRecordQuery()">

                    </TreatmentRecordGrid>
                </div>
            } 
        </div>
    }
    else
    {
        <span>Initializing application </span>
    }
</div>

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "TreatmentId")] public long? TreatmentId { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "TreatmentRecordId")] public long? TreatmentRecordId { get; set; }
    private long _treatmentRecordId = -1;
    private int _treatmentRecordCount = 0;
    private IQueryable<TreatmentRecordModel> baseTreatmentRecordQuery()
    {
        var query = appState.DbContext.TreatmentRecords.Include(p => p.Treatment).Include(p => p.DosageUnit).AsQueryable();
        if (_treatmentRecordId > 0)
            query = query.Where(p => p.Id == _treatmentRecordId);
        else
        {
            // if (ApplicationState.FarmSelectedFilter.Any())
            //     query = query.Where(p => ApplicationState.FarmSelectedFilter.Contains(p.FarmLocationId));
            // if (ApplicationState.UsageSelectedFilter.Any())
            //     query = query.Where(p => ApplicationState.UsageSelectedFilter.Contains(p.Usage));
            // if (!string.IsNullOrEmpty(plotNameFilter))
            //     query = query.Where(p => p.Name.Contains(plotNameFilter));
        }
        _treatmentRecordCount = query.Count();
        return query.ToList().AsQueryable();
    }
    protected override void OnInitialized()
    {
        appState.OnDbInitialized += Refresh;
        appState.OnDbUpdate += Refresh;
        appState.OnLocationChange += Refresh;
    }
    private void Refresh() => StateHasChanged();
    public void Dispose()
    {
        appState.OnDbInitialized -= Refresh;
        appState.OnDbUpdate -= Refresh;
        appState.OnLocationChange -= Refresh;
    }
}

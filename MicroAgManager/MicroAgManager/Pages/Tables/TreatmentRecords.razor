@page "/Ancillaries/TreatmentRecords"
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.ScheduledDuty
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.TreatmentRecord
@implements IDisposable
<PageTitle>Treatment Records</PageTitle>
<div class="TreatmentRecords">
  @if (appState.DbContext?.Tenants.Any() == true)
    {
        <TreeView Id="TreatmentRecord">

        </TreeView>
        <div>
            @if (showEditor)
            {
                @if (TreatmentRecordId.HasValue)
                { 
                    <TreatmentRecordEditor Show=@TreatmentRecordId.HasValue Modal=false editContext="_recordContext" OnSubmit="EditorClosed" OnCancel="EditorClosed">

                    </TreatmentRecordEditor>
                }
                @if (TreatmentId.HasValue)
                {
                    <TreatmentEditor Show=@TreatmentId.HasValue Modal=false editContext="_treatmentContext" OnSubmit="EditorClosed" OnCancel="EditorClosed">

                    </TreatmentEditor>
                }
            }
            else
            {
                <div>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Treatment" ></ScheduledDutyCommand>
                    <TreatmentRecordGrid Items="baseTreatmentRecordQuery()">

                    </TreatmentRecordGrid>
                </div>
            } 
        </div>
    }
    else
    {
        <span>Initializing application </span>
    }
</div>

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "TreatmentId")] public long? TreatmentId { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "TreatmentRecordId")] public long? TreatmentRecordId { get; set; }
    private long _treatmentRecordId = -1;
    private int _treatmentRecordCount = 0;

    private void EditorClosed(EditContext context) => ApplicationState.NavigateTo(new() { { "TreatmentRecordId", string.Empty }, { "TreatmentId", string.Empty } });
    private EditContext _recordContext;
    private EditContext _treatmentContext;
    private bool showEditor = false;

    private IQueryable<TreatmentRecordModel> baseTreatmentRecordQuery()
    {
        var query = appState.DbContext.TreatmentRecords.Include(p => p.Treatment).Include(p => p.DosageUnit).AsQueryable();
        if (_treatmentRecordId > 0)
            query = query.Where(p => p.Id == _treatmentRecordId);
        else
        {
            // if (ApplicationState.FarmSelectedFilter.Any())
            //     query = query.Where(p => ApplicationState.FarmSelectedFilter.Contains(p.FarmLocationId));
            // if (ApplicationState.UsageSelectedFilter.Any())
            //     query = query.Where(p => ApplicationState.UsageSelectedFilter.Contains(p.Usage));
            // if (!string.IsNullOrEmpty(plotNameFilter))
            //     query = query.Where(p => p.Name.Contains(plotNameFilter));
        }
        _treatmentRecordCount = query.Count();
        return query.ToList().AsQueryable();
    }
    protected override void OnInitialized()
    {
        appState.OnDbInitialized += Refresh;
        appState.OnDbUpdate += Refresh;
        appState.OnLocationChange += LocationChanged;
    }
    private void LocationChanged()
    {
        showEditor = TreatmentRecordId.HasValue || TreatmentId.HasValue ;
        _recordContext = new EditContext(new TreatmentRecordModel());
        _treatmentContext = new EditContext(new TreatmentModel());
        if (showEditor)
        {
            if (TreatmentRecordId.HasValue)
            {
                var unit = appState.DbContext.TreatmentRecords.Find(TreatmentRecordId);
                if (unit is TreatmentRecordModel)
                    _recordContext = new EditContext(unit);
            }
            if (TreatmentId.HasValue)
            {
                var unit = appState.DbContext.Treatments.Find(TreatmentId);
                if (unit is TreatmentModel)
                    _treatmentContext = new EditContext(unit);
            }
        }
        StateHasChanged();
    }
    private void Refresh() => StateHasChanged();
    public void Dispose()
    {
        appState.OnDbInitialized -= Refresh;
        appState.OnDbUpdate -= Refresh;
        appState.OnLocationChange -= LocationChanged;
    }
}

@page "/Ancillaries/Measurements"
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.ScheduledDuty
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.Measurement
@implements IDisposable
<PageTitle>Measurements</PageTitle>
<div class="Measurements">
  @if (appState.DbContext?.Tenants.Any() == true)
    {
        <TreeView Id="Measurement">
    
        </TreeView>
        <div>
            @if (showEditor)
            {
                @if (MeasurementId.HasValue)
                { 
                    <MeasurementEditor Show=@MeasurementId.HasValue Modal=false editContext="_recordContext" OnSubmit="EditorClosed" OnCancel="EditorClosed">

                    </MeasurementEditor>
                }
                @if (MeasureId.HasValue)
                {
                    <MeasureEditor Show=@MeasureId.HasValue Modal=false editContext="_treatmentContext" OnSubmit="EditorClosed" OnCancel="EditorClosed">

                    </MeasureEditor>
                }
            }
            else
            {
                <div>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Measurement" ></ScheduledDutyCommand>
                    <MeasurementGrid Items="baseMeasurementQuery()">

                    </MeasurementGrid>
                </div>
            } 
        </div>
    }
    else
    {
        <span>Initializing application </span>
    }
</div>

@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "MeasureId")] public long? MeasureId { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "MeasurementId")] public long? MeasurementId { get; set; }
    private long _measurementId = -1;
    private int _measurementCount = 0;
    private void EditorClosed(EditContext context) => ApplicationState.NavigateTo(new() { { "MeasurementId", string.Empty }, { "MeasureId", string.Empty } });
    private EditContext _recordContext;
    private EditContext _treatmentContext;
    private bool showEditor = false;
    private IQueryable<MeasurementModel> baseMeasurementQuery()
    {
        var query = appState.DbContext.Measurements.Include(p => p.Measure).ThenInclude(m=>m.Unit).Include(p => p.MeasurementUnit).AsQueryable();
        if (_measurementId > 0)
            query = query.Where(p => p.Id == _measurementId);
        
        _measurementCount = query.Count();
        foreach (var sd in query)
            sd.PopulateDynamicRelations(appState.DbContext);

        return query;
    }
    protected override void OnInitialized()
    {
        appState.OnDbInitialized += Refresh;
        appState.OnDbUpdate += Refresh;
        appState.OnLocationChange += LocationChanged;
    }
    private void LocationChanged()
    {
        showEditor = MeasurementId.HasValue || MeasureId.HasValue;
        _recordContext = new EditContext(new MeasurementModel());
        _treatmentContext = new EditContext(new MeasureModel());
        if (showEditor)
        {
            if (MeasurementId.HasValue)
            {
                var unit = appState.DbContext.Measurements.Find(MeasurementId);
                if (unit is MeasurementModel)
                    _recordContext = new EditContext(unit);
            }
            if (MeasureId.HasValue)
            {
                var unit = appState.DbContext.Measures.Find(MeasureId);
                if (unit is MeasureModel)
                    _treatmentContext = new EditContext(unit);
            }
        }
        StateHasChanged();
    }
    private void Refresh() => StateHasChanged();
    public void Dispose()
    {
        appState.OnDbInitialized -= Refresh;
        appState.OnDbUpdate -= Refresh;
        appState.OnLocationChange -= LocationChanged;
    }
}
@page "/Ancillaries/ScheduledDuties"
@using Domain.Constants
@using Domain.Models
@using MicroAgManager.Components.ScheduledDuty
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore
@implements IDisposable
<PageTitle>Scheduled Duties</PageTitle>
<div class="ScheduledDuties">
      @if (appState.DbContext?.Tenants.Any() == true)
    {
        <TreeView Id="ScheduledDuties">
    
        </TreeView>
        <div>
            @if (!ScheduledDutyId.HasValue)
            {
                <div>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Service"></ScheduledDutyCommand>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Breed"></ScheduledDutyCommand>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Registration"></ScheduledDutyCommand>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Measurement"></ScheduledDutyCommand>
                    <ScheduledDutyCommand Command="@DutyCommandConstants.Treatment"></ScheduledDutyCommand>
                    <ScheduledDutyGrid Items="baseScheduledDutyQuery()">

                    </ScheduledDutyGrid>
                </div>
            } 
        </div>
    }
    else
    {
        <span>Initializing application </span>
    }
</div>
@code {
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "ScheduledDutyId")] public long? ScheduledDutyId { get; set; }
    private long _scheduledDutyId = -1;
    private int _scheduledDutyCount = 0;
    private IQueryable<ScheduledDutyModel> baseScheduledDutyQuery()
    {

        var query = appState.DbContext.ScheduledDuties.Include(p => p.Duty).AsQueryable();
        if (_scheduledDutyId > 0)
            query = query.Where(p => p.Id == _scheduledDutyId);

        _scheduledDutyCount = query.Count();
        foreach (var sd in query)
        {
            sd.PopulateDynamicRelations(appState.DbContext);
            sd.Duty.PopulateDynamicRelations(appState.DbContext);
        }
        return query;
    }
    protected override void OnInitialized()
    {
        appState.OnDbInitialized += Refresh;
        appState.OnDbUpdate += Refresh;
        appState.OnLocationChange += Refresh;
    }
    private void Refresh() => StateHasChanged();
    public void Dispose()
    {
        appState.OnDbInitialized -= Refresh;
        appState.OnDbUpdate -= Refresh;
        appState.OnLocationChange -= Refresh;
    }
}
@page "/farm"
@page "/farm/{farmLocationId}"
@inherits ClientAppPage

@using Domain.Models
@using FrontEnd.Persistence
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.Farm


<PageTitle>Farms</PageTitle>
<div class="Farm">

@if (_app !=null)
{
    @if (_farmCount == 1)
    {
        <CascadingValue Value="farm">
            <FarmNameplate ></FarmNameplate>
        </CascadingValue>
    }
    else
    {
        <FarmGrid cityFilterChanged="@((x) => {cityFilter=x; StateHasChanged();})"
                  countryCodeFilterChanged="@((x) => {countryCodeFilter=x; StateHasChanged();})"
                  countryFilterChanged="@((x) => {countryFilter=x; StateHasChanged();})"
                  farmNameFilterChanged="@((x) => {farmNameFilter=x; StateHasChanged();})"
                  latitudeFilterChanged="@((x) => {latitudeFilter=x; StateHasChanged();})"
                  longitudeFilterChanged="@((x) => {longitudeFilter=x; StateHasChanged();})"
                  stateFilterChanged="@((x) => {stateFilter=x; StateHasChanged();})"
                  streetFilterChanged="@((x) => {streetFilter=x; StateHasChanged();})"
                  zipFilterChanged="@((x) => {zipFilter=x; StateHasChanged();})"
                  Items="filteredFarmQuery()">
              </FarmGrid>
    }
}
else
{
<span>Initializing application </span>    
}
</div>


@code {
    [Inject] IDbContextFactory<FrontEndDbContext> _dbContextFactory { get; set; }
    [Parameter] public string farmLocationId { get; set; }
    QuickGrid<FarmLocationModel> farmGrid;

    FarmLocationModel farm = new();

    private int _farmCount=0;
    string farmNameFilter;
    string streetFilter;
    string cityFilter;
    string stateFilter;
    string zipFilter;
    string countryFilter;
    string countryCodeFilter;
    string latitudeFilter;
    string longitudeFilter;
    private async Task<IQueryable<FarmLocationModel>> baseFarmQuery()
    {
        using (var dbContext = await _dbContextFactory.CreateDbContextAsync())
        {
            return dbContext.Farms.Include(p => p.Plots).AsQueryable();
        }
    }
    private IQueryable<FarmLocationModel> filteredFarmQuery()
    {
        var query = baseFarmQuery().Result;
        if (!string.IsNullOrEmpty(farmLocationId))
        {
            if(long.TryParse(farmLocationId,out var id))
                query = query.Where(p => p.Id == id);
        }
        else
        {
        if (!string.IsNullOrEmpty(farmNameFilter))
            query = query.Where(p => p.Name.Contains(farmNameFilter));
        if (!string.IsNullOrEmpty(streetFilter))
            query = query.Where(p => p.StreetAddress.Contains(streetFilter));
        if (!string.IsNullOrEmpty(cityFilter))
            query = query.Where(p => p.City.Contains(cityFilter));
        if (!string.IsNullOrEmpty(stateFilter))
            query = query.Where(p => p.State.Contains(stateFilter));
        if (!string.IsNullOrEmpty(zipFilter))
            query = query.Where(p => p.Zip.Contains(zipFilter));
        if (!string.IsNullOrEmpty(countryFilter))
            query = query.Where(p => p.Country.Contains(countryFilter));
        if (!string.IsNullOrEmpty(countryCodeFilter))
            query = query.Where(p => p.CountryCode.Contains(countryCodeFilter));
        if (!string.IsNullOrEmpty(latitudeFilter))
            query = query.Where(p => p.Latitude.HasValue && p.Latitude.Value.ToString().Contains(latitudeFilter));
        if (!string.IsNullOrEmpty(longitudeFilter))
            query = query.Where(p => p.Longitude.HasValue && p.Longitude.Value.ToString().Contains(longitudeFilter));
        }
        _farmCount=query.Count();
        if (_farmCount == 1)
        {
            farm = query.First();
            StateHasChanged();
        }
        return query;
    }

}

@page "/Home"
@using Domain.Constants
@using Domain.Models
@using FrontEnd.Persistence
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.ScheduledDuty
@implements IDisposable

<PageTitle>Home</PageTitle>
<div class="Home">
@if (appState.DbContext == null)
{
    <span>Initializing DB</span>
}
else 
{
    @if (!appState.DbContext.LandPlots.Any())
    {
        <NavLink href="/Land?LandPlotId=-1">Create a Plot of Land</NavLink>
    }
    else{
        @foreach (var command in DutyCommandConstants.AllCommands.OrderBy(x => x))
        {
            @if (appState.DbContext.ScheduledDuties.Include(s => s.Duty).Any(s => !s.CompletedOn.HasValue && s.Duty.Command == command))
            {
                <span>@command Due</span>
                <ScheduledDutyCarousel Items="@CommandDuties(command)"></ScheduledDutyCarousel>
            }
        }
    }
}
</div>

@code{
    [CascadingParameter] private ApplicationState appState { get; set; }
    protected override void OnInitialized()
    {
        appState.OnDbInitialized += appState_OnDbInitialized;
        appState.OnDbUpdate += appState_OnDbUpdate;
    }
    private void appState_OnDbUpdate() => StateHasChanged();
    private void appState_OnDbInitialized() => StateHasChanged();
    public void Dispose()
    {
        appState.OnDbInitialized -= appState_OnDbInitialized;
        appState.OnDbUpdate -= appState_OnDbUpdate;
    }
    private IQueryable<ScheduledDutyModel> CommandDuties(string command)=> appState.DbContext.ScheduledDuties.Include(s => s.Duty)
                                .Where(s => !s.CompletedOn.HasValue && s.Duty.Command == command);

}
@page "/Home"
@using Domain.Constants
@using Domain.Logic
@using Domain.Models
@using FrontEnd.Persistence
@using MicroAgManager.Components.Farm
@using MicroAgManager.Services
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.ScheduledDuty
@implements IDisposable

<PageTitle>Home</PageTitle>
<div class="Home">
@if (appState.DbContext == null)
{
    <span>Initializing DB</span>
}
else 
{
    @if (!appState.DbContext.LandPlots.Any())
    {
            <FarmEditor Modal=true Show=true editContext=@(new EditContext(new FarmLocationModel())) OnCancel=StateHasChanged OnSubmit=StateHasChanged></FarmEditor>
    }
    else{
            <CascadingValue Value="@appState.DbContext.Farms.First()">
                <FarmNameplate ShowAddress="true" ShowStreet="true" ShowCity="true" ShowState="true" ShowZip="true" ShowWeather="true" ShowEdit="true" ShowPlotUse="true">
                    
                </FarmNameplate>
            </CascadingValue>
            <section style="display:flex; gap:1rem;">
            @foreach (var command in DutyCommandConstants.AvailableCommands.OrderBy(x => x))
            {
                <ScheduledDutyCommand Command="@command"></ScheduledDutyCommand>
            }
            </section>
            @foreach (var command in DutyCommandConstants.AllCommands.OrderBy(x => x))
            {
                @if (ScheduledDutyLogic.OpenScheduledDutyQuery(appState.DbContext).Any(s => s.Duty.Command == command))
                {
                    <span>@command Due</span>
                    <ScheduledDutyCarousel Items="@ScheduledDutyLogic.CommandDuties(appState.DbContext,command)"></ScheduledDutyCarousel>
                }
            }
    }
}
</div>

@code{
    [CascadingParameter] private ApplicationState appState { get; set; }
    protected override void OnInitialized()
    {
        appState.OnDbInitialized += appState_OnDbInitialized;
        appState.OnDbUpdate += appState_OnDbUpdate;
    }
    private void appState_OnDbUpdate() => StateHasChanged();
    private void appState_OnDbInitialized() => StateHasChanged();
    public void Dispose()
    {
        appState.OnDbInitialized -= appState_OnDbInitialized;
        appState.OnDbUpdate -= appState_OnDbUpdate;
    }
}
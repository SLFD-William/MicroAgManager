@page "/Land"

@using Domain.Constants
@using Domain.Models
@using FrontEnd.Persistence
@using MicroAgManager.Components.Shared
@using MicroAgManager.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.LandPlot
@using MicroAgManager.Components.Farm
@implements IDisposable
<PageTitle>Land</PageTitle>
<div class="Land">
    @if (appState.DbContext?.Tenants.Any() == true)
    {
        <TreeView Id="Land" >
            <TreeNode Id="Land>Farms" NodeName="Farms" Collapsable="false">
                <NodeContent>
                    <section class="nodeContent">
                        <span>Farms</span>
                        @if (ApplicationState.CanAddFarm())
                        {
                            <NavLink @onclick:stopPropagation href=@(ApplicationState.CorrectedParametersUri(new(){{ "LandPlotId", "-1" }}))>add</NavLink>
                        }
                    </section>
                </NodeContent>
                <ChildContent>
                @foreach (var farm in appState.DbContext.Farms)
                {
                        var farmNodeId = $"Land>Farms>{nameof(FarmLocationModel)}.{nameof(FarmLocationModel.Id)}:{farm.Id}";
                        <TreeNode Id=@farmNodeId NodeName="@farm.Name"
                                  IsCollapsed=@(!ApplicationState.ExpandedTreeNodes.Contains(farmNodeId))
                                  IsSelected=@ApplicationState.SelectedTreeNodes.Contains(farmNodeId)
                                  OnNodeCollapseClick="@((b) =>{ApplicationState.UpdageExpandedNodeState(b.Id, b.IsCollapsed);})"
                                  OnNodeSelectClick="NodeSelectedByUser"
                                  OnSelectionChange="NodeSelectionChanged">
                            <NodeContent>
                                <section class="nodeContent">
                                    <span>@farm.Name</span> <NavLink @onclick:stopPropagation href=@(ApplicationState.CorrectedParametersUri(new(){{ "LandPlotId", "-1" },{ "FarmLocationId", farm.Id.ToString()}}))>add plot</NavLink>
                                </section>
                            </NodeContent>
                            <ChildContent>
                                @foreach (var usage in appState.DbContext.LandPlots.Select(p => p.Usage).Distinct().OrderBy(u => u))
                                {
                                    var usageNodeId = farmNodeId + $">{nameof(LandPlotModel)}.{nameof(LandPlotModel.Usage)}:{usage}";
                                    <TreeNode Id=@usageNodeId NodeName="@usage"
                                              IsSelected=@ApplicationState.SelectedTreeNodes.Contains(usageNodeId)
                                              OnNodeSelectClick="NodeSelectedByUser"
                                              OnSelectionChange="NodeSelectionChanged"></TreeNode>
                                }
                            </ChildContent>
                        </TreeNode>
                }
                </ChildContent>
            </TreeNode>
        </TreeView>
        <div>
            @if (FarmLocationId.HasValue)
            {
                <div>
                <CascadingValue Value="@appState.DbContext.Farms.Find(FarmLocationId.Value)">
                    <FarmNameplate ShowAddress="true" ShowStreet="true" ShowCity="true" ShowState="true" ShowZip="true" ShowWeather="true" ShowEdit="true"></FarmNameplate>
                </CascadingValue>
                </div>
            }
          
            @if (LandPlotId.HasValue || _addingPlot)
            {

            <div>
                @if (_addingPlot)
                {
                    <LandPlotEditor Modal="true" Show="@_addingPlot" editContext="_addPlotContext" OnCancel="PlotAddCancelled" OnSubmit="PlotAddSubmitted"></LandPlotEditor>
                }
                else
                {
                    <CascadingValue Value="LandPlot">
                        <LandPlotNameplate ShowArea="true" ShowFarm="@(!FarmLocationId.HasValue)" ShowDescription="true" ShowUsage="true" ShowSubplots="true"  ShowEdit="true"></LandPlotNameplate>
                    </CascadingValue>
                    @if (LandPlot.Usage == nameof(LandPlotUseConstants.Livestock))
                    {
                        <div>
                        <Livestock LocationId="@LandPlot.Id"></Livestock>
                        </div>
                    }
                }
            </div>
            }
            else
            {
            <div>
                <LandPlotGrid farmNameFilterChanged="@((x) => {farmNameFilter=x; StateHasChanged();})"
                              parentPlotNameFilterChanged="@((x) => {parentPlotNameFilter=x; StateHasChanged();})"
                              plotNameFilterChanged="@((x) => {plotNameFilter=x; StateHasChanged();})"
                              usageFilterChanged="@((x) => {usageFilter=x; StateHasChanged();})"
                              Items="baseLandPlotQuery()"
                              ShowFarmColumn=@(ApplicationState.FarmNameSelectedFilter.Count!=1)
                              ShowUsageColumn=@(ApplicationState.UsageSelectedFilter.Count!=1)>
                </LandPlotGrid>
            </div>
            }
        </div>
    }
    else
    {
        <span>Initializing application </span>
    }
</div>


@code {
    [Inject] NavigationManager navigationManager { get; set; }
    [CascadingParameter] private ApplicationState appState { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "FarmLocationId")] public long? FarmLocationId { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "LandPlotId")] public long? LandPlotId { get; set; }

    LandPlotModel LandPlot = new();

    private long _landPlotId = -1;
    private int _LandPlotCount = 0;


    string farmNameFilter;
    string parentPlotNameFilter;
    string usageFilter;
    string plotNameFilter;

    private EditContext _addPlotContext;
    private bool _addingPlot = false;


    private void NodeSelectedByUser(TreeNode selectedNode) => NodeSelected(selectedNode, !selectedNode.IsSelected);
    private void NodeSelectionChanged(TreeNode selectedNode) => NodeSelected(selectedNode, selectedNode.IsSelected);

    private void NodeSelected(TreeNode selectedNode, bool selected)
    {
        var nodeId = selectedNode.Id;
        ApplicationState.UpdageSelectedNodeState(nodeId, selected);
        var nodes = nodeId.Split('>');
        foreach (var node in nodes)
            if (node.Contains(':'))
            {
                var entityKeyValue = node.Split(':');
                if (entityKeyValue[0] == $"{nameof(FarmLocationModel)}.{nameof(FarmLocationModel.Id)}" && long.TryParse(entityKeyValue[1], out var farmId))
                    FarmSelected(selected, farmId);
                if (entityKeyValue[0] == $"{nameof(LandPlotModel)}.{nameof(LandPlotModel.Usage)}")
                    UsageSelected(selected, entityKeyValue[1]);
            }
    }



    private void FarmSelected(bool selected, long farmId)
    {
        if (selected)
        {
            if (!ApplicationState.FarmNameSelectedFilter.Contains(farmId)) ApplicationState.FarmNameSelectedFilter.Add(farmId);
        }
        else
        {
            if (ApplicationState.FarmNameSelectedFilter.Contains(farmId)) ApplicationState.FarmNameSelectedFilter.Remove(farmId);
        }
        StateHasChanged();
        if (ApplicationState.FarmNameSelectedFilter.Count != 1)
            navigationManager.NavigateTo(ApplicationState.CorrectedParametersUri(new() { { "FarmLocationId", string.Empty } }));
        else if (FarmLocationId != ApplicationState.FarmNameSelectedFilter[0])
            navigationManager.NavigateTo(ApplicationState.CorrectedParametersUri(new() { { "FarmLocationId", ApplicationState.FarmNameSelectedFilter[0].ToString() } }));

    }

    private void UsageSelected( bool selected, string usage)
    {
        
        if (selected)
        {
            if (!ApplicationState.UsageSelectedFilter.Contains(usage))
                ApplicationState.UsageSelectedFilter.Add(usage);
        }
        else
        { 
            if (ApplicationState.UsageSelectedFilter.Contains(usage))
                ApplicationState.UsageSelectedFilter.Remove(usage);
        }
    }

    protected override void OnInitialized()
    {
        appState.OnDbInitialized += appState_OnDbInitialized;
        appState.OnDbUpdate += appState_OnDbUpdate;
    }
    private void appState_OnDbUpdate() => StateHasChanged();
    private void appState_OnDbInitialized() => StateHasChanged();
    public void Dispose()
    {
        appState.OnDbInitialized -= appState_OnDbInitialized;
        appState.OnDbUpdate -= appState_OnDbUpdate;
    }
    protected override void OnParametersSet()
    {
        if ((!LandPlotId.HasValue && !FarmLocationId.HasValue) || (appState.DbContext?.Tenants.Any() != true))
        {
            base.OnParametersSet();
            return;
        }
        if (!FarmLocationId.HasValue && navigationManager.Uri.Contains("FarmLocationId"))
            navigationManager.NavigateTo(ApplicationState.CorrectedParametersUri(new() { { "FarmLocationId", string.Empty } }));
        if (FarmLocationId.HasValue && navigationManager.Uri.Contains("FarmLocationId") && !ApplicationState.FarmNameSelectedFilter.Contains(FarmLocationId.Value))
            ApplicationState.FarmNameSelectedFilter.Add(FarmLocationId.Value);

        _landPlotId = LandPlotId.HasValue ? LandPlotId.Value : -1;
        LandPlot = appState.DbContext.LandPlots.Find(_landPlotId) ?? new();
        if (_landPlotId < 1 && FarmLocationId.HasValue)
            LandPlot.FarmLocationId = FarmLocationId.Value;

        if (_landPlotId > 0 && LandPlot.FarmLocationId != FarmLocationId)
            FarmLocationId = LandPlot.FarmLocationId;
        _addPlotContext = new EditContext(LandPlot);
        _addingPlot = LandPlotId < 1;
        StateHasChanged();
    }

    private void PlotAddCancelled(EditContext context)=> navigationManager.NavigateTo(ApplicationState.CorrectedParametersUri(new() { { "LandPlotId", string.Empty } }));
    private void PlotAddSubmitted(EditContext context) => navigationManager.NavigateTo(ApplicationState.CorrectedParametersUri(new() { { "LandPlotId", (context.Model as LandPlotModel)?.Id.ToString() } }));
        
    private IQueryable<LandPlotModel> baseLandPlotQuery()
    {
        var query = appState.DbContext.LandPlots.Include(p => p.Farm).Include(p => p.ParentPlot).Include(p => p.AreaUnit).AsQueryable();
        if (_landPlotId > 0)
            query = query.Where(p => p.Id == _landPlotId);
        else
        {
            if (ApplicationState.FarmNameSelectedFilter.Any())
                query = query.Where(p => ApplicationState.FarmNameSelectedFilter.Contains(p.FarmLocationId));
            if (ApplicationState.UsageSelectedFilter.Any())
                query = query.Where(p => ApplicationState.UsageSelectedFilter.Contains(p.Usage));
            if (!string.IsNullOrEmpty(plotNameFilter))
                query = query.Where(p => p.Name.Contains(plotNameFilter));
        }
        _LandPlotCount = query.Count();
        return query.ToList().AsQueryable();
    }
}

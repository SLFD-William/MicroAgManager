@page "/Land"
@page "/Land/{landPlotId}"

@using Domain.Models
@using FrontEnd.Persistence
@using MicroAgManager.Components.Shared
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.LandPlot


<PageTitle>Land</PageTitle>
<div class="Land">
    @if (dbContext?.Tenants.Any()==true)
    {
        @if (!string.IsNullOrEmpty(landPlotId))
        {
            @if (_editting)
            {
                <LandPlotEditor  editContext="_editPlot"  OnCancel="PlotEditCancelled" OnSubmit="PlotEditSubmitted" ></LandPlotEditor>
            }
            else 
            {
                <CascadingValue Value="LandPlot">
                    <LandPlotNameplate OnEditClick="@(()=>_editting=true)"></LandPlotNameplate>
                </CascadingValue>
            }
        }
        else
        {
            
            <TreeView>
                <TreeNode NodeName="Farms">
                    @foreach(var farm in dbContext.Farms)
                    {
                        <TreeNode NodeName="@farm.Name" OnNodeSelected="@((b) => FarmSelected(b,farm.Id))">
                            <NodeContent>
                                <section class="nodeContent">
                                    <span>@farm.Name</span> <NavLink href=@($"/Land?FarmLocationId={farm.Id}")>add plot</NavLink>
                                </section>
                            </NodeContent>
                            <ChildContent>
                            @foreach (var usage in dbContext.LandPlots.Select(p=>p.Usage).Distinct().OrderBy(u=>u))
                            {
                                <TreeNode NodeName="@usage" OnNodeSelected="@((b) => UsageSelected(b,usage))"></TreeNode>
                            }
                            </ChildContent>
                        </TreeNode>
                    }
                </TreeNode>
            </TreeView>
            
            <LandPlotGrid farmNameFilterChanged="@((x) => {farmNameFilter=x; StateHasChanged();})"
                          parentPlotNameFilterChanged="@((x) => {parentPlotNameFilter=x; StateHasChanged();})"
                          plotNameFilterChanged="@((x) => {plotNameFilter=x; StateHasChanged();})"
                          usageFilterChanged="@((x) => {usageFilter=x; StateHasChanged();})"
                              Items="baseLandPlotQuery()"
                          ShowFarmColumn=@(farmNameSelectedFilter.Count!=1)
                          ShowUsageColumn=@(usageSelectedFilter.Count!=1)>
            </LandPlotGrid>
        }
    }
    else
    {
        <span>Initializing application </span>
    }
</div>


@code {
    [Inject] NavigationManager navigationManager { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "FarmLocationId")]
    public long? FarmLocationId { get; set; }

    [CascadingParameter] private FrontEndDbContext dbContext { get; set; }
    [Parameter] public string landPlotId { get; set; }
    QuickGrid<LandPlotModel> LandPlotGrid;

    LandPlotModel LandPlot = new();

    private long _landPlotId = -1;
    private int _LandPlotCount = 0;

    List<long> farmNameSelectedFilter=new();
    List<string> usageSelectedFilter = new();
    string farmNameFilter;
    string parentPlotNameFilter;
    string usageFilter;
    string plotNameFilter;

    private EditContext _editPlot;
    private bool _editting = false;


    private void FarmSelected(bool selected, long farmId)
    {
        if (selected)
            farmNameSelectedFilter.Add(farmId);
        else
            farmNameSelectedFilter.Remove(farmId);

    }
    private void UsageSelected(bool selected, string usage)
    {
        if (selected)
            usageSelectedFilter.Add(usage);
        else
            usageSelectedFilter.Remove(usage);

    }
    private async Task SetEditContext()
    {
        if ((string.IsNullOrEmpty(landPlotId) && !FarmLocationId.HasValue) || (dbContext?.Tenants.Any() != true))
        {
            await base.OnParametersSetAsync();
            return;
        }

        _landPlotId = -1;
        long.TryParse(landPlotId, out _landPlotId);

        LandPlot = await GetLandPlotAsync(_landPlotId) ?? new();
        if (_landPlotId < 1 && FarmLocationId.HasValue)
        {
            landPlotId = _landPlotId.ToString();
            LandPlot.FarmLocationId = FarmLocationId.Value;
        }    

        _editPlot = new EditContext(LandPlot);
        _editting = _landPlotId < 1;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync() => await SetEditContext();

    private void PlotEditCancelled(EditContext context) => navigationManager.NavigateTo("/Land");
    private async Task<LandPlotModel?> GetLandPlotAsync(long id)
    {
        var tenant = await dbContext.Tenants.FirstOrDefaultAsync();
        var plot = await dbContext.LandPlots.FirstOrDefaultAsync(l => l.Id == id);
        return plot;
        //return await dbContext.LandPlots.Include(p => p.Subplots).Include(p => p.ParentPlot).Include(p => p.Farm).FirstOrDefaultAsync(l => l.Id == id);
    }
    private void PlotEditSubmitted(EditContext context)=>navigationManager.NavigateTo("/Land");
    
    private IQueryable<LandPlotModel> baseLandPlotQuery()
    {
        var query= dbContext.LandPlots.Include(p => p.Farm).Include(p=>p.ParentPlot).Include(p=>p.AreaUnit).AsQueryable();
        if (_landPlotId > 0)
            query = query.Where(p => p.Id == _landPlotId);
        else
        {
            if (farmNameSelectedFilter.Any())
                query = query.Where(p => farmNameSelectedFilter.Contains(p.FarmLocationId));
            if (usageSelectedFilter.Any())
                query = query.Where(p => usageSelectedFilter.Contains(p.Usage));
            if (!string.IsNullOrEmpty(plotNameFilter))
                query = query.Where(p => p.Name.Contains(plotNameFilter));
        }
        _LandPlotCount = query.Count();
        return query.ToList().AsQueryable();
    }
  
}

@page "/Land"
@page "/Land/{landPlotId}"

@using Domain.Models
@using FrontEnd.Persistence
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using MicroAgManager.Components.LandPlot


<PageTitle>Land</PageTitle>
<div class="Land">
    @if (dbContext?.Tenants.Any()==true)
    {
        @if (_LandPlotCount == 1 || !string.IsNullOrEmpty(landPlotId))
        {
            @if (_editting)
            {
                <LandPlotEditor  editContext="_editPlot"  OnCancel="PlotEditCancelled" OnSubmit="PlotEditSubmitted" ></LandPlotEditor>
            }
            else 
            {
                <CascadingValue Value="LandPlot">
                    <LandPlotNameplate OnEditClick="@(()=>_editting=true)"></LandPlotNameplate>
                </CascadingValue>
            }
        }
        else
        {
            <LandPlotGrid farmNameFilterChanged="@((x) => {farmNameFilter=x; StateHasChanged();})"
                          parentPlotNameFilterChanged="@((x) => {parentPlotNameFilter=x; StateHasChanged();})"
                          plotNameFilterChanged="@((x) => {plotNameFilter=x; StateHasChanged();})"
                          usageFilterChanged="@((x) => {usageFilter=x; StateHasChanged();})"
                          Items="baseLandPlotQuery()">
            </LandPlotGrid>
        }
    }
    else
    {
        <span>Initializing application </span>
    }
</div>


@code {
    [CascadingParameter] private FrontEndDbContext dbContext { get; set; }
    [Parameter] public string landPlotId { get; set; }
    QuickGrid<LandPlotModel> LandPlotGrid;

    LandPlotModel LandPlot = new();

    private long _landPlotId = -1;
    private int _LandPlotCount = 0;
    string farmNameFilter;
    string parentPlotNameFilter;
    string usageFilter;
    string plotNameFilter;

    private EditContext _editPlot;
    private bool _editting = false;

    private async Task SetEditContext()
    {
        if (string.IsNullOrEmpty(landPlotId) || (dbContext?.Tenants.Any() != true)) return;
        _landPlotId = -1;
        long.TryParse(landPlotId, out _landPlotId);

        LandPlot = await GetLandPlotAsync(_landPlotId) ?? new();
        _editPlot = new EditContext(LandPlot);
        _editting = _landPlotId < 1;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync() => await SetEditContext();

    private async Task PlotEditCancelled(EditContext context)
    {
        LandPlot = _landPlotId > 0? await GetLandPlotAsync(_landPlotId) ?? new():new();
        _editPlot = new EditContext(LandPlot);
        StateHasChanged();
    }
    private async Task<LandPlotModel?> GetLandPlotAsync(long id)
    {
        var tenant = await dbContext.Tenants.FirstOrDefaultAsync();
        var plot = await dbContext.LandPlots.FirstOrDefaultAsync(l => l.Id == id);
        return plot;
            //return await dbContext.LandPlots.Include(p => p.Subplots).Include(p => p.ParentPlot).Include(p => p.Farm).FirstOrDefaultAsync(l => l.Id == id);
    }
    private void PlotEditSubmitted(EditContext context)
    {

    }
    private IQueryable<LandPlotModel> baseLandPlotQuery()
    {
        var query= dbContext.LandPlots.Include(p => p.Farm).AsQueryable();
        if (_landPlotId > 0)
            query = query.Where(p => p.Id == _landPlotId);
        else
        {
            if (!string.IsNullOrEmpty(plotNameFilter))
                query = query.Where(p => p.Name.Contains(plotNameFilter));
        }
        _LandPlotCount = query.Count();
        if (_LandPlotCount == 1)
        {
            LandPlot = query.First();
            StateHasChanged();
        }
        return query.ToList().AsQueryable();
    }
  
}
